[{"authors":["admin"],"categories":null,"content":"My name is Muhammad. I began my adventure in data science five years ago. Since then, I have been involved in a wide range of related projects such as machine learning for traffic accident data, social network analysis of Telegram messaging application, stock market prediction, and my personal text mining projects. I was recently a machine learning researcher in Data Science at the University of Twente in the Netherlands. My project was funded by ProRail, a Dutch company that is responsible for maintaining the railway infrastructure in the Netherlands. My project aimed to combine machine learning and big data techniques with formal method tools such as Fault Trees to help ProRail optimize their maintenance operations.\n","date":1548979200,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1548979200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"My name is Muhammad. I began my adventure in data science five years ago. Since then, I have been involved in a wide range of related projects such as machine learning for traffic accident data, social network analysis of Telegram messaging application, stock market prediction, and my personal text mining projects. I was recently a machine learning researcher in Data Science at the University of Twente in the Netherlands. My project was funded by ProRail, a Dutch company that is responsible for maintaining the railway infrastructure in the Netherlands.","tags":null,"title":"Muhammad Chenariyan Nakhaee","type":"authors"},{"authors":null,"categories":null,"content":"Flexibility This feature can be used for publishing content such as:\n Online courses Project or software documentation Tutorials  The courses folder may be renamed. For example, we can rename it to docs for software/project documentation or tutorials for creating an online course.\nDelete tutorials To remove these pages, delete the courses folder and see below to delete the associated menu link.\nUpdate site menu After renaming or deleting the courses folder, you may wish to update any [[main]] menu links to it by editing your menu configuration at config/_default/menus.toml.\nFor example, if you delete this folder, you can remove the following from your menu configuration:\n[[main]]\rname = \u0026#34;Courses\u0026#34;\rurl = \u0026#34;courses/\u0026#34;\rweight = 50\rOr, if you are creating a software documentation site, you can rename the courses folder to docs and update the associated Courses menu configuration to:\n[[main]]\rname = \u0026#34;Docs\u0026#34;\rurl = \u0026#34;docs/\u0026#34;\rweight = 50\rUpdate the docs menu If you use the docs layout, note that the name of the menu in the front matter should be in the form [menu.X] where X is the folder name. Hence, if you rename the courses/example/ folder, you should also rename the menu definitions in the front matter of files within courses/example/ from [menu.example] to [menu.\u0026lt;NewFolderName\u0026gt;].\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"59c3ce8e202293146a8a934d37a4070b","permalink":"/courses/example/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/example/","section":"courses","summary":"Learn how to use Academic's docs layout for publishing online courses, software documentation, and tutorials.","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"74533bae41439377bd30f645c4677a27","permalink":"/courses/example/example1/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/example1/","section":"courses","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim.","tags":null,"title":"Example Page 1","type":"docs"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"a42370c19c55c2aae7fc7b2f0b80cee5","permalink":"/otherwidget/slider/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/otherwidget/slider/","section":"otherwidget","summary":"","tags":null,"title":"","type":"otherwidget"},{"authors":null,"categories":null,"content":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"1c2b5a11257c768c90d5050637d77d6a","permalink":"/courses/example/example2/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/example2/","section":"courses","summary":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus.","tags":null,"title":"Example Page 2","type":"docs"},{"authors":null,"categories":null,"content":"The Best Way to Create the Website You Want from Markdown (or Jupyter/RStudio)\nBuild Anything with Widgets\nStar","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"3fc1086e958a3b6345e5421155a3dc2b","permalink":"/otherwidget/hero/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/otherwidget/hero/","section":"otherwidget","summary":"The Best Way to Create the Website You Want from Markdown (or Jupyter/RStudio)\nBuild Anything with Widgets","tags":null,"title":"Academic","type":"otherwidget"},{"authors":null,"categories":null,"content":"Welcome to the personal demo of Academic. Other demos available include:\n Project Demo (Academic\u0026rsquo;s actual site)  Over 100,000 Amazing Websites have Already Been Built with Academic\nJoin the Most Empowered Hugo Community\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"b2709c6e135037193d5727fe081b49cd","permalink":"/otherwidget/demo/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/otherwidget/demo/","section":"otherwidget","summary":"Welcome to the personal demo of Academic. Other demos available include:\n Project Demo (Academic\u0026rsquo;s actual site)  Over 100,000 Amazing Websites have Already Been Built with Academic\nJoin the Most Empowered Hugo Community","tags":null,"title":"Demos","type":"otherwidget"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"bc321ccc78785885663eb0ed2123c64d","permalink":"/otherwidget/experience/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/otherwidget/experience/","section":"otherwidget","summary":"","tags":null,"title":"Experience","type":"otherwidget"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"b99cbca54c54a1f851f071bca8eba872","permalink":"/otherwidget/accomplishments/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/otherwidget/accomplishments/","section":"otherwidget","summary":"","tags":null,"title":"Accomplish\u0026shy;ments","type":"otherwidget"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"7a21b9b9915250c606bd61782b7aa625","permalink":"/otherwidget/projects/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/otherwidget/projects/","section":"otherwidget","summary":"","tags":null,"title":"Projects","type":"otherwidget"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"6bc0c243e1360ad945b9166f1ea34982","permalink":"/otherwidget/people/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/otherwidget/people/","section":"otherwidget","summary":"","tags":null,"title":"Meet the Team","type":"otherwidget"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"56245bb4c404c172544b5520d2574da1","permalink":"/otherwidget/talks/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/otherwidget/talks/","section":"otherwidget","summary":"","tags":null,"title":"Recent \u0026 Upcoming Talks","type":"otherwidget"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"492a09416611b9821aa9e009348f0a01","permalink":"/otherwidget/featured/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/otherwidget/featured/","section":"otherwidget","summary":"","tags":null,"title":"Featured Publications","type":"otherwidget"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"47eafb159948bec8cbc2f85c7850c10d","permalink":"/otherwidget/tags/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/otherwidget/tags/","section":"otherwidget","summary":"","tags":null,"title":"Popular Topics","type":"otherwidget"},{"authors":[],"categories":null,"content":"Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"/talk/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":[],"categories":["NLP","Python","R"],"content":"\r\rAside from their political differences, Donald Trump and Barack Obama have very contrasting personalities, traits and characters. Obama is known to be a great communicator and an articulate speaker whose speeches are used in English classes to show how one should speak proper English. On the other hand, Trump is not the most eloquent English speaker or US president in history. Every now and then, you can find a clip on the web where Donald Trump is being mocked for the way he speaks or mispronounces words. This is so obvious that even non-native English speakers can notice how Trump’s speeches are very simple and inarticulate. Of course, this was not a bad thing for Trump at all. Actually, almost every political analyst that you see on the news talks about the fact that a vast majority of Trump’s fervent supporters are not college-educated Americans. It might be the case that he knows how to speak to his audience and his base supporters using their language (Although it is more likely that he cannot speak better English better than this level).\nThis post will investigate how difficult it is to understand what each US politicians talked about in the 2020 US Election cycle. I will use several readability metrics that can help us compute text comprehensibility. A wide range of these measures are implemented in the {textstat} python package, and it is super easy to calculate them using this package.\nI compiled a list of US Election-related speeches from rev.com and turned them into an R package called {us2020election}. I use this package as my data source for my analysis. Like some of my other posts, I use Python to perform the analysis and R to visualize my results. Now let’s get started by importing the necessary packages.\nlibrary(tidyverse)\rlibrary(reticulate)\rlibrary(ggthemes)\rlibrary(us2020election)\rlibrary(ggridges)\rtheme_set(theme_tufte())\rtheme_update(legend.position = \u0026#39;none\u0026#39;,\rpanel.background = element_rect(fill = \u0026#39;#FDF6E3\u0026#39;))\rimport numpy as np\rimport pandas as pd import textstat\rThere are several readability measures for English text included in {textstat}. Calculating these measures is very straightforward and easy. I will explain what each metric represents in more details.\nus_election_speeches = r.us_election_speeches\rus_election_speeches[\u0026#39;Flesch_Reading_Ease_formula\u0026#39;] = us_election_speeches[\u0026#39;text\u0026#39;].apply(lambda x: textstat.flesch_reading_ease(x))\rus_election_speeches[\u0026#39;gunning_fog\u0026#39;] = us_election_speeches[\u0026#39;text\u0026#39;].apply(lambda x: textstat.gunning_fog(x))\rus_election_speeches[\u0026#39;smog_index\u0026#39;] = us_election_speeches[\u0026#39;text\u0026#39;].apply(lambda x: textstat.smog_index(x))\rus_election_speeches[\u0026#39;automated_readability_index\u0026#39;] = us_election_speeches[\u0026#39;text\u0026#39;].apply(lambda x: textstat.automated_readability_index(x))\rus_election_speeches[\u0026#39;coleman_liau_index\u0026#39;] = us_election_speeches[\u0026#39;text\u0026#39;].apply(lambda x: textstat.coleman_liau_index(x))\rus_election_speeches[\u0026#39;linsear_write_formula\u0026#39;] = us_election_speeches[\u0026#39;text\u0026#39;].apply(lambda x: textstat.linsear_write_formula(x))\rus_election_speeches[\u0026#39;dale_chall_readability_score\u0026#39;] = us_election_speeches[\u0026#39;text\u0026#39;].apply(lambda x: textstat.dale_chall_readability_score(x))\rus_election_speeches[\u0026#39;text_standard\u0026#39;] = us_election_speeches[\u0026#39;text\u0026#39;].apply(lambda x: textstat.text_standard(x))\rus_election_speeches[\u0026#39;text_standard_float\u0026#39;] = us_election_speeches[\u0026#39;text\u0026#39;].apply(lambda x: textstat.text_standard(x,float_output = True))\rLet’s look at the resulting dataframe.\nus_election_speeches \u0026lt;- py$us_election_speeches us_election_speeches %\u0026gt;% glimpse()\r## Rows: 286\r## Columns: 15\r## $ speaker \u0026lt;chr\u0026gt; \u0026quot;Barack Obama\u0026quot;, \u0026quot;Mike Pence\u0026quot;, \u0026quot;Kamala ...\r## $ title \u0026lt;chr\u0026gt; \u0026quot;Barack Obama Campaign Roundtable Even...\r## $ text \u0026lt;chr\u0026gt; \u0026quot;Barack Obama: (00:01)\\n… or the ’40s ...\r## $ date \u0026lt;chr\u0026gt; \u0026quot;Oct 21, 2020\u0026quot;, \u0026quot;Oct 21, 2020\u0026quot;, \u0026quot;Oct 2...\r## $ location \u0026lt;chr\u0026gt; \u0026quot;Philadelphia, Pennsylvania\u0026quot;, \u0026quot;Portsmo...\r## $ type \u0026lt;chr\u0026gt; \u0026quot;Roundtable\u0026quot;, \u0026quot;Campaign Speech\u0026quot;, \u0026quot;Camp...\r## $ Flesch_Reading_Ease_formula \u0026lt;dbl\u0026gt; 78.38, 67.99, 65.35, 85.99, 71.04, 81....\r## $ gunning_fog \u0026lt;dbl\u0026gt; 8.80, 9.32, 10.80, 5.37, 8.30, 7.31, 5...\r## $ smog_index \u0026lt;dbl\u0026gt; 9.8, 11.5, 11.6, 8.1, 10.4, 8.7, 8.2, ...\r## $ automated_readability_index \u0026lt;dbl\u0026gt; 9.0, 10.8, 11.5, 5.3, 8.8, 6.9, 5.5, 5...\r## $ coleman_liau_index \u0026lt;dbl\u0026gt; 7.95, 9.11, 8.71, 6.48, 8.12, 6.90, 6....\r## $ linsear_write_formula \u0026lt;dbl\u0026gt; 5.375000, 5.333333, 11.666667, 15.0000...\r## $ dale_chall_readability_score \u0026lt;dbl\u0026gt; 5.77, 5.75, 6.27, 5.18, 5.65, 5.66, 5....\r## $ text_standard \u0026lt;chr\u0026gt; \u0026quot;8th and 9th grade\u0026quot;, \u0026quot;8th and 9th grad...\r## $ text_standard_float \u0026lt;dbl\u0026gt; 9, 9, 12, 6, 8, 6, 6, 5, 11, 6, 5, 7, ...\rNow I am going to visualize the changes in the distribution of speech complexity for each politician. To make things more, I will select a list of politicians that I’d like to analyze in this post.\nspeakers \u0026lt;- c(\u0026#39;Barack Obama\u0026#39;,\u0026#39;Pete Buttigieg\u0026#39;,\u0026#39;Mike Pence\u0026#39;,\u0026#39;Elizabeth Warren\u0026#39;,\u0026#39;Bernie Sanders\u0026#39;,\u0026#39;Donald Trump\u0026#39;,\u0026#39;Kamala Harris\u0026#39;,\u0026#39;Joe Biden\u0026#39;,\u0026#39;Mike Bloomberg\u0026#39;)\rcustom_palette \u0026lt;-c(\r\u0026#39;Mike Bloomberg\u0026#39; = \u0026#39;#4E79A7\u0026#39;,\r\u0026#39;Amy Klobuchar\u0026#39; = \u0026#39;#4E79A7\u0026#39;,\r\u0026#39;Joe Biden\u0026#39; = \u0026#39;#4E79A7\u0026#39;,\r\u0026#39;Pete Buttigieg\u0026#39; = \u0026#39;#4E79A7\u0026#39;,\r\u0026#39;Elizabeth Warren\u0026#39; = \u0026#39;#4E79A7\u0026#39;,\r\u0026#39;Barack Obama\u0026#39; = \u0026#39;#4E79A7\u0026#39;,\r\u0026#39;Bernie Sanders\u0026#39; = \u0026#39;#4E79A7\u0026#39;,\r\u0026#39;Kamala Harris\u0026#39; = \u0026#39;#4E79A7\u0026#39;,\r\u0026#39;Donald Trump\u0026#39; = \u0026#39;#E15759\u0026#39; ,\r\u0026#39;Mike Pence\u0026#39; = \u0026#39;#E15759\u0026#39; )\rAlso, I created a function to make ridge plots for each metric easier.\ncreate_plot \u0026lt;- function(metric = Flesch_Reading_Ease_formula,title) {\rmetrics \u0026lt;- rlang::enquo(metric)\rus_election_speeches %\u0026gt;%\rseparate_rows(speaker, sep = \u0026#39;,\u0026#39;) %\u0026gt;%\rfilter(speaker %in% speakers, type != \u0026#39;Debate\u0026#39;) %\u0026gt;%\radd_count(speaker) %\u0026gt;%\rggplot() +\rgeom_density_ridges(aes(\rx = !!metrics ,\ry = speaker,\rfill = speaker\r)) +\rlabs(x = \u0026#39;\u0026#39;, y = \u0026#39;\u0026#39;,title = title) +\rscale_fill_manual(values = custom_palette) +\rtheme(legend.position = \u0026#39;none\u0026#39;,\rtext = element_text(family = \u0026#39;Overpass\u0026#39;),\rpanel.background = element_rect(fill = \u0026#39;#FDF6E3\u0026#39;),\rplot.background = element_rect(fill = \u0026#39;#FDF6E3\u0026#39;))\r}\rNow, let’s look at several readability measure in more depth.\nFlesch Reading Ease scores\rThe first readability score that I will look at is based on the Flesch Reading Ease formula. It computes the number of syllables to determine how easy a piece of text is. The maximum value of Flesch Reading Ease is 122, and there is no minimum value for it. Higher Flesch Reading Ease scores indicate that the text (speech) is easier to understand by the audience. In our case, it would show how sophisticated each politician is in terms of language use. You can find more about this metric on Wikipedia!\ncreate_plot(title = \u0026#39;Flesch Reading Ease scores\u0026#39;)\rwe can interpret the scores using the following table:\n\r\r\r\rScore\rSchool level\rNotes\r\r\r\r100.00–90.00\r5th grade\rVery easy to read. Easily understood by an average 11-year-old student.\r\r90.0–80.0\r6th grade\rEasy to read. Conversational English for consumers.\r\r80.0–70.0\r7th grade\rFairly easy to read.\r\r70.0–60.0\r8th \u0026amp; 9th grade\rPlain English. Easily understood by 13- to 15-year-old students.\r\r60.0–50.0\r10th to 12th grade\rFairly difficult to read.\r\r50.0–30.0\rCollege\rDifficult to read.\r\r30.0–10.0\rCollege graduate\rVery difficult to read. Best understood by university graduates.\r\r10.0–0.0\rProfessional\rExtremely difficult to read. Best understood by university graduates.\r\r\r\r\rGunning fog index\rThe Gunning fog index is another metric to measure the complexity of a text document. It shows how many years of education one might need to understand a piece of text. Larger values of Gunning fog index correspond to more difficult writings.\ncreate_plot(gunning_fog,title = \u0026#39;Gunning fog index\u0026#39; )\r\rThe SMOG index\rThe SMOG index computes the ratio of polysyllables (words with three or more syllables) in sentences to determine text complexity.\ncreate_plot(smog_index,title = \u0026#39;The SMOG index\u0026#39;)\r\rLinsear Write Formula\rLike previous the metric, the Linsear Write Formula uses words with three or more syllables to compute text readability. It also relies on the sentence length to measure how difficult reading a text could be.\ncreate_plot(linsear_write_formula,title = \u0026#39;Linsear Write Formula\u0026#39;)\r\rDale-Chall Readability Score\rThis metric is different from the other metrics that we have talked about. It uses a dictionary of 3000 words that are easy to read and understand for a fourth-grade student. So, Words that are not in this dictionary are considered to be complex.\nThe higher this Dale-Chall Score gets, the more a text becomes to read and understand.\ncreate_plot(dale_chall_readability_score,title = \u0026#39;Dale-Chall Readability Score\u0026#39;)\r### A unified readability\rWe introduced several readability metrics, but each one of them might give us a slightly different result. There is a way in textstats to combine all these metrics and have a single readability metric.\nus_election_speeches %\u0026gt;%\rfilter(speaker %in% speakers) %\u0026gt;%\rmutate(text_standard = factor(\rtext_standard,\rlevels = c(\r\u0026#39;4th and 5th grade\u0026#39;,\r\u0026#39;5th and 6th grade\u0026#39;,\r\u0026#39;6th and 7th grade\u0026#39;,\r\u0026#39;7th and 8th grade\u0026#39;,\r\u0026#39;8th and 9th grade\u0026#39;,\r\u0026#39;9th and 10th grade\u0026#39;,\r\u0026#39;10th and 11th grade\u0026#39;,\r\u0026#39;11th and 12th grade\u0026#39;,\r\u0026#39;12th and 13th grade\u0026#39;,\r\u0026#39;14th and 15th grade\u0026#39;\r)\r)) %\u0026gt;%\rcount(speaker, text_standard) %\u0026gt;%\rmutate(n = n + 1) %\u0026gt;%\rggplot() +\rgeom_col(aes(x = text_standard , y = n, fill = speaker)) +\rlabs(x = \u0026#39;\u0026#39;, y = \u0026#39;\u0026#39;) +\rscale_fill_manual(values = custom_palette) +\rscale_y_log10() +\rfacet_wrap(~ speaker, ncol = 1) \rWe can also convert this readability metric to numbers to visualize and compare it to other metrics.\ncreate_plot(text_standard_float,title = \u0026#39;Final Score\u0026#39;)\r\rConclusion\rWe can consistently see that Trump speeches are less sophisticated and less complex than the speeches given by the rest of politicians. We can attribute this to his lack of sophistication in terms of language, the fact that he knows how can speak to his audience or both. Also, we can notice that Mike Pence and Barack Obama seem to use a more an advanced language in their speeches.\n\r\r\r","date":1603065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1603110387,"objectID":"6036f7174c51f6c5261afc7e33728718","permalink":"/post/2020-10-19-readability-of-trump-and-biden-speeches/","publishdate":"2020-10-19T00:00:00Z","relpermalink":"/post/2020-10-19-readability-of-trump-and-biden-speeches/","section":"post","summary":"Aside from their political differences, Donald Trump and Barack Obama have very contrasting personalities, traits and characters. Obama is known to be a great communicator and an articulate speaker whose speeches are used in English classes to show how one should speak proper English. On the other hand, Trump is not the most eloquent English speaker or US president in history. Every now and then, you can find a clip on the web where Donald Trump is being mocked for the way he speaks or mispronounces words.","tags":["NLP","Python","R","Visualization"],"title":"How Easy Is It to Understand What Donald Trump Says?","type":"post"},{"authors":[],"categories":["Python"],"content":"\r\rTextures\r \nTextures (Text Features) is a python library that allows you to extract useful statistics and features from text data, find common patterns from text input and clean your text data without searching for regular expressions on the Web. This library is heavily inspired by the awesome textfeatures R package developed by Michael W. Kearney\n\rpalmerpenguins\rThe Palmer penguins dataset by Allison Horst, Alison Hill, and Kristen Gorman was first made publicly available as an R package. The goal of the Palmer Penguins dataset is to replace the highly overused Iris dataset for data exploration \u0026amp; visualization.\rUsing this python package you can easily load the Palmer penguins into your python environment.\nArtwork by @allison_horst\n\r","date":1603065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1603059178,"objectID":"dcad9ff75f5cf28838a910a8acc528dc","permalink":"/project/2020-10-19-python-packages/","publishdate":"2020-10-19T00:00:00Z","relpermalink":"/project/2020-10-19-python-packages/","section":"project","summary":"Textures\r \nTextures (Text Features) is a python library that allows you to extract useful statistics and features from text data, find common patterns from text input and clean your text data without searching for regular expressions on the Web. This library is heavily inspired by the awesome textfeatures R package developed by Michael W. Kearney\n\rpalmerpenguins\rThe Palmer penguins dataset by Allison Horst, Alison Hill, and Kristen Gorman was first made publicly available as an R package.","tags":["PythonPackages"],"title":"Python Packages","type":"project"},{"authors":[],"categories":["R"],"content":"\r\rDelgosha\r\rDelgosha is an opinionated package which aims to provide a collection of\rggplot2 themes for RTL languages (mostly Persian).\nimg\n\r1https://github.com/mcnakhaee/delgosha/blob/master/README_files/figure-gfm/unnamed-chunk-3-1.pnghttps://github.com/mcnakhaee/delgosha/blob/master/README_files/figure-gfm/unnamed-chunk-3-1.png)[]\n\r### Dadegan\rDadegan is a simple package which contains a handful of useful Persian datasets.\n\r","date":1603065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1603060411,"objectID":"33de93d87a42b930da02284ff55d4296","permalink":"/project/2020-10-19-r-packages/","publishdate":"2020-10-19T00:00:00Z","relpermalink":"/project/2020-10-19-r-packages/","section":"project","summary":"\r\rDelgosha\r\rDelgosha is an opinionated package which aims to provide a collection of\rggplot2 themes for RTL languages (mostly Persian).\nimg\n\r1https://github.com/mcnakhaee/delgosha/blob/master/README_files/figure-gfm/unnamed-chunk-3-1.pnghttps://github.com/mcnakhaee/delgosha/blob/master/README_files/figure-gfm/unnamed-chunk-3-1.png)[]\n\r### Dadegan\rDadegan is a simple package which contains a handful of useful Persian datasets.\n\r","tags":["R"],"title":"R Packages","type":"project"},{"authors":[],"categories":["NLP","R"],"content":"\r\rMany people watched the first Presidential Debate between Biden and Trump and thought that this debate was chaotic, full of vulgar language, interruptions, and in a word, really ugly! Some people even consider this debate as the worst debate in the modern history of US Presidential Elections! Four years ago, Trump was also a presidential candidate and ran against Hillary Clinton. The Presidential Debates in 2016 were not exceptionally friendly or civilized. So, the question is what made the 2020 first debate unique and chaotic in many people’s minds. In this blog post, I will investigate this question and compare the 2020 and 2016 Presidential debates and the Vice Presidential debates.\nlibrary(tidyverse) # metapackage of all tidyverse packages\rlibrary(lubridate)\rlibrary(readxl)\rlibrary(ggthemes)\rlibrary(showtext)\rlibrary(plotly)\rfont_add_google(\u0026quot;Lobster\u0026quot;, \u0026quot;Lobster\u0026quot;)\rfont_add_google(\u0026quot;Overpass\u0026quot;, \u0026quot;Overpass\u0026quot;)\roptions(repr.plot.width=20, repr.plot.height=15)\rbiden_col \u0026lt;- \u0026#39;#118ab2\u0026#39;\rtrump_col \u0026lt;- \u0026#39;#ef476f\u0026#39;\rwallace_col \u0026lt;- \u0026#39;#ffd166\u0026#39;\rcross_talk_col \u0026lt;- \u0026#39;#06d6a0\u0026#39;\rmoderator \u0026lt;- \u0026#39;#ffd166\u0026#39;\raudience \u0026lt;- \u0026#39;#e36414\u0026#39;\rclinton_col \u0026lt;- \u0026#39;#118ab2\u0026#39;\rtext_col \u0026lt;- \u0026#39;gray80\u0026#39;\rtheme_set(theme_void())\rtheme_update( legend.position = \u0026#39;top\u0026#39;,\rlegend.text = element_text(\rsize = 20,\rfamily = \u0026#39;Lobster\u0026#39;,\rcolor = text_col\r),\rtext = element_text(family = \u0026#39;Lobster\u0026#39;, color = text_col),\rplot.title = element_text(\rsize = 40,\rmargin = margin(b = 40, t = 50, l = 50),\rhjust = 0.5,\rfamily = \u0026#39;Lobster\u0026#39;,\rcolor = text_col\r),\rplot.caption = element_text(\rsize = 20,\r,\rmargin = margin(b = 50, t = 50),\rfamily = \u0026#39;Lobster\u0026#39;,\rcolor = text_col\r),\rplot.background = element_rect(fill = \u0026#39;gray14\u0026#39;),\rpanel.background = element_rect(fill = \u0026#39;gray14\u0026#39;)\r)\rBiden and Trump’s first debate\rLet us look at the first debate between Trump and Biden and how much each candidate used to speak uninterrupted by the other candidate or the moderator. I used this dataset which is available on Kaggle to computed how many seconds Trump and Biden talked without being cut off by the other candidate.\npresidential_debate_2020 \u0026lt;- read_delim(\u0026#39;presidential_debate_2020.csv\u0026#39;,\rdelim = \u0026#39;\\t\u0026#39;,\rcol_types = list(col_character(),\rcol_character(),\rcol_character(),\rcol_character(),\rcol_integer(),\rcol_integer(),\rcol_double(),\rcol_integer()))\rpresidential_debate_2020 \u0026lt;- presidential_debate_2020 %\u0026gt;% mutate(minutes = if_else(nchar(time)\u0026lt;6,paste(\u0026#39;00:\u0026#39;,time,sep = \u0026#39;\u0026#39;),time),\rminutes = paste(\u0026#39;2020-09-29\u0026#39;,minutes,sep = \u0026#39;\u0026#39;),\rminutes = lubridate::ymd_hms(minutes),\rspeaker = if_else(str_detect(speaker , \u0026#39;Chris Wallace\u0026#39;),\u0026#39;Chris Wallace (Moderator)\u0026#39;,speaker),\r) %\u0026gt;% mutate(minute_start = lag(minutes,n= 1),\rduration =minutes - minute_start,\rduration = lead(duration,n =1),\rseconds_in_end = lead(seconds_in),\rtext = str_wrap(text,width =30))\rpresidential_debate_2020[1,5] \u0026lt;- 0\rglimpse(presidential_debate_2020)\r## Rows: 788\r## Columns: 12\r## $ speaker \u0026lt;chr\u0026gt; \u0026quot;Chris Wallace (Moderator)\u0026quot;, \u0026quot;Chris Wallace (Moderat...\r## $ text \u0026lt;chr\u0026gt; \u0026quot;Good evening from the Health\\nEducation Campus of C...\r## $ url \u0026lt;chr\u0026gt; \u0026quot;https://www.rev.com/transcript-editor/shared/C-8bDp...\r## $ time \u0026lt;chr\u0026gt; \u0026quot;1:20\u0026quot;, \u0026quot;2:10\u0026quot;, \u0026quot;2:49\u0026quot;, \u0026quot;2:51\u0026quot;, \u0026quot;2:51\u0026quot;, \u0026quot;3:11\u0026quot;, \u0026quot;4:0...\r## $ seconds_in \u0026lt;int\u0026gt; 0, 130, 169, 171, 171, 191, 241, 293, 322, 329, 334,...\r## $ seconds_spoken \u0026lt;int\u0026gt; 50, 39, 2, 0, 20, 50, 52, 29, 7, 5, 2, 36, 56, 26, 2...\r## $ words_per_min \u0026lt;dbl\u0026gt; 148.8000, 156.9231, 120.0000, NA, NA, 159.6000, 180....\r## $ num_words \u0026lt;int\u0026gt; 124, 102, 4, 4, 2, 133, 156, 98, 15, 16, 3, 117, 157...\r## $ minutes \u0026lt;dttm\u0026gt; 2020-09-29 00:01:20, 2020-09-29 00:02:10, 2020-09-2...\r## $ minute_start \u0026lt;dttm\u0026gt; NA, 2020-09-29 00:01:20, 2020-09-29 00:02:10, 2020-...\r## $ duration \u0026lt;drtn\u0026gt; 50 secs, 39 secs, 2 secs, 0 secs, 20 secs, 50 secs,...\r## $ seconds_in_end \u0026lt;int\u0026gt; 130, 169, 171, 171, 191, 241, 293, 322, 329, 334, 33...\rpresidential_debate_2020 %\u0026gt;%\rggplot(aes(\rx = seconds_in,\ry = 1,\rxend = seconds_in_end,\ryend = 1,\rcolor = speaker\r)) +\rgeom_segment(size = 40, alpha = 0.7) +\rguides(color = guide_legend(override.aes = list(size = 25))) +\rscale_color_manual(values = c(wallace_col, trump_col, biden_col)) +\rscale_y_continuous(limits = c(0.85, 1.13)) +\rlabs(\rx = \u0026#39;\u0026#39;,\ry = \u0026#39;\u0026#39;,\rtitle = \u0026#39;How Did The First US Presidential Debate Go?\u0026#39;,\r#subtitle = \u0026#39;This plot illustrates how much time each presidential candidate spoke \u0026#39;,\rfill = \u0026#39;\u0026#39;,\rcolor = \u0026#39;\u0026#39; ) \r\rClinton vs. Trump\rThis plot clearly shows that there were many interruptions during the first debate! It also shows that it was Trump who interrupted most in the debate. To give it more context, let us compare it to the 2016 Debates between Trump and Clinton. The transcripts of these debates are available in this dataset that I found on Kaggle. However, this dataset does not include information about how many seconds or minutes each candidate spent speaking in the debates. So, I decided to use the number of words each candidate spoke to measure continuity in their speeches.\ndebate_2016 \u0026lt;- read_csv(\u0026#39;presidential_debate_2016.csv\u0026#39;)\rdebate_2016 \u0026lt;-debate_2016 %\u0026gt;% mutate(Text = as.character(Text),\rnum_chars = str_length(Text),\rnum_word = str_count(Text),\rSpeaker = case_when(Speaker == \u0026#39;CANDIDATES\u0026#39;~\u0026#39;Crosstalk\u0026#39;,\rSpeaker == \u0026#39;QUESTION\u0026#39;~\u0026#39;Question\u0026#39;,\rSpeaker %in% c(\u0026#39;Cooper\u0026#39;, \u0026#39;Holt\u0026#39;,\u0026#39;Wallace\u0026#39;,\u0026#39;Raddatz\u0026#39;,\u0026#39;Quijano\u0026#39;) ~\u0026#39;Moderator\u0026#39;,\rTRUE ~ Speaker))\rpresidential_debate_2016 \u0026lt;- debate_2016 %\u0026gt;% filter(!Speaker %in% c(\u0026#39;Kaine\u0026#39;,\u0026#39;Pence\u0026#39;),\rDate != \u0026#39;10/4/16\u0026#39;)\rfirst_debate \u0026lt;- presidential_debate_2016%\u0026gt;% filter(Date == \u0026#39;9/26/16\u0026#39;)\rsecond_debate \u0026lt;- presidential_debate_2016 %\u0026gt;% filter(Date == \u0026#39;10/9/16\u0026#39;)\rthird_debate \u0026lt;- presidential_debate_2016 %\u0026gt;% filter(Date == \u0026#39;10/19/2016\u0026#39;)\rglimpse(presidential_debate_2016)\r## Rows: 1,028\r## Columns: 6\r## $ Line \u0026lt;dbl\u0026gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17...\r## $ Speaker \u0026lt;chr\u0026gt; \u0026quot;Moderator\u0026quot;, \u0026quot;Audience\u0026quot;, \u0026quot;Clinton\u0026quot;, \u0026quot;Audience\u0026quot;, \u0026quot;Moderato...\r## $ Text \u0026lt;chr\u0026gt; \u0026quot;Good evening from Hofstra University in Hempstead, New Y...\r## $ Date \u0026lt;chr\u0026gt; \u0026quot;9/26/16\u0026quot;, \u0026quot;9/26/16\u0026quot;, \u0026quot;9/26/16\u0026quot;, \u0026quot;9/26/16\u0026quot;, \u0026quot;9/26/16\u0026quot;, \u0026quot;9...\r## $ num_chars \u0026lt;int\u0026gt; 1257, 10, 20, 10, 17, 10, 1115, 820, 1018, 171, 1570, 515...\r## $ num_word \u0026lt;int\u0026gt; 1257, 10, 20, 10, 17, 10, 1115, 820, 1018, 171, 1570, 515...\rfirst_debate\u0026lt;- first_debate %\u0026gt;% mutate(cumsum_nwords = cumsum(num_word),\rcum_sum_lag = lag(cumsum_nwords),\rdebate = \u0026#39;First Debate\u0026#39;)\rfirst_debate[1,7] \u0026lt;- 0\rsecond_debate\u0026lt;- second_debate %\u0026gt;% mutate(cumsum_nwords = cumsum(num_word),\rcum_sum_lag = lag(cumsum_nwords),\rdebate = \u0026#39;Second Debate\u0026#39;)\rsecond_debate[1,7] \u0026lt;- 0\rthird_debate\u0026lt;- third_debate %\u0026gt;% mutate(cumsum_nwords = cumsum(num_word),\rcum_sum_lag = lag(cumsum_nwords),\rdebate = \u0026#39;Third Debate\u0026#39;)\rthird_debate[1,7] \u0026lt;- 0\rpresidential_debates_2016 \u0026lt;- bind_rows(first_debate,second_debate ,third_debate)\rpresidential_debates_2016 %\u0026gt;%\rggplot(aes(\rx = cum_sum_lag,\ry = 1,\rxend = cumsum_nwords,\ryend = 1,\rcolor = Speaker\r)) +\rgeom_segment(size = 40, alpha = 0.7) +\rguides(color = guide_legend(override.aes = list(size = 18))) +\rscale_color_manual(values = c(\u0026#39;Moderator\u0026#39; = moderator ,\u0026#39;Trump\u0026#39; = trump_col ,\r\u0026#39;Clinton\u0026#39; = clinton_col ,\r\u0026#39;Crosstalk\u0026#39; =\u0026#39;#9d4edd\u0026#39;,\r\u0026#39;Audience\u0026#39; = audience ,\r\u0026#39;Question\u0026#39; = \u0026#39;#e85d04\u0026#39;)) +\rscale_y_continuous(limits = c(0.85, 1.13)) +\rlabs(\rx = \u0026#39;\u0026#39;,\ry = \u0026#39;\u0026#39;,\rtitle = \u0026#39;How Did 2016 US Presidential Debates Go?\u0026#39;,\rfill = \u0026#39;\u0026#39;,\rcolor = \u0026#39;\u0026#39;,\rcaption = ) +\rfacet_wrap(~debate,nrow = 3) +\rtheme(strip.text = element_text(size = 15))\rWell, the debates between Trump and Clinton were also wild, but they were less anarchic than the debate between Biden and Trump. For, there were fewer disruptions in those debates compared to what we saw in the 2020 plot.\n\rVice Presidential debates\rNow let’s look at the debates between the Vice Presidential candidates. Usually, these debates are more civilized and less heated as they attract less attention.\nHarris vs. Pence\rI found a dataset of the 2020 VP debate on Kaggle. Again, here I used the same approach that I used for the 2016 debate.\nvice_presidential_debate_2020 \u0026lt;- read_csv(\u0026#39;vice_presidential_debate_2020.csv\u0026#39;)\rvice_presidential_debate_2020 \u0026lt;- vice_presidential_debate_2020 %\u0026gt;%\rmutate(num_chars = str_length(text ),\rcumsum_nwords = cumsum(num_chars),\rcum_sum_lag = lag(cumsum_nwords))\rvice_presidential_debate_2020[1,6] \u0026lt;- 0\rvice_presidential_debate_2020 %\u0026gt;%\rggplot(aes(\rx = cum_sum_lag,\ry = 1,\rxend = cumsum_nwords,\ryend = 1,\rcolor = speaker )) +\rgeom_segment(size = 40, alpha = 0.7) +\rguides(color = guide_legend(override.aes = list(size = 18))) +\rscale_color_manual(values = c(\u0026quot;Susan Page\u0026quot; = moderator ,\u0026#39;Mike Pence\u0026#39; = trump_col ,\r\u0026#39;Kamala Harris\u0026#39; = clinton_col )) +\rscale_y_continuous(limits = c(0.85, 1.13)) +\rlabs(\rx = \u0026#39;\u0026#39;,\ry = \u0026#39;\u0026#39;,\rtitle = \u0026#39;How Did 2020 US Vice-Presidential Debates Go?\u0026#39;,\rfill = \u0026#39;\u0026#39;,\rcolor = \u0026#39;\u0026#39;,\rcaption = )\r\r2016 Vice Presidential debate\rvp_debates \u0026lt;- debate_2016 %\u0026gt;% filter(Date == \u0026#39;10/4/16\u0026#39;) %\u0026gt;% mutate(cumsum_nwords = cumsum(num_word),\rcum_sum_lag = lag(cumsum_nwords)) vp_debates[1,5] \u0026lt;- 0\rvp_debates %\u0026gt;%\rggplot(aes(\rx = cum_sum_lag,\ry = 1,\rxend = cumsum_nwords,\ryend = 1,\rcolor = Speaker )) +\rgeom_segment(size = 40, alpha = 0.7) +\rguides(color = guide_legend(override.aes = list(size = 18))) +\rscale_color_manual(values = c(\u0026#39;Moderator\u0026#39; = moderator ,\u0026#39;Pence\u0026#39; = trump_col ,\r\u0026#39;Kaine\u0026#39; = clinton_col ,\r\u0026#39;Crosstalk\u0026#39; =\u0026#39;#9d4edd\u0026#39;,\r\u0026#39;Audience\u0026#39; = audience )) +\rscale_y_continuous(limits = c(0.85, 1.13)) +\rlabs(\rx = \u0026#39;\u0026#39;,\ry = \u0026#39;\u0026#39;,\rtitle = \u0026#39;How Did 2016 US Vice-Presidential Debates Go?\u0026#39;,\rfill = \u0026#39;\u0026#39;,\rcolor = \u0026#39;\u0026#39;,\rcaption = )\rWell, we can see that Pence and Kaine cut each other off many times during the VP debate. However, we can also observe that they could speak uninterrupted on some occasions.\n\r\r","date":1602720000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602755917,"objectID":"8486c70057799e1224869d8f0bff52f9","permalink":"/post/2020-10-15-which-presidential-debate-was-more-chaotic/","publishdate":"2020-10-15T00:00:00Z","relpermalink":"/post/2020-10-15-which-presidential-debate-was-more-chaotic/","section":"post","summary":"Many people watched the first Presidential Debate between Biden and Trump and thought that this debate was chaotic, full of vulgar language, interruptions, and in a word, really ugly! Some people even consider this debate as the worst debate in the modern history of US Presidential Elections! Four years ago, Trump was also a presidential candidate and ran against Hillary Clinton. The Presidential Debates in 2016 were not exceptionally friendly or civilized.","tags":["NLP","R","Visualization"],"title":"Which Presidential Debate Was More Chaotic?","type":"post"},{"authors":[],"categories":["XAI"],"content":"\r\r\rIntroduction\rWhat Kinds of explanation does CIU generate?\rHow does CIU work?\rA toy example: predicting breast\r\rPermutation feature importance\rDecision Tree Classifier\rRandom Forest Classifier\rGradient Boosting Classifier\rExplaining a single observation\rGenerating Textual Explanations\rDrawbacks\r\r\r\rIntroduction\rExplainability is a hot topic in the machine learning research community these days. Over the past few years, many methods have been introduced to understand how a machine learning model makes a prediction. However, explainability is not an entirely new concept, and it was actually started a few decades ago. In this blog post, I will introduce a rather unknown but simple technique that was introduced almost 20 years ago. This technique is called Contextual Importance and Utility (CIU) for explaining ML models and show you how we can explain any types of machine learning. This method relies on the notion of context is important.\nFor example, imagine we are trying to predict house prices from a set of features such as the number of bedrooms and pools. If every house in the dataset has no pool (the current context), then the feature corresponding to it has no usefulness and no importance for predicting a model. On the other hand, in a city where most houses have one or two bedrooms (again the current context), houses with three or more bedrooms are more unusual.\n\rWhat Kinds of explanation does CIU generate?\rIt is a model-agnostic methods, and it can explain the output of any “black-box” machine learning model.\n\rIt produces local explanations, which means that the explanations are generated for individual instances (not the whole model), and they show which features are more important for an individual observation.\n\rIt gives us post-hoc explanations as it is a method that processes the output of a machine learning model after training.\n\r\rUnlike LIME and many other techniques, CIU does not approximate or transforms what a model predicts but instead directly explain predictions. It can also provide a contrastive explanation. For instance, why did the model predict rainy and not cloudy?\n\rHow does CIU work?\rCIT estimates two values that aim to explain the context in which a machine learning model predicts:\nContextual Importance (CI) measures how much change in the range and output values can be attributed to one (or several) input variables. CU is based on the notion that a variable which results in a broader ranger of output values would be more critical. Formally, CIU is defined as follows:\nCI = (Cmax - Cmin)/(absmax - absmin)\nContextual Utility (CU) indicates how favorable the current value of one (or several) input variables is for a high output value. CU is computed using the following formula:\nCU = (out - Cmin)/(Cmax - Cmin)\nCmax and Cmin are the highest and lowest values that the output of an ML model can take by changing the input feature(s). Obtaining Cmax and Cmin is computationally, and mathematically is not a trivial task. In the original paper, these values are computed using a Monte Carlo simulation, where a lot of observations were generated. Also, absmax and absmin indicate the absolute range of values that the output has taken. For example, In classification problems, the absolute minimum and maximum range of values are the predicted probabilities of machine learning models between 0 and 1.\nCIU is implemented both in python and R. For simplicity, I will use its python implementation (py-ciu library) in this blogpost.\nYou can install py-ciu using the pip command:\npip install py-ciu\r\rA toy example: predicting breast\rI will use the breast cancer dataset in scikit-learn to show how we can use CIU. I will train three different machine learning models, including a decision tree, a random forest, and a gradient boosting algorithm on this dataset and compute CI and CU values for a single instance from the test dataset.\nFirst, we need to load the necessary libraries and modules.\nfrom ciu import determine_ciu\rfrom sklearn.ensemble import GradientBoostingClassifier,RandomForestClassifier\rfrom sklearn.inspection import permutation_importance\rfrom sklearn.tree import DecisionTreeClassifier\rfrom sklearn.datasets import load_breast_cancer\rfrom sklearn.model_selection import train_test_split\rimport pandas as pd\rimport numpy as np\rimport matplotlib.pyplot as plt\r# for reproducability\rnp.random.seed(123)\rThen we split the dataset into a training and test set. We train our machine learning models on the training dataset and evaluate their performance on the test dataset. Note that for explaining ML models, we should use samples from the test dataset and not the training dataset.\nX = pd.DataFrame(load_breast_cancer()[\u0026#39;data\u0026#39;])\ry = load_breast_cancer()[\u0026#39;target\u0026#39;]\rX.columns = load_breast_cancer()[\u0026#39;feature_names\u0026#39;]\rX_train,X_test, y_train,y_test = train_test_split(X,y,stratify = y)\rdef fit_evaluate_model(clf):\rclf = clf.fit(X_train, y_train)\rprint(\u0026#39; Accuracy on test dataset {}\u0026#39;.format(clf.score(X_test,y_test)))\rreturn clf\rPermutation feature importance\rAs mentioned before, CIU only generates local explanations and does not give us a global overview of how a model makes a prediction. To gain a better understanding of the global importance of the model, we can compute the permutation feature importance scores:\ndef print_permutation_importance(model):\rimp_features = []\rpi = permutation_importance(model, X_test, y_test,\rn_repeats=30,\rrandom_state=0)\rfor i in pi.importances_mean.argsort()[::-1]:\rif pi.importances_mean[i] - 2 * pi.importances_std[i] \u0026gt; 0:\rprint(f\u0026quot;{X_test.columns[i]:\u0026lt;8} \u0026quot;\rf\u0026quot;{pi.importances_mean[i]:.3f} \u0026quot;\rf\u0026quot; +/- {pi.importances_std[i]:.3f}\u0026quot;)\rimp_features.append(pi.importances_mean[i])\rif len(imp_features) == 0:\rprint(\u0026#39;no important features\u0026#39;)\r\rDecision Tree Classifier\rSince we just used a toy example, I will not be very picky about my model’s hyper-parameters and leave them to be the default values in sklearn.\ndt = DecisionTreeClassifier()\rdt_fit = fit_evaluate_model(dt)\r## Accuracy on test dataset 0.9370629370629371\rprint_permutation_importance(dt_fit)\r## worst perimeter 0.173 +/- 0.019\r## worst concave points 0.145 +/- 0.023\r## worst concavity 0.135 +/- 0.017\r## worst area 0.063 +/- 0.014\r## radius error 0.036 +/- 0.014\r## worst smoothness 0.018 +/- 0.008\r## mean area 0.017 +/- 0.006\r\rRandom Forest Classifier\rrf = RandomForestClassifier(\r)\rrf_fit = fit_evaluate_model(rf)\r## Accuracy on test dataset 0.972027972027972\rprint_permutation_importance(rf_fit)\r## worst texture 0.023 +/- 0.004\r## mean texture 0.013 +/- 0.006\r## worst smoothness 0.010 +/- 0.004\r## mean concavity 0.010 +/- 0.005\r## worst fractal dimension 0.006 +/- 0.003\r\rGradient Boosting Classifier\rgb = GradientBoostingClassifier()\rgb_fit = fit_evaluate_model(gb)\r## Accuracy on test dataset 0.9790209790209791\rprint_permutation_importance(gb_fit)\r## worst concave points 0.023 +/- 0.011\r## mean concave points 0.021 +/- 0.010\rThe random forest and gradient boosting classifiers have the same accuracy score; however, their most important features are different.\n\rExplaining a single observation\rNow let us explain how each model predicts a single example (observation) from the test dataset.\nexample = X_test.iloc[1,:]\rexample_prediction = gb.predict(example.values.reshape(1, -1))\rexample_prediction_prob = gb.predict_proba(example.values.reshape(1, -1))\rprediction_index = 0 if example_prediction \u0026gt; 0.5 else 1\rprint(f\u0026#39;Prediction {example_prediction}; Probability: {example_prediction_prob}\u0026#39;)\r## Prediction [1]; Probability: [[0.10952357 0.89047643]]\rTo obtain a CIU score, we need to compute the minimum and maximum observed value of each feature in the dataset.\ndef min_max_features(X_train):\rmin_max = dict()\rfor i in range(len(X_train.columns)):\rmin_max[X_train.columns[i]] =[X_train.iloc[:,i].min(),X_train.iloc[:,i].max(),False]\rreturn min_max\rmin_max = min_max_features(X_train)\rdef explain_ciu(example,model):\rciu = determine_ciu(\rexample.to_dict(),\rmodel.predict_proba,\rmin_max,\r1000,\rprediction_index,\r)\rreturn ciu\rdt_ciu = explain_ciu(example,dt_fit)\rrf_ciu = explain_ciu(example,rf_fit)\rgb_ciu = explain_ciu(example,gb_fit)\r\rGenerating Textual Explanations\rWe can obtain a textual explanation of CIU which indicates which feature(s) can be important for our test example\ndt_ciu.text_explain()\r## [\u0026#39;The feature \u0026quot;mean radius\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;mean texture\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;mean perimeter\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;mean area\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;mean smoothness\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;mean compactness\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;mean concavity\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;mean concave points\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;mean symmetry\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;mean fractal dimension\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;radius error\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;texture error\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;perimeter error\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;area error\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;smoothness error\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;compactness error\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;concavity error\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;concave points error\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;symmetry error\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;fractal dimension error\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;worst radius\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;worst texture\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;worst perimeter\u0026quot;, which is highly important (CI=100.0%), is very typical for its class (CU=100.0%).\u0026#39;, \u0026#39;The feature \u0026quot;worst area\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;worst smoothness\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;worst compactness\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;worst concavity\u0026quot;, which is highly important (CI=100.0%), is very typical for its class (CU=100.0%).\u0026#39;, \u0026#39;The feature \u0026quot;worst concave points\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;worst symmetry\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;worst fractal dimension\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;]\rrf_ciu.text_explain()\r## [\u0026#39;The feature \u0026quot;mean radius\u0026quot;, which is important (CI=32.26%), is very typical for its class (CU=90.0%).\u0026#39;, \u0026#39;The feature \u0026quot;mean texture\u0026quot;, which is important (CI=35.48%), is unlikely for its class (CU=27.27%).\u0026#39;, \u0026#39;The feature \u0026quot;mean perimeter\u0026quot;, which is not important (CI=12.9%), is typical for its class (CU=50.0%).\u0026#39;, \u0026#39;The feature \u0026quot;mean area\u0026quot;, which is not important (CI=16.13%), is unlikely for its class (CU=40.0%).\u0026#39;, \u0026#39;The feature \u0026quot;mean smoothness\u0026quot;, which is not important (CI=12.9%), is typical for its class (CU=50.0%).\u0026#39;, \u0026#39;The feature \u0026quot;mean compactness\u0026quot;, which is not important (CI=9.68%), is unlikely for its class (CU=33.33%).\u0026#39;, \u0026#39;The feature \u0026quot;mean concavity\u0026quot;, which is not important (CI=16.13%), is not typical for its class (CU=20.0%).\u0026#39;, \u0026#39;The feature \u0026quot;mean concave points\u0026quot;, which is not important (CI=19.35%), is not typical for its class (CU=16.67%).\u0026#39;, \u0026#39;The feature \u0026quot;mean symmetry\u0026quot;, which is important (CI=38.71%), is very typical for its class (CU=100.0%).\u0026#39;, \u0026#39;The feature \u0026quot;mean fractal dimension\u0026quot;, which is not important (CI=6.45%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;radius error\u0026quot;, which is not important (CI=22.58%), is typical for its class (CU=71.43%).\u0026#39;, \u0026#39;The feature \u0026quot;texture error\u0026quot;, which is not important (CI=22.58%), is very typical for its class (CU=85.71%).\u0026#39;, \u0026#39;The feature \u0026quot;perimeter error\u0026quot;, which is not important (CI=22.58%), is unlikely for its class (CU=42.86%).\u0026#39;, \u0026#39;The feature \u0026quot;area error\u0026quot;, which is important (CI=38.71%), is unlikely for its class (CU=33.33%).\u0026#39;, \u0026#39;The feature \u0026quot;smoothness error\u0026quot;, which is not important (CI=3.23%), is very typical for its class (CU=100.0%).\u0026#39;, \u0026#39;The feature \u0026quot;compactness error\u0026quot;, which is not important (CI=12.9%), is typical for its class (CU=50.0%).\u0026#39;, \u0026#39;The feature \u0026quot;concavity error\u0026quot;, which is not important (CI=6.45%), is very typical for its class (CU=100.0%).\u0026#39;, \u0026#39;The feature \u0026quot;concave points error\u0026quot;, which is not important (CI=9.68%), is typical for its class (CU=66.67%).\u0026#39;, \u0026#39;The feature \u0026quot;symmetry error\u0026quot;, which is not important (CI=6.45%), is typical for its class (CU=50.0%).\u0026#39;, \u0026#39;The feature \u0026quot;fractal dimension error\u0026quot;, which is not important (CI=19.35%), is very typical for its class (CU=100.0%).\u0026#39;, \u0026#39;The feature \u0026quot;worst radius\u0026quot;, which is very important (CI=51.61%), is very typical for its class (CU=87.5%).\u0026#39;, \u0026#39;The feature \u0026quot;worst texture\u0026quot;, which is very important (CI=67.74%), is unlikely for its class (CU=33.33%).\u0026#39;, \u0026#39;The feature \u0026quot;worst perimeter\u0026quot;, which is very important (CI=70.97%), is typical for its class (CU=63.64%).\u0026#39;, \u0026#39;The feature \u0026quot;worst area\u0026quot;, which is very important (CI=61.29%), is typical for its class (CU=57.89%).\u0026#39;, \u0026#39;The feature \u0026quot;worst smoothness\u0026quot;, which is not important (CI=6.45%), is typical for its class (CU=50.0%).\u0026#39;, \u0026#39;The feature \u0026quot;worst compactness\u0026quot;, which is not important (CI=9.68%), is unlikely for its class (CU=33.33%).\u0026#39;, \u0026#39;The feature \u0026quot;worst concavity\u0026quot;, which is very important (CI=64.52%), is very typical for its class (CU=85.0%).\u0026#39;, \u0026#39;The feature \u0026quot;worst concave points\u0026quot;, which is important (CI=38.71%), is not typical for its class (CU=16.67%).\u0026#39;, \u0026#39;The feature \u0026quot;worst symmetry\u0026quot;, which is important (CI=25.81%), is typical for its class (CU=50.0%).\u0026#39;, \u0026#39;The feature \u0026quot;worst fractal dimension\u0026quot;, which is not important (CI=3.23%), is not typical for its class (CU=0.1%).\u0026#39;]\rgb_ciu.text_explain()\r## [\u0026#39;The feature \u0026quot;mean radius\u0026quot;, which is not important (CI=16.49%), is not typical for its class (CU=0.65%).\u0026#39;, \u0026#39;The feature \u0026quot;mean texture\u0026quot;, which is highly important (CI=90.14%), is not typical for its class (CU=3.76%).\u0026#39;, \u0026#39;The feature \u0026quot;mean perimeter\u0026quot;, which is not important (CI=2.63%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;mean area\u0026quot;, which is not important (CI=3.36%), is very typical for its class (CU=100.0%).\u0026#39;, \u0026#39;The feature \u0026quot;mean smoothness\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;mean compactness\u0026quot;, which is important (CI=34.53%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;mean concavity\u0026quot;, which is not important (CI=4.0%), is not typical for its class (CU=8.92%).\u0026#39;, \u0026#39;The feature \u0026quot;mean concave points\u0026quot;, which is important (CI=38.25%), is not typical for its class (CU=3.57%).\u0026#39;, \u0026#39;The feature \u0026quot;mean symmetry\u0026quot;, which is not important (CI=8.91%), is very typical for its class (CU=100.0%).\u0026#39;, \u0026#39;The feature \u0026quot;mean fractal dimension\u0026quot;, which is not important (CI=1.54%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;radius error\u0026quot;, which is not important (CI=10.53%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;texture error\u0026quot;, which is not important (CI=6.53%), is very typical for its class (CU=100.0%).\u0026#39;, \u0026#39;The feature \u0026quot;perimeter error\u0026quot;, which is not important (CI=1.48%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;area error\u0026quot;, which is very important (CI=57.97%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;smoothness error\u0026quot;, which is not important (CI=16.51%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;compactness error\u0026quot;, which is not important (CI=4.39%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;concavity error\u0026quot;, which is not important (CI=4.03%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;concave points error\u0026quot;, which is not important (CI=5.76%), is very typical for its class (CU=100.0%).\u0026#39;, \u0026#39;The feature \u0026quot;symmetry error\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;fractal dimension error\u0026quot;, which is not important (CI=21.47%), is not typical for its class (CU=17.33%).\u0026#39;, \u0026#39;The feature \u0026quot;worst radius\u0026quot;, which is not important (CI=1.27%), is very typical for its class (CU=100.0%).\u0026#39;, \u0026#39;The feature \u0026quot;worst texture\u0026quot;, which is very important (CI=60.61%), is not typical for its class (CU=13.75%).\u0026#39;, \u0026#39;The feature \u0026quot;worst perimeter\u0026quot;, which is important (CI=41.37%), is not typical for its class (CU=23.17%).\u0026#39;, \u0026#39;The feature \u0026quot;worst area\u0026quot;, which is not important (CI=19.51%), is typical for its class (CU=67.91%).\u0026#39;, \u0026#39;The feature \u0026quot;worst smoothness\u0026quot;, which is not important (CI=18.24%), is unlikely for its class (CU=48.97%).\u0026#39;, \u0026#39;The feature \u0026quot;worst compactness\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;worst concavity\u0026quot;, which is not important (CI=10.79%), is very typical for its class (CU=100.0%).\u0026#39;, \u0026#39;The feature \u0026quot;worst concave points\u0026quot;, which is important (CI=42.94%), is not typical for its class (CU=4.32%).\u0026#39;, \u0026#39;The feature \u0026quot;worst symmetry\u0026quot;, which is not important (CI=5.86%), is not typical for its class (CU=0.1%).\u0026#39;, \u0026#39;The feature \u0026quot;worst fractal dimension\u0026quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).\u0026#39;]\r\rDrawbacks\rAlthough CIU is a brilliant and simple technique, I believe it has the following drawbacks:\nIn regression problems, the range of possible values for the target variable can be infinite, which somehow does not make sense when we want to compute CIU. The authors said that they had put a limit on the range of values.\n\rComputing the range of values can be a little bit misleading, especially when we have outliers in the dataset.\n\rIt is not clear how we can get a global explanation for the model using CIU.\n\r\r\r\r","date":1590883200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579369582,"objectID":"088c89ec8b9a687ae41b534f0b2cc828","permalink":"/post/explaining-machine-learning-models-using-contextual-importance-and-contextual-utility/","publishdate":"2020-05-31T00:00:00Z","relpermalink":"/post/explaining-machine-learning-models-using-contextual-importance-and-contextual-utility/","section":"post","summary":"Introduction\rWhat Kinds of explanation does CIU generate?\rHow does CIU work?\rA toy example: predicting breast\r\rPermutation feature importance\rDecision Tree Classifier\rRandom Forest Classifier\rGradient Boosting Classifier\rExplaining a single observation\rGenerating Textual Explanations\rDrawbacks\r\r\r\rIntroduction\rExplainability is a hot topic in the machine learning research community these days. Over the past few years, many methods have been introduced to understand how a machine learning model makes a prediction.","tags":["XAI","Machine Learning","R","Python"],"title":"Explaining Machine Learning Models Using Contextual Importance and Contextual Utility","type":"post"},{"authors":[],"categories":["R"],"content":"\r\r\rIntroduction\rI am a music lover, and like my other hobbies, I am really interested in applying data science methods to it. A few months ago, I participated in the third week of the TidyTuesday project, where I made a map of Spotify songs based on audio features and a dimensionality reduction algorithm called UMAP. Since then, I have been using Spotify’s Web API to collect data, and recently, I decided to look at some of my favorite Iranian artists and their songs on Spotify. We have different genres and types of music, and while pop and rap are very popular among the younger generation, I like the traditional style more. Nevertheless, I was always curious to understand how different traditional music and pop music are. For this reason, that I like the most These are a few questions that I would like to answer:\nHow different audio features can be among top Persian singers?\rWhat are the most danceable and least danceable Persian songs?\rWho is the most popular Persian singer, and what is the most popular song?\r\rlibrary(kableExtra)\rlibrary(tidyverse)\rlibrary(googlesheets4)\rlibrary(tidymodels)\rlibrary(gghighlight)\rlibrary(hrbrthemes)\rlibrary(ggthemes)\rlibrary(ggrepel)\rlibrary(ggalt)\rlibrary(extrafont)\rlibrary(ggtext)\rlibrary(ggforce)\rlibrary(cowplot)\r\rData Collection\rI compiled a list of Persian Singers manually and collected information about their available songs on Spotify using the spotifyr package in R which lets us use R to access the Spotify’s API. This process was cumbersome as sometimes I was not getting what I was looking for. For instance, sometimes, songs that belonged to another random artist were retrieved. For each singer, we can only retrieve the top 10 popular songs. It means that the rest of the songs have no popularity scores. In the end, I collected various kinds of information about more than 10000 songs.\nsongs_audio_plus_pop \u0026lt;- read_csv(\u0026#39;https://raw.githubusercontent.com/mcnakhaee/datasets/master/Persian_Songs_Spotify.csv\u0026#39;)\rhead(songs_audio_plus_pop) %\u0026gt;% kable() %\u0026gt;%\rkable_styling(bootstrap_options = c(\u0026quot;striped\u0026quot;, \u0026quot;hover\u0026quot;, \u0026quot;condensed\u0026quot;, \u0026quot;responsive\u0026quot;))\r\r\rtrack_id\r\rpoet\r\rlyrics\r\rlyrics source\r\rdisc_number\r\rduration_ms\r\rexplicit\r\rtrack_name\r\rtrack_name_farsi\r\rartist_name\r\rartist_name_farsi\r\rpopularity\r\rtrack_number\r\ralbum_href\r\ralbum_id\r\ralbum_name\r\ralbum_release_date\r\ralbum_total_tracks\r\ralbum_release_year\r\rtrack_href\r\rdanceability\r\renergy\r\rkey\r\rloudness\r\rmode\r\rspeechiness\r\racousticness\r\rinstrumentalness\r\rliveness\r\rvalence\r\rtempo\r\rtime_signature\r\rkey_name\r\rmode_name\r\rkey_mode\r\rartist_id\r\rlyrics_1\r\rpoet_1\r\rlyric source\r\rgenre\r\r\r\r\r\r31iPeC6I0AiRW8InOxNKzm\r\rNA\r\rNA\r\rNA\r\r1\r\r446880\r\rFALSE\r\rGhazale Taze\r\rNA\r\rSalar Aghili\r\r\u0026lt;U+0633\u0026gt;\u0026lt;U+0627\u0026gt;\u0026lt;U+0644\u0026gt;\u0026lt;U+0627\u0026gt;\u0026lt;U+0631\u0026gt; \u0026lt;U+0639\u0026gt;\u0026lt;U+0642\u0026gt;\u0026lt;U+06CC\u0026gt;\u0026lt;U+0644\u0026gt;\u0026lt;U+06CC\u0026gt;\r\rNA\r\r1\r\rNA\r\r6GcmAWrnnMb2BuVriPhBLa\r\rVa Eshgh Amad\r\r2020-02-03\r\rNA\r\r2020\r\rhttps://api.spotify.com/v1/tracks/31iPeC6I0AiRW8InOxNKzm\r\r0.437\r\r0.390\r\r0\r\r-7.170\r\r0\r\r0.0299\r\r0.839\r\r3.51e-05\r\r0.1360\r\r0.330\r\r131.913\r\r3\r\rC\r\rminor\r\rC minor\r\rNA\r\rNA\r\rNA\r\rNA\r\rNA\r\r\r\r4Fi46ha8teWYTwk0b8fNPi\r\rNA\r\rNA\r\rNA\r\r1\r\r851920\r\rFALSE\r\rAyeeneye Hosn\r\rNA\r\rSalar Aghili\r\r\u0026lt;U+0633\u0026gt;\u0026lt;U+0627\u0026gt;\u0026lt;U+0644\u0026gt;\u0026lt;U+0627\u0026gt;\u0026lt;U+0631\u0026gt; \u0026lt;U+0639\u0026gt;\u0026lt;U+0642\u0026gt;\u0026lt;U+06CC\u0026gt;\u0026lt;U+0644\u0026gt;\u0026lt;U+06CC\u0026gt;\r\rNA\r\r2\r\rNA\r\r6GcmAWrnnMb2BuVriPhBLa\r\rVa Eshgh Amad\r\r2020-02-03\r\rNA\r\r2020\r\rhttps://api.spotify.com/v1/tracks/4Fi46ha8teWYTwk0b8fNPi\r\r0.379\r\r0.146\r\r5\r\r-10.008\r\r1\r\r0.0414\r\r0.970\r\r3.60e-04\r\r0.0812\r\r0.346\r\r105.634\r\r4\r\rF\r\rmajor\r\rF major\r\rNA\r\rNA\r\rNA\r\rNA\r\rNA\r\r\r\r0lQAe6EslKA7CUsS7SCW6Q\r\rNA\r\rNA\r\rNA\r\r1\r\r293160\r\rFALSE\r\rTarke Eshgh\r\rNA\r\rSalar Aghili\r\r\u0026lt;U+0633\u0026gt;\u0026lt;U+0627\u0026gt;\u0026lt;U+0644\u0026gt;\u0026lt;U+0627\u0026gt;\u0026lt;U+0631\u0026gt; \u0026lt;U+0639\u0026gt;\u0026lt;U+0642\u0026gt;\u0026lt;U+06CC\u0026gt;\u0026lt;U+0644\u0026gt;\u0026lt;U+06CC\u0026gt;\r\rNA\r\r3\r\rNA\r\r6GcmAWrnnMb2BuVriPhBLa\r\rVa Eshgh Amad\r\r2020-02-03\r\rNA\r\r2020\r\rhttps://api.spotify.com/v1/tracks/0lQAe6EslKA7CUsS7SCW6Q\r\r0.437\r\r0.453\r\r5\r\r-5.392\r\r0\r\r0.0349\r\r0.664\r\r2.07e-03\r\r0.1100\r\r0.501\r\r94.651\r\r5\r\rF\r\rminor\r\rF minor\r\rNA\r\rNA\r\rNA\r\rNA\r\rNA\r\r\r\r6dAFmJdVsKk5ksCpGqnKgO\r\rNA\r\rNA\r\rNA\r\r1\r\r648720\r\rFALSE\r\rMoghbacheye Bade Foroosh\r\rNA\r\rSalar Aghili\r\r\u0026lt;U+0633\u0026gt;\u0026lt;U+0627\u0026gt;\u0026lt;U+0644\u0026gt;\u0026lt;U+0627\u0026gt;\u0026lt;U+0631\u0026gt; \u0026lt;U+0639\u0026gt;\u0026lt;U+0642\u0026gt;\u0026lt;U+06CC\u0026gt;\u0026lt;U+0644\u0026gt;\u0026lt;U+06CC\u0026gt;\r\rNA\r\r4\r\rNA\r\r6GcmAWrnnMb2BuVriPhBLa\r\rVa Eshgh Amad\r\r2020-02-03\r\rNA\r\r2020\r\rhttps://api.spotify.com/v1/tracks/6dAFmJdVsKk5ksCpGqnKgO\r\r0.488\r\r0.138\r\r2\r\r-12.287\r\r0\r\r0.0451\r\r0.915\r\r6.58e-03\r\r0.2120\r\r0.445\r\r110.967\r\r5\r\rD\r\rminor\r\rD minor\r\rNA\r\rNA\r\rNA\r\rNA\r\rNA\r\r\r\r4VSDJGyEdSMB8UL4fDSCvv\r\rNA\r\rNA\r\rNA\r\r1\r\r273480\r\rFALSE\r\rBigharar\r\rNA\r\rSalar Aghili\r\r\u0026lt;U+0633\u0026gt;\u0026lt;U+0627\u0026gt;\u0026lt;U+0644\u0026gt;\u0026lt;U+0627\u0026gt;\u0026lt;U+0631\u0026gt; \u0026lt;U+0639\u0026gt;\u0026lt;U+0642\u0026gt;\u0026lt;U+06CC\u0026gt;\u0026lt;U+0644\u0026gt;\u0026lt;U+06CC\u0026gt;\r\rNA\r\r5\r\rNA\r\r6GcmAWrnnMb2BuVriPhBLa\r\rVa Eshgh Amad\r\r2020-02-03\r\rNA\r\r2020\r\rhttps://api.spotify.com/v1/tracks/4VSDJGyEdSMB8UL4fDSCvv\r\r0.301\r\r0.443\r\r0\r\r-5.702\r\r0\r\r0.0334\r\r0.657\r\r8.50e-06\r\r0.1200\r\r0.410\r\r148.053\r\r1\r\rC\r\rminor\r\rC minor\r\rNA\r\rNA\r\rNA\r\rNA\r\rNA\r\r\r\r1tqsOZ3fGtMXL0r2ySBpvA\r\rNA\r\rNA\r\rNA\r\r1\r\r260754\r\rFALSE\r\rNegar\r\rNA\r\rSalar Aghili\r\r\u0026lt;U+0633\u0026gt;\u0026lt;U+0627\u0026gt;\u0026lt;U+0644\u0026gt;\u0026lt;U+0627\u0026gt;\u0026lt;U+0631\u0026gt; \u0026lt;U+0639\u0026gt;\u0026lt;U+0642\u0026gt;\u0026lt;U+06CC\u0026gt;\u0026lt;U+0644\u0026gt;\u0026lt;U+06CC\u0026gt;\r\rNA\r\r1\r\rNA\r\r09Hepb4NioQ6sO87tsDyiz\r\rNegar\r\r2019-10-30\r\rNA\r\r2019\r\rhttps://api.spotify.com/v1/tracks/1tqsOZ3fGtMXL0r2ySBpvA\r\r0.577\r\r0.366\r\r0\r\r-6.668\r\r0\r\r0.0368\r\r0.834\r\r3.90e-06\r\r0.1110\r\r0.367\r\r77.453\r\r3\r\rC\r\rminor\r\rC minor\r\rNA\r\rNA\r\rNA\r\rNA\r\rNA\r\r\r\r\rOverall Song Features\rApart from variables such as the album that a song belongs to and its date of release, Spotify’s API can give us several features that capture a song’s different audio characteristics.\nYou can see a full list of these features in this link. However, I am only interested in some of these features, such as:\n\rvalence measures the happiness of a song.\renergy is relatively self-explanatory.\rtempo measures the speed of a song.\rloudness is also self-explanatory.\racousticness identifies whether the track is acoustic\rinstrumentalness shows whether a track contains no vocals.\rdanceability determines how good a song is for dancing.\r\rThis excellent visualization inspired me to create a similar plot for some of the most well-known Persian singers and see how their audio features differ from each other.\nartists \u0026lt;-\rc( \u0026#39;Sirvan Khosravi\u0026#39;,\u0026#39;Hesameddin Seraj\u0026#39;,\u0026#39;Rastak\u0026#39;,\u0026#39;Shahram Nazeri\u0026#39;,\u0026#39;Hossein Alizadeh\u0026#39;,\u0026#39;Reza Sadeghi\u0026#39;,\u0026#39;Alireza Eftekhari\u0026#39;,\u0026#39;Mohammadreza Shajarian\u0026#39;,\r\u0026#39;Salar Aghili\u0026#39;,\u0026#39;Morteza Pashaei\u0026#39;, \u0026#39;Alireza Ghorbani\u0026#39;,\u0026#39;Homayoun Shajarian\u0026#39;, \u0026#39;Mohsen Yeganeh\u0026#39; ,\u0026#39;Morteza Pashaei\u0026#39;,\u0026#39;Moein\u0026#39;,\u0026#39;Farzad Farzin\u0026#39;,\r\u0026#39;Babak Jahanbakhsh\u0026#39;, \u0026#39;Ehsan Khajeh Amiri\u0026#39;,\u0026#39;Siavash Ghomayshi\u0026#39;,\u0026#39;Xaniar Khosravi\u0026#39;,\u0026#39;Tohi\u0026#39; ,\u0026#39;Mohsen Chavoshi\u0026#39;,\u0026#39;Amir Tataloo\u0026#39;,\r\u0026#39;Hamed Homayoun\u0026#39;,\u0026#39;Kayhan Kalhor\u0026#39;)\rI will plot the average, the minimum, and the maximum value of each feature for each singer. That gives us a good picture of how different their audio characteristics are from each other. However, we must make the right adjustments to the dataset before visualizing it:\nWe need to transform the original dataset into a long-dataframe, which can be done by pivot_longer from thedplyr package.\n\rWe should rescale each audio feature, otherwise, the plot would not make any sense.\n\r\rorder \u0026lt;- c(\r\u0026quot;valence\u0026quot;,\r\u0026quot;energy\u0026quot;,\r\u0026quot;tempo\u0026quot;,\r\u0026quot;loudness\u0026quot;,\r\u0026quot;acousticness\u0026quot;,\r\u0026quot;instrumentalness\u0026quot;,\r\u0026quot;danceability\u0026quot;\r)\rscaled_features_long \u0026lt;- songs_audio_plus_pop %\u0026gt;%\rmutate_at(order, scales::rescale, to = c(0, 7)) %\u0026gt;%\rfilter(!is.na(popularity)) %\u0026gt;%\rfilter(artist_name %in% artists) %\u0026gt;%\rmutate(artist_name = factor(artist_name)) %\u0026gt;%\rpivot_longer(\rnames_to = \u0026#39;metric\u0026#39;,\rcols = c(\r\u0026quot;valence\u0026quot;,\r\u0026quot;energy\u0026quot;,\r\u0026quot;tempo\u0026quot;,\r\u0026quot;loudness\u0026quot;,\r\u0026quot;acousticness\u0026quot;,\r\u0026quot;danceability\u0026quot;),\rvalues_to = \u0026#39;value\u0026#39;) \rNow, we can visualize the results for each artist. As mentioned before, I will compare artists by the minimum (red), the average (orange), and maximum (yellow) values of each audio feature in their songs.\nggplot() +\r### This plots the average of each audio feature\rgeom_polygon(\rdata = scaled_features_long %\u0026gt;% group_by(artist_name, metric) %\u0026gt;%\rsummarise_at(c(\u0026quot;value\u0026quot;), mean) %\u0026gt;%\rarrange(factor(metric, levels = order)) %\u0026gt;%\rungroup(),\raes(x = metric, y = value, group = artist_name,),\ralpha = .54,\rsize = 1.5,\rshow.legend = T,\rfill = \u0026#39;#FF1654\u0026#39;\r) +\r### This plots the maximum of each audio feature\rgeom_polygon(\rdata = scaled_features_long %\u0026gt;% group_by(artist_name, metric) %\u0026gt;%\rsummarise_at(c(\u0026quot;value\u0026quot;), max) %\u0026gt;%\rarrange(factor(metric, levels = order)) %\u0026gt;%\rungroup(),\raes(x = metric, y = value, group = artist_name,),\ralpha = .44,\rsize = 1.5,\rshow.legend = T,\rfill = \u0026#39;#FFE066\u0026#39;\r) +\r### This plots the mimumn of each audio feature\rgeom_polygon(\rdata = scaled_features_long %\u0026gt;% group_by(artist_name, metric) %\u0026gt;%\rsummarise_at(c(\u0026quot;value\u0026quot;), min) %\u0026gt;%\rarrange(factor(metric, levels = order)) %\u0026gt;%\rungroup(),\raes(x = metric, y = value, group = artist_name,),\ralpha = .84,\rsize = 1.5,\rshow.legend = T,\rfill = \u0026quot;#EF476F\u0026quot;\r) +\rscale_x_discrete(\rlimits = order,\rlabels = c(\r\u0026quot;Happy\u0026quot;,\r\u0026quot;Energy\u0026quot;,\r\u0026quot;Fast\u0026quot;,\r\u0026quot;Loud\u0026quot;,\r\u0026quot;Acoustic\u0026quot;,\r\u0026quot;Instrumental\u0026quot;,\r\u0026quot;Danceable\u0026quot;\r)\r) +\rcoord_polar(clip = \u0026#39;off\u0026#39;) +\rtheme_minimal() +\rlabs(title = \u0026quot;Persian Singers and Their Audio Characteristics\u0026quot;,\rcaption = \u0026#39;Source: Spotify \\n Visualization: mcnakhaee\u0026#39;) +\rylim(0, 8) +\rfacet_wrap( ~ artist_name, ncol = 4) +\rtheme(\raxis.title = element_blank(),\raxis.ticks = element_blank(),\raxis.text.y = element_blank(),\raxis.text.x = element_text(\rfamily = \u0026#39;Montserrat\u0026#39;,\rsize = 13.5,\rmargin = ggplot2::margin(30, 0, 20, 0)\r),\rplot.caption = element_text(\rfamily = \u0026#39;Montserrat\u0026#39;,\rmargin = ggplot2::margin(30, 0, 20, 0),\rsize = 11,\rcolor = \u0026#39;grey80\u0026#39;\r) ,\rtext = element_text(family = \u0026#39;Montserrat\u0026#39;),\rstrip.text = element_text(family = \u0026#39;Montserrat\u0026#39;, size = 18),\rstrip.text.x = element_text(margin = ggplot2::margin(1, 1, 1, 1, \u0026quot;cm\u0026quot;)),\rpanel.spacing = unit(3.5, \u0026quot;lines\u0026quot;),\rpanel.grid = element_blank(),\rplot.title = element_text(\rfamily = \u0026#39;Montserrat\u0026#39;,\rhjust = .5,\rmargin = ggplot2::margin(30, 0, 20, 0),\rsize = 32,\rcolor = \u0026#39;gray10\u0026#39;\r)\r)\r\rLooking more closely at each audio feature\rMy first plot is informative, but it only gives us an overall picture of audio features. However, I would like to have a more detailed picture of singers and the audio features for each of their songs. For this reason, I will also make a separate plot for each audio feature where every song and its corresponding feature values are shown. I will also mark a few popular songs from each artist with a different color on this plot.\n# Set a custom theme for our plots\rtheme_set(theme_void() +\rtheme(\rtext = element_text(family = \u0026#39;Montserrat\u0026#39;),\raxis.text.x = element_text(\rfamily = \u0026#39;Montserrat\u0026#39;,\rmargin = ggplot2::margin(30, 0, 20, 0),\rcolor = \u0026#39;gray80\u0026#39;,\rsize = 18\r),\raxis.text.y = element_text(\rfamily = \u0026#39;Montserrat\u0026#39;,\rmargin = ggplot2::margin(30, 0, 20, 20),\rcolor = \u0026#39;gray80\u0026#39;,\rsize = 20\r),\raxis.title.x = element_text(\rfamily = \u0026#39;Montserrat\u0026#39;,\rmargin = ggplot2::margin(30, 0, 20, 0),\rsize = 22,\rcolor = \u0026#39;gray80\u0026#39;\r),\rplot.title = element_text(\rfamily = \u0026#39;Montserrat\u0026#39;,\rhjust = .5,\rmargin = ggplot2::margin(40, 0, 40, 0),\rsize = 35,\rcolor = \u0026#39;gray80\u0026#39;\r),\rplot.caption = element_text(family =\u0026#39;Montserrat\u0026#39;,\rmargin = ggplot2::margin(30, 0, 20, 20),\rsize = 20,\rcolor = \u0026#39;gray70\u0026#39;) ,\rlegend.position = \u0026#39;none\u0026#39;,\rplot.background = element_rect(fill = \u0026quot;#516869\u0026quot;)\r))\rAgain here, I will change the dataset to make it ready for visualization.\nsongs_audio_plus_pop_jitter \u0026lt;- songs_audio_plus_pop %\u0026gt;% filter(artist_name %in% artists) %\u0026gt;% mutate(is_popular = !is.na(popularity)) %\u0026gt;%\rdistinct(artist_name,track_name,.keep_all = T) %\u0026gt;% mutate(is_popular_size = if_else(!is.na(popularity),popularity,25),\ris_popular_alpha = if_else(!is.na(popularity),0.8,0.5)) %\u0026gt;% mutate(track_name= str_wrap(track_name, width = 15)) %\u0026gt;% mutate(popular_track_name = if_else(!is.na(track_name_farsi)\u0026amp; !is.na(popularity) \u0026amp; nchar(track_name) \u0026lt; 20 \u0026amp; !explicit,track_name,\u0026#39;\u0026#39;)) \r\rHappiness\rsongs_audio_plus_pop_jitter %\u0026gt;%\rggplot(aes(x = artist_name, y = valence)) +\rgeom_jitter(\raes(\rcolor = is_popular,\rsize = is_popular_size,\ralpha = is_popular_alpha\r),\rsize = 6,\rwidth = 0.2,\r) +\rgeom_text_repel(\raes(label = popular_track_name , x = artist_name , y = valence),\rfamily = \u0026#39;Montserrat\u0026#39;,\rcolor = \u0026#39;gray99\u0026#39;,\rsize = 5,\rforce = 0.6,\rmax.iter = 2000,\rbox.padding = 0.4,\rpoint.padding = 0.6,\rmin.segment.length = 0.15,\rnudge_y = 0.001,\rhjust = 0.5,\rsegment.alpha = 0.6,\rsegment.size = 0.6\r) +\rstat_summary(\rfun = mean,\rgeom = \u0026#39;point\u0026#39;,\rcolor = \u0026#39;#FF9F1C\u0026#39;,\rsize = 5,\raes(group = artist_name)) +\rscale_color_manual(values = c(\u0026#39;#FFD166\u0026#39;, \u0026#39;#EF476F\u0026#39;)) +\rscale_y_continuous(sec.axis = dup_axis()) +\rcoord_flip()\r\rEnergy\rsongs_audio_plus_pop_jitter %\u0026gt;%\rggplot(aes(x = artist_name, y = energy)) +\rgeom_jitter(\raes(\rcolor = is_popular,\rsize = is_popular_size,\ralpha = is_popular_alpha\r),\rsize = 6,\rwidth = 0.2,\r) +\rgeom_text_repel(\raes(label = popular_track_name , x = artist_name , y = energy),\rfamily = \u0026#39;Montserrat\u0026#39;,\rcolor = \u0026#39;gray90\u0026#39;,\rsize = 6,\rforce = 0.6,\rmax.iter = 2000,\rbox.padding = 0.4,\rpoint.padding = 0.6,\rmin.segment.length = 0.15,\rnudge_y = 0.001,\rhjust = 0.5,\rsegment.alpha = 0.6,\rsegment.size = 0.6\r) +\rstat_summary(\rfun = mean,\rgeom = \u0026#39;point\u0026#39;,\rcolor = \u0026#39;#FF9F1C\u0026#39;,\rsize = 5,\raes(group = artist_name)\r) +\rscale_color_manual(values = c(\u0026#39;#EF476F\u0026#39;, \u0026#39;#EF476F\u0026#39;)) +\rscale_y_continuous(sec.axis = dup_axis()) +\rcoord_flip() \r\rAcousticness\rsongs_audio_plus_pop_jitter %\u0026gt;%\rggplot(aes(x = artist_name, y = acousticness)) +\rgeom_jitter(\raes(\rcolor = is_popular,\rsize = is_popular_size,\ralpha = is_popular_alpha\r),\rsize = 6,\rwidth = 0.2,\r) +\rgeom_text_repel(\raes(label = popular_track_name , x = artist_name , y = acousticness),\rfamily = \u0026#39;Montserrat\u0026#39;,\rcolor = \u0026#39;gray90\u0026#39;,\rsize = 6,\rforce = 0.6,\rmax.iter = 2000,\rbox.padding = 0.4,\rpoint.padding = 0.6,\rmin.segment.length = 0.15,\rnudge_y = 0.001,\rhjust = 0.5,\rsegment.alpha = 0.6,\rsegment.size = 0.6\r) +\rstat_summary(\rfun = mean,\rgeom = \u0026#39;point\u0026#39;,\rcolor = \u0026#39;#FF9F1C\u0026#39;,\rsize = 5,\raes(group = artist_name)\r) +\rscale_color_manual(values = c(\u0026#39;#118AB2\u0026#39;, \u0026#39;#06D6A0\u0026#39;)) +\rscale_y_continuous(sec.axis = dup_axis()) +\rcoord_flip() \r\rDanceability\rsongs_audio_plus_pop_jitter %\u0026gt;%\rggplot(aes(x = artist_name, y = danceability)) +\rgeom_jitter(\raes(\rcolor = is_popular,\rsize = is_popular_size,\ralpha = is_popular_alpha\r),\rsize = 6,\rwidth = 0.2,\r) +\rgeom_text_repel(\raes(label = popular_track_name , x = artist_name , y = danceability),\rfamily = \u0026#39;Montserrat\u0026#39;,\rcolor = \u0026#39;gray90\u0026#39;,\rsize = 6,\rforce = 0.6,\rmax.iter = 2000,\rbox.padding = 0.4,\rpoint.padding = 0.6,\rmin.segment.length = 0.15,\rnudge_y = 0.001,\rhjust = 0.5,\rsegment.alpha = 0.6,\rsegment.size = 0.6\r) +\rstat_summary(\rfun = mean,\rgeom = \u0026#39;point\u0026#39;,\rcolor = \u0026#39;#FF9F1C\u0026#39;,\rsize = 5,\raes(group = artist_name)\r) +\rscale_color_manual(values = c(\u0026#39;#A5668B\u0026#39;, \u0026#39;#EF476F\u0026#39;)) +\rscale_y_continuous(sec.axis = dup_axis()) +\rcoord_flip()\r\rLoudness\rsongs_audio_plus_pop_jitter %\u0026gt;%\rggplot(aes(x = artist_name, y = loudness)) +\rgeom_jitter(\raes(\rcolor = is_popular,\rsize = is_popular_size,\ralpha = is_popular_alpha\r),\rsize = 6,\rwidth = 0.2,\r) +\rgeom_text_repel(\raes(label = popular_track_name , x = artist_name , y = loudness),\rfamily = \u0026#39;Montserrat\u0026#39;,\rcolor = \u0026#39;gray90\u0026#39;,\rsize = 6,\rforce = 0.6,\rmax.iter = 2000,\rbox.padding = 0.4,\rpoint.padding = 0.6,\rmin.segment.length = 0.15,\rnudge_y = 0.001,\rhjust = 0.5,\rsegment.alpha = 0.6,\rsegment.size = 0.6\r) +\rstat_summary(\rfun = mean,\rgeom = \u0026#39;point\u0026#39;,\rcolor = \u0026#39;#FF9F1C\u0026#39;,\rsize = 5,\raes(group = artist_name)\r) +\rscale_color_manual(values = c(\u0026#39;#06D6A0\u0026#39;, \u0026#39;#EF476F\u0026#39;)) +\rscale_y_continuous(sec.axis = dup_axis()) +\rcoord_flip() \r\r\rMost Popular Songs\rAs I mentioned previously, we can only retrieve his/her top 10 popular songs for each artist. The popularity of a track is a value between 0 (the least popular) and 100 (the most popular). Spotify uses an algorithm to calculate popularity scores, which is heavily influenced by the total number of times a song has been played recently. You can read more about it in this link.\nKnowing this fact about how popularity is measured, we can visualize songs and artists that have been popular and played recently.\nsongs_audio_plus_pop \u0026lt;- songs_audio_plus_pop %\u0026gt;%\rfilter(\r!artist_name %in% c(\r\u0026#39;Hatam Asgari\u0026#39;,\r\u0026#39;Kaveh Deylami\u0026#39;,\r\u0026#39;Nasser Abdollahi\u0026#39;,\r\u0026#39;Peyman Yazdanian\u0026#39;,\r\u0026#39;Abbas Ghaderi\u0026#39;,\r\u0026#39;Mohammad Golriz\u0026#39;,\r\u0026#39;Hamid Hami\u0026#39;,\r\u0026#39;Koveyti Poor\u0026#39;,\r\u0026#39;Mohsen Sharifian\u0026#39;,\r\u0026#39;Soheil Nafissi\u0026#39;))\rsongs_audio_plus_pop %\u0026gt;%\rfilter(!is.na(popularity)) %\u0026gt;%\rmutate(track_name = if_else(!is.na(track_name), track_name, track_name)) %\u0026gt;%\rgroup_by(artist_name) %\u0026gt;%\rsummarize(\ravg_pop = mean(popularity),\rmin_pop = min(popularity),\rmax_pop = max(popularity),\rmost_popular = track_name[which.max(popularity)],\rleast_popular = track_name[which.min(popularity)]\r) %\u0026gt;%\rmutate(\rartist_name = fct_reorder(artist_name, avg_pop),\r) %\u0026gt;%\rggplot(aes(x = min_pop , xend = max_pop, y = artist_name)) +\rgeom_dumbbell(\rcolour_x = \u0026#39;#ef476f\u0026#39;,\rcolour_xend = \u0026#39;#118ab2\u0026#39;,\rsize_x = 7,\rsize_xend = 7\r) +\rgeom_text(\raes(x = min_pop - 1, y = artist_name, label = least_popular),\rsize = 7,\rfamily = \u0026#39;Montserrat\u0026#39;,\rhjust = 1\r) +\rgeom_text(\raes(x = max_pop + 1, y = artist_name, label = most_popular),\rsize = 7,\rfamily = \u0026#39;Montserrat\u0026#39;,\rhjust = 0\r) +\rscale_x_continuous(sec.axis = dup_axis()) +\rtheme_tufte() +\rtheme(\rplot.title = element_text(\rfamily = \u0026#39;Montserrat\u0026#39;,\rhjust = .5,\rmargin = ggplot2::margin(0, 0, 40, 0),\rsize = 45\r),\rplot.subtitle = element_markdown(\rfamily = \u0026#39;Montserrat\u0026#39;,\rsize = 15,\rmargin = ggplot2::margin(20, 0, 40, 0),\rhjust = 1\r),\raxis.text.x = element_text(\rfamily = \u0026#39;Montserrat\u0026#39;,\rmargin = ggplot2::margin(30, 0, 20, 0),\rsize = 20\r),\raxis.text.y = element_text(\rfamily = \u0026#39;Montserrat\u0026#39;,\rmargin = ggplot2::margin(30, 0, 20, 0),\rsize = 20\r),\raxis.title.x = element_text(\rfamily = \u0026#39;Montserrat\u0026#39;,\rmargin = ggplot2::margin(30, 0, 20, 0),\rsize = 30\r),\rplot.caption = element_text(family =\u0026#39;Montserrat\u0026#39;,\rmargin = ggplot2::margin(30, 0, 20, 20),\rsize = 20,\rcolor = \u0026#39;gray20\u0026#39;) ,\raxis.title.y = element_blank(),\rplot.background = element_rect(fill = \u0026#39;#FCF0E1\u0026#39;),\rplot.margin = unit(c(1, 1, 1.5, 1.2), \u0026quot;cm\u0026quot;)\r)\rThis plot shows the most popular song and the least popular track of each artist among his top 10 songs. The artists are also sorted based on their average popularity.\n\r","date":1588550400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588657677,"objectID":"9a31bf1eda12ab65a1b5dc5057fafcf9","permalink":"/post/happiest-saddest-most-energetic-and-fastet-persian-singers-on-spotify/","publishdate":"2020-05-04T00:00:00Z","relpermalink":"/post/happiest-saddest-most-energetic-and-fastet-persian-singers-on-spotify/","section":"post","summary":"Introduction\rI am a music lover, and like my other hobbies, I am really interested in applying data science methods to it. A few months ago, I participated in the third week of the TidyTuesday project, where I made a map of Spotify songs based on audio features and a dimensionality reduction algorithm called UMAP. Since then, I have been using Spotify’s Web API to collect data, and recently, I decided to look at some of my favorite Iranian artists and their songs on Spotify.","tags":["Spotiify","R","Visualization"],"title":"The Happiest, Saddest, Most Energetic and Most Popular Persian Singers on Spotify","type":"post"},{"authors":[],"categories":["NLP","Python","R"],"content":"\r\r\r1. Introduction\rMany of us could not watch every 2020 Democratic Primary debate. It was important for some of us to know what happened during the debates. In my case, I was reading about what happened in debates in some online newspapers, or I watched a highlight of a debate on Youtube the next day. However, they only give a summary of a debate or just broadcast a portion of debates that includes a heated exchange of opinions between candidates. As a result, many important issues raised by candidates will be ignored and forgotten in the aftermath of a debate. So, it is crucial to summarize the debate’s content so that everyone could understand what went on in the debate and what issues each candidate addressed during his/her speech. In this blog post, I will show you how I used some NLP techniques for exploring the content of debates and give you a comprehensive overview of topics that each candidate discussed.\nIn my last blog post, I explained that I had the three following goals in mind when I started exploring the 2020 Democratic Debates :\nTo know how eloquent presidential candidates are.\rTo find out who used more positive or more negative words in his/her speech by performing sentiment analysis.\rA map of topics, individuals, and entities that each candidate mentioned in his/her speech by using named entity recognition and network analysis..\r\rI only discussed how I approached the first two aspects of my experiment in my last blogpost. Now it is time to investigate the third and last one.\nInitially, my aim was to use network analysis to determine potential allies and enemies on the debate stage. For example, Elizabeth Warren mentioned Mike Bloomberg several times and attacked him harshly in the 9th debate. During the same debate, Amy Klobuchar and Pete Buttigieg clashed bitterly with each other. These are just two instances of many other heated exchanges between the candidates that happened throughout the ten debates.\n\rTo make things more precise, I transformed my objective into two questions that I would like to answer:\n\r\rHow many times did a candidate address (mention) other candidates during a debate?\rHow did he/she refer to a candidate(in a friendly or unfriendly manner)?\r\r\rA simple approach to answering these questions is to store the names of all candidates in a variable (for example, a vector in R or a list in Python), iterate over the transcript, compute the sentiment, count and store the number of times that another candidate brought up a candidate’s name.\nHowever, this approach is a little bit challenging and requires a lot of manual data pre-processing efforts. For each democratic candidate, one must compile a comprehensive combination of ways that may be used to call a candidate, and to prepare such a list seems to be a very time-consuming task. For example, other candidates mentioned Bernie Sanders in many different ways, including Bernie, Bernie Sanders, or Senator Sanders.\nI realized that I could use Named Entity Recognition (NER), a technique from the Natural Language Processing (NLP) literature, to extract candidates’ names from the transcript and solve this problem more efficiently. Using this approach, I can find candidates’ names from the transcript, but I can also find the names of other politicians, individuals, and even organizations and further extend my analysis to include many more topics and issues.\n\r2. Workflow\rI made use of both Python and R in my analysis. My workflow includes the following steps:\nI access the transcript of debates using this package.\rI use tidytext to split the transcript into multiple sentences and also for sentiment analysis.\rI extract several types of Named Entities from each sentence, using Spacy,\rI compute the sentiment of each sentence using TextBlob library in Python.\rI transferred the results to R for visualization. There, I visualize the network of mentions and entities using ggraph and ggplot library.\r\rNote that I could have implemented all the steps in R. For instance, Spacy has an R wrapper called Spacyr, which gives the same functionality that I need for this analysis. However, I’d like to increase the number of tools that I can use. Notably, using Python and R side by side is an exciting challenge for me.\nlibrary(demdebates2020)\rlibrary(tidytext)\rlibrary(tidygraph)\rlibrary(tidyverse)\rlibrary(ggraph)\rlibrary(gghighlight)\rlibrary(ggthemes)\rlibrary(kableExtra)\rlibrary(reticulate)\rlibrary(magrittr)\rlibrary(pluralize)\rtheme_set(\rtheme_graph(base_family = \u0026#39;Montserrat\u0026#39;) +\rtheme(\rpanel.border = element_blank(),\rplot.title = element_text(\rfamily = \u0026#39;Montserrat\u0026#39;,\rface = \u0026quot;bold\u0026quot;,\rcolour = \u0026#39;#540b0e\u0026#39;,\rsize = 42,\rmargin = ggplot2::margin(40, 40, 20, 10),\rhjust = 0\r),\rplot.subtitle = element_text(\rfamily = \u0026#39;Montserrat\u0026#39;,\rface = \u0026quot;bold\u0026quot;,\rcolour = \u0026#39;#7d4f50\u0026#39;,\rsize = 30,\rmargin = ggplot2::margin(20, 40, 80, 10),\rhjust = 0\r),\rplot.caption = element_text(\rfamily = \u0026#39;Montserrat\u0026#39;,\rface = \u0026quot;bold\u0026quot;,\rcolour = \u0026#39;#540b0e\u0026#39;,\rsize = 16,\rmargin = ggplot2::margin(0, 0, 20, 20),\r),\rlegend.position = \u0026#39;none\u0026#39;,\rplot.background = element_rect(fill = \u0026#39;#FCF0E1\u0026#39;),\r)\r)\r2.2 Loading the dataset\rhead(debates) \r\r\rspeaker\r\rbackground\r\rspeech\r\rtype\r\rgender\r\rdebate\r\rday\r\rorder\r\r\r\r\r\rSavannah Guthrie\r\rNA\r\rAll right. So with that business out of the way, we want to get to it. And we’ll start this evening with Senator Elizabeth Warren.\r\rModerator\r\rfemale\r\r1\r\r1\r\r1\r\r\r\rSavannah Guthrie\r\rNA\r\rSenator, good evening to you.\r\rModerator\r\rfemale\r\r1\r\r1\r\r2\r\r\r\rElizabeth Warren\r\rNA\r\rThank you. Good to be here.\r\rCandidate\r\rfemale\r\r1\r\r1\r\r3\r\r\r\rSavannah Guthrie\r\rNA\r\rYou have many plans - free college, free child care, government health care, cancellation of student debt, new taxes, new regulations, the breakup of major corporations. But this comes at a time when 71 percent of Americans say the economy is doing well, including 60 percent of Democrats. What do you say to those who worry this kind of significant change could be risky to the economy?\r\rModerator\r\rfemale\r\r1\r\r1\r\r4\r\r\r\rElizabeth Warren\r\rNA\r\rSo I think of it this way. Who is this economy really working for? It’s doing great for a thinner and thinner slice at the top. It’s doing great for giant drug companies. It’s just not doing great for people who are trying to get a prescription filled.\r\rCandidate\r\rfemale\r\r1\r\r1\r\r5\r\r\r\rElizabeth Warren\r\rNA\r\rIt’s doing great for people who want to invest in private prisons, just not for the African Americans and Latinx whose families are torn apart, whose lives are destroyed, and whose communities are ruined.\r\rCandidate\r\rfemale\r\r1\r\r1\r\r6\r\r\r\r\r\r2.1. Tokenization\rAs I mentioned before, I use tidytext to tokenize the transcript dataset based on sentences. For sentence tokenization, you need to set token = 'sentences' in unnest_tokens() function. I think sentence tokenization is a reasonable choice because candidates might change the subject or the tone of their speech in each sentence.\ndebates \u0026lt;- debates %\u0026gt;%\runnest_tokens(sentence, speech, token = \u0026#39;sentences\u0026#39;,to_lower = FALSE)\rhead(debates) \rhead(debates) %\u0026gt;%\rkable() %\u0026gt;%\rkable_styling(bootstrap_options = c(\u0026quot;striped\u0026quot;, \u0026quot;hover\u0026quot;, \u0026quot;condensed\u0026quot;, \u0026quot;responsive\u0026quot;))\r\r\rspeaker\r\rbackground\r\rtype\r\rgender\r\rdebate\r\rday\r\rorder\r\rsentence\r\r\r\r\r\rAbby Phillip\r\r(APPLAUSE)\r\rModerator\r\rfemale\r\r7\r\r1\r\r222\r\rNA\r\r\r\rAbby Phillip\r\r(APPLAUSE)\r\rModerator\r\rfemale\r\r7\r\r1\r\r283\r\rNA\r\r\r\rAbby Phillip\r\r(APPLAUSE)\r\rModerator\r\rfemale\r\r7\r\r1\r\r285\r\rNA\r\r\r\rAbby Phillip\r\r(APPLAUSE)\r\rModerator\r\rfemale\r\r7\r\r1\r\r328\r\rNA\r\r\r\rAbby Phillip\r\r(APPLAUSE)\r\rModerator\r\rfemale\r\r7\r\r1\r\r576\r\rNA\r\r\r\rAbby Phillip\r\r(COMMERCIAL BREAK)\r\rModerator\r\rfemale\r\r7\r\r1\r\r284\r\rNA\r\r\r\r\r\r3. Named Entity Recognition using Spacy\rNow we change to python for NER, but we need to install and import a few python libraries before starting the analysis.\nimport pandas as pd\rimport spacy\rfrom textblob import TextBlob\rIn RStudio and Rmarkdown notebooks, with the help of the reticulate library, we can easily load the debate dataset in our R environment to our Python environment.\ndebates = r.debates\rNote that in in the transcript dataset there are rows for both the candidates and the moderators who asked questions from candidates. However, we are particularly interested in what the candidates said, so we only filter rows corresponding to candidates.\ncandidates = debates[(debates[\u0026#39;type\u0026#39;] == \u0026#39;Candidate\u0026#39;) \u0026amp; (pd.notnull(debates[\u0026#39;sentence\u0026#39;])) ]\rWe are almost ready to extract the named entities. However, to use Spacy’s NLP features such as NER, we first need to download and load a pre-trained English language model. There are several English language models with different sizes available in Spacy. I used the largest language model available as it might be better and more accurate.\nnlp = spacy.load(\u0026#39;en_core_web_lg\u0026#39;)\rSpacy’s NER model is trained on the OntoNotes 5 corpus, and it can detect several types of named entities, including:\n\r\rTYPE\rDESCRIPTION\r\r\r\rPERSON\rPeople, including fictional.\r\rNORP\rNationalities or religious or political groups.\r\rFAC\rBuildings, airports, highways, bridges, etc.\r\rORG\rCompanies, agencies, institutions, etc.\r\rGPE\rCountries, cities, states.\r\rLOC\rNon-GPE locations, mountain ranges, bodies of water.\r\rPRODUCT\rObjects, vehicles, foods, etc. (Not services.)\r\rEVENT\rNamed hurricanes, battles, wars, sports events, etc.\r\rWORK_OF_ART\rTitles of books, songs, etc.\r\rLAW\rNamed documents made into laws.\r\rLANGUAGE\rAny named language.\r\rDATE\rAbsolute or relative dates or periods.\r\rTIME\rTimes smaller than a day.\r\rPERCENT\rPercentage, including ”%“.\r\rMONEY\rMonetary values, including unit.\r\rQUANTITY\rMeasurements, as of weight or distance.\r\rORDINAL\r“first”, “second”, etc.\r\rCARDINAL\rNumerals that do not fall under another type.\r\r\r\rAs you can see, there are many types of named entities, but I narrow down my analysis to just a handful of them, including PERSON, ORG, GPE, NORP, LAW, and LOC.\rThe named entity labels are stored in label_ attribute. To do so, we need to create Doc object using nlp() method. When we call nlp() on the input text, spacy uses the language model to tokenize the document first. Then, spacy applies a tagger, parser, and named entity recognizer steps as its processing pipeline’s next components. The named entities can be accessed by ents attribute of the document object.\nIf you are interested to learn more about Spacy and how it works, I have provided some links at the end of this post.\nI define a python function that iterates over all named entities and see to which class of named entities (by default PERSON) they belong. I apply this function to the transcript column in the original dataset and store each extracted type of entity as a separate column.\ndef extract_entities_delim(text,type_ent = \u0026#39;PERSON\u0026#39;):\rent_text = \u0026#39;\u0026#39;\rdoc = nlp(text)\rfor e in doc.ents:\rif e.label_ == type_ent:\rent_text = e.text+ \u0026#39;;\u0026#39; + ent_text return ent_text\rcandidates[\u0026#39;PERSON\u0026#39;] = candidates[\u0026#39;sentence\u0026#39;].apply(lambda x:extract_entities_delim(x))\rcandidates[\u0026#39;ORG\u0026#39;] = candidates[\u0026#39;sentence\u0026#39;].apply(lambda x:extract_entities_delim(x,\u0026#39;ORG\u0026#39;))\rcandidates[\u0026#39;GPE\u0026#39;] = candidates[\u0026#39;sentence\u0026#39;].apply(lambda x:extract_entities_delim(x,\u0026#39;GPE\u0026#39;))\rcandidates[\u0026#39;NORP\u0026#39;] = candidates[\u0026#39;sentence\u0026#39;].apply(lambda x:extract_entities_delim(x,\u0026#39;NORP\u0026#39;))\rcandidates[\u0026#39;LAW\u0026#39;] = candidates[\u0026#39;sentence\u0026#39;].apply(lambda x:extract_entities_delim(x,\u0026#39;LAW\u0026#39;))\rcandidates[\u0026#39;LOC\u0026#39;] = candidates[\u0026#39;sentence\u0026#39;].apply(lambda x:extract_entities_delim(x,\u0026#39;LOC\u0026#39;))\r\r4. Sentiment Analysis\rNext, I use TextBlob to compute each sentence’s sentiment and store its polarity score in a separate column called polarity_sentiment (TextBlob also returns a subjectivity score, but for simplicity, I will not use this score in my analysis). The polarity sentiment score is a value between -1 and 1. If the value is larger than 0, it means that the sentence has a positive sentiment. On the other hand, if the returned value is smaller than 0, it indicates that the sentence’s sentiment is negative.\ndef polarity_sentiment(text):\rblob = TextBlob(text)\rreturn blob.sentiment.polarity\rcandidates[\u0026#39;polarity_sentiment\u0026#39;] = candidates.sentence.apply(lambda x:polarity_sentiment(x))\r\r\r5.Network Visualization\rA network (graph) can nicely represent how candidates mentioned individuals and entities in their speeches. We have two types of nodes in this network:\nThe first set of nodes represent candidates on the debate stage (from nodes).\rThe second set of nodes represent named entities (including the name of candidates themselves) that the candidates referred to in their speeches (to nodes).\r\rIf a candidate mentions a named entity in his/her speech, we connect the candidate node and the named entity node via our network’s edge. It is also fair to assume that the candidate-entity network should be weighted because candidates tend to place a varying level of importance on different issues, topics, and people (named entities).\nWe have two options for specifying weights for edges in the network:\nWe can use the number of times that a candidate mentioned a named entity in his/her speech. This shows how much a named entity was important to that candidate.\rWe can group by candidates and named entities and compute their average sentiment score. By doing so, we can measure how each candidate described these named entities. However, this approach might not be as accurate as we want.\r\rHaving said that, it is time to go back to R and visualize the network of candidates and named entities using the ggraph and tidygraph libraries. For each class of named entities, I use as_tbl_graph() function, create a unique graph table dataset, and visualize the network.\nSo, let us load the sentiment-entity dataset that I created in the Python environment to the R environment.\ncandidates \u0026lt;- py$candidates\rhead(candidates) \r\r\rX1\r\rspeaker\r\rbackground\r\rtype\r\rgender\r\rdebate\r\rday\r\rorder\r\rsentence\r\rPERSON\r\rORG\r\rGPE\r\rNORP\r\rLAW\r\rLOC\r\rpolarity_sentiment\r\r\r\r\r\r370\r\rAmy Klobuchar\r\rNA\r\rCandidate\r\rfemale\r\r1\r\r1\r\r11\r\rWell, first, the economy.\r\rNA\r\rNA\r\rNA\r\rNA\r\rNA\r\rNA\r\r0.250\r\r\r\r371\r\rAmy Klobuchar\r\rNA\r\rCandidate\r\rfemale\r\r1\r\r1\r\r11\r\rWe know that not everyone is sharing in this prosperity.\r\rNA\r\rNA\r\rNA\r\rNA\r\rNA\r\rNA\r\r0.000\r\r\r\r372\r\rAmy Klobuchar\r\rNA\r\rCandidate\r\rfemale\r\r1\r\r1\r\r11\r\rAnd Donald Trump just sits in the White House and gloats about what’s going on, when you have so many people that are having trouble affording college and having trouble affording their premiums.\r\rDonald Trump;\r\rNA\r\rNA\r\rNA\r\rNA\r\rNA\r\r0.025\r\r\r\r373\r\rAmy Klobuchar\r\rNA\r\rCandidate\r\rfemale\r\r1\r\r1\r\r12\r\rSo I do get concerned about paying for college for rich kids.\r\rNA\r\rNA\r\rNA\r\rNA\r\rNA\r\rNA\r\r0.375\r\r\r\r374\r\rAmy Klobuchar\r\rNA\r\rCandidate\r\rfemale\r\r1\r\r1\r\r12\r\rI do.\r\rNA\r\rNA\r\rNA\r\rNA\r\rNA\r\rNA\r\r0.000\r\r\r\r375\r\rAmy Klobuchar\r\rNA\r\rCandidate\r\rfemale\r\r1\r\r1\r\r12\r\rBut I think my plan is a good one.\r\rNA\r\rNA\r\rNA\r\rNA\r\rNA\r\rNA\r\r0.700\r\r\r\r\r5.1 The Candidate/Person Network\rFirst, I will visualize the candidate/person network. However, I should remind you that in the beginning of the democratic primary, many democratic candidates were competing against each other in the race and on the debate stage. If I were to visualize every individual that each candidate had ever in the network, the results would become unreadable. So, just like my last blog post, I selected a few democratic candidates to show my analysis.\nFurthermore, I will only highlight nodes corresponding to the top 6 democratic candidates and other interesting individuals, including Donald Trump and Barack Obama.\ninteresting_individuals \u0026lt;-\rc(\r\u0026quot;Bernie Sanders\u0026quot; ,\r\u0026quot;Elizabeth Warren\u0026quot; ,\r\u0026quot;Mike Bloomberg\u0026quot; ,\r\u0026quot;Pete Buttigieg\u0026quot; ,\r\u0026quot;Amy Klobuchar\u0026quot; ,\r\u0026quot;Joe Biden\u0026quot;,\r\u0026#39;Donald Trump\u0026#39;,\r\u0026#39;Barack Obama\u0026#39;\r)\rcustom_palette \u0026lt;-\rc(\r\u0026#39;Mike Bloomberg\u0026#39; = \u0026#39;#EDC948\u0026#39;,\r\u0026#39;Amy Klobuchar\u0026#39; = \u0026#39;#59A14F\u0026#39; ,\r\u0026#39;Joe Biden\u0026#39; = \u0026#39;#E15759\u0026#39;,\r\u0026#39;Pete Buttigieg\u0026#39; = \u0026#39;#B07AA1\u0026#39;,\r\u0026#39;Elizabeth Warren\u0026#39; = \u0026#39;#F28E2B\u0026#39;,\r\u0026#39;Bernie Sanders\u0026#39; = \u0026#39;#4E79A7\u0026#39; ,\r\u0026#39;Donald Trump\u0026#39; = \u0026#39;#BC3908\u0026#39;,\r\u0026#39;Barack Obama\u0026#39; = \u0026#39;#00afb9\u0026#39;,\r\u0026#39;Others\u0026#39; = \u0026#39;#540b0e\u0026#39;\r)\rpersons_graph_table \u0026lt;- candidates %\u0026gt;%\rseparate_rows(PERSON, sep = \u0026#39;;\u0026#39;) %\u0026gt;%\rfilter(speaker %in% interesting_individuals,PERSON != \u0026#39;\u0026#39;, debate %in% c(8, 9, 10)) %\u0026gt;%\rmutate(from = speaker, to = PERSON) %\u0026gt;%\rgroup_by(from, to) %\u0026gt;%\rsummarize(n_mentions = n(),\rmean_sent = mean(polarity_sentiment),\rsent =case_when(mean_sent \u0026lt; -0.01 ~ \u0026#39;Negative\u0026#39;,\rmean_sent \u0026gt; 0.01 ~ \u0026#39;Positive\u0026#39;,\rTRUE ~ \u0026#39;Neutral\u0026#39; )\r) %\u0026gt;%\rungroup() %\u0026gt;%\ras_tbl_graph() %\u0026gt;%\rmutate(interesting_individuals = if_else(name %in% interesting_individuals, name, \u0026#39;Others\u0026#39;))\redge_cols \u0026lt;- c(\u0026#39;#e63946\u0026#39;,\u0026#39;#f1faee\u0026#39;,\u0026#39;#457B9D\u0026#39;)\rggraph(persons_graph_table, layout = \u0026#39;kk\u0026#39;) + geom_edge_link(aes(edge_width = n_mentions,colour = sent )) +\rgeom_node_point(aes(color = interesting_individuals ),size = 5) + geom_node_label(aes(label = name,color = interesting_individuals),repel = TRUE,size= 8) + scale_color_manual(values = custom_palette) +\rlabs(title = \u0026#39;Who Mentioned Whom in the 2020 Democratic Debates?\u0026#39;) +\rscale_edge_colour_manual(values = edge_cols) \rIf you look at the graph carefully, you will notice three issues with this network. First of all, the sentiment scores do not necessarily indicate how a candidate thinks about that person. For instance, Bernie Sanders and Khashoggi’s edge is red (i.e. negative sentiment), but Bernie Sanders did not talk negatively about Khashoggi at all but rather how he was murdered. Secondly, there are several nodes in the network that belong to the same individual. For example, Bernie Sanders tends to address other candidates by their first names, but other (younger) candidates usually use the last name to address each other.\nThe third issue is that some nodes do not represent a person. The transcript dataset is full of errors, and many names are misspelled. Although Spacy is a very powerful library for NER, sometimes it gives us wrong results, and its detected named entities are not always correct. For this reason, we also need to perform a post-processing step in which we remove some incorrectly spelled words or replaced them with their correct forms. I found two ways to deal with these issues: 1. or we can use a name matching algorithm to match the partial names with its full name. This approach can be challenging because we need to have a list of all possible full names, which is only available for the candidates.2. We can manually find undesirable names and replace them with what we want.\n\r5.1 Matching candidate names\rA python library called fuzzywuzzycan help us match two strings based on different similarity criteria. However, before using this library, I transform the original dataset into a long dataframe where each row belongs to a pair of candidate-person (from-to), and I move it back to our python environment.\ncandidates_long \u0026lt;- candidates %\u0026gt;%\rfilter(PERSON != \u0026#39;\u0026#39;) %\u0026gt;%\rseparate_rows(PERSON, sep = \u0026#39;;\u0026#39;) head(candidates_long)\r\r\rA tibble: 6 x 16\r X1 speaker background type gender debate day order sentence PERSON ORG \r          \r1 372 Amy Kl~ NA Cand~ female 1 1 11 And Don~ “Dona~ \r2 372 Amy Kl~ NA Cand~ female 1 1 11 And Don~”\" \r3 384 Amy Kl~ NA Cand~ female 1 1 99 It’s so~ “Bara~ \r4 384 Amy Kl~ NA Cand~ female 1 1 99 It’s so~”\" \r5 422 Amy Kl~ NA Cand~ female 1 1 329 But the~ “Dona~ \r6 422 Amy Kl~ NA Cand~ female 1 1 329 But the~”\" \r# … with 5 more variables: GPE , NORP , LAW , LOC ,\r# polarity_sentiment \ncandidates_long = r.candidates_long\rLet’s look at the full names of democratic candidates.\nimport pandas as pd\rcandidate_lists = pd.unique(candidates_long.speaker)\rprint(candidate_lists)\rI define a python function called match_namesthat uses process.extractOne function to select the first matched named entity with at least 80 percent similarity to a candidate’s full name. The matched names are stored in a separate column called dem_candidate_full_name.\nfrom fuzzywuzzy import fuzz from fuzzywuzzy import process \rdef match_names(name):\rtry:\rreturn process.extractOne(name, candidate_lists,score_cutoff = 80)[0] except:\rreturn None\rcandidates_long[\u0026#39;dem_candidate_full_name\u0026#39;] = candidates_long.PERSON.apply(lambda x: match_names(x) )\rNow we can return to R and continue our analysis.\ncandidates_long \u0026lt;- py$candidates_long\rglimpse(candidates_long)\rA word of caution\rWe need to be very careful with the results of the name-matching algorithm. There are too many politicians with the name ‘John’ and a John might refer to “John McCain” or “John Bolton” not the candidate “John Hickenlooper”. So, as a post-processing step, I manually explore the dataset to correct the few mistakes that the matching algorithm had made.\ncandidates_long \u0026lt;- candidates_long %\u0026gt;%\rmutate(PERSON = if_else(\r!is.na(dem_candidate_full_name),\rdem_candidate_full_name,\rPERSON),\rPERSON = case_when(PERSON == \u0026#39;John Hickenlooper\u0026#39; \u0026amp; str_detect(sentence,\u0026#39;McCain\u0026#39;) ~ \u0026#39;John McCain\u0026#39;,\rPERSON == \u0026#39;John Hickenlooper\u0026#39; \u0026amp; str_detect(sentence,\u0026#39;Bolton\u0026#39;) ~ \u0026#39;John Bolton\u0026#39;,\rPERSON == \u0026#39;John Delaney\u0026#39; \u0026amp; speaker == \u0026#39;Joe Biden\u0026#39; ~\u0026#39;John McCain\u0026#39;,\rPERSON == \u0026#39;John Delaney\u0026#39; \u0026amp; speaker == \u0026#39; Amy Klobuchar\u0026#39; ~\u0026#39;John McCain\u0026#39;,\rTRUE ~ PERSON)\r) \r\r5.2 Manual name correction\rWe have a better dataset now, but there are still a lot of inaccurate named entities or inconsistencies in the dataset. Let’s start by removing named entities that do not correspond with a real person.\nnon_person \u0026lt;-\rc(\r\u0026#39;y adema\u0026#39; ,\r\u0026#39;Appalachia\u0026#39; ,\r\u0026#39;AUMF\u0026#39; ,\r\u0026#39;bias\u0026#39;,\r\u0026#39;nondisclosur\u0026#39; ,\r\u0026#39;Mathew 25\u0026#39;,\r\u0026#39;Idlib\u0026#39;,\r\u0026#39;ye\u0026#39;,\r\u0026#39;Everytown\u0026#39;,\r\u0026#39;Kurd\u0026#39;,\r\u0026#39;Roe V.\u0026#39;,\r\u0026#39;Wade\u0026#39;,\r\u0026#39;Trumpism\u0026#39;,\r\u0026#39;Casey\u0026#39;,\r\u0026#39;brown\u0026#39;,\r\u0026#39;Grandpa\u0026#39;,\r\u0026#39;Dad\u0026#39;,\r\u0026quot;Josh\u0026quot;,\r\u0026#39;Uighurs\u0026#39;,\r\u0026#39;Roe\u0026#39;,\r\u0026#39;PolitiFact\u0026#39;,\r\u0026#39;Latinx\u0026#39;,\r\u0026#39;Brady\u0026#39;,\r\u0026#39;pre-K.\u0026#39;,\r\u0026#39;Brady Bill\u0026#39;,\r\u0026#39;pro-Israel\u0026#39;,\r\u0026#39;ho\u0026#39;,\r\u0026#39;Dreamer\u0026#39;\r)\rWe have another problem left. Some individuals were mentioned in different ways, and we have several nodes for them in the graph. To solve this issue, I use str_detect function from stringr package to manually modify them names. I must say this was the most tedious and time-consuming part of my analysis!\npersons_graph_table \u0026lt;- candidates_long %\u0026gt;%\rfilter(speaker %in% interesting_individuals,\r!PERSON %in% non_person,\rnchar(PERSON)\u0026gt;1) %\u0026gt;%\rdplyr::rowwise() %\u0026gt;%\rmutate(dem_candidate_full_name = as.character(dem_candidate_full_name)) %\u0026gt;%\rmutate(from = speaker, to = PERSON) %\u0026gt;%\rmutate(\rto = case_when(\rto %in% c(\r\u0026#39;Donald\u0026#39;,\r\u0026#39;Donald Trump\u0026#39;,\r\u0026#39;Donald trump\u0026#39;,\r\u0026#39;Trump\u0026#39;,\r\u0026#39;President Trump\u0026#39;,\r\u0026quot;Donald Trump\u0026#39;s\u0026quot;\r) ~ \u0026#39;Donald Trump\u0026#39;,\rto %in% c(\u0026#39;Hillar\u0026#39;,\r\u0026#39;Clinton\u0026#39;,\r\u0026#39;Hillary\u0026#39;) ~ \u0026#39;Hillary Clinton\u0026#39;,\rto %in% c(\u0026#39;Obama\u0026#39;,\r\u0026#39;Barack\u0026#39;) ~ \u0026#39;Barack Obama\u0026#39;,\rstr_detect(to, \u0026#39;Trump\u0026#39;) ~ \u0026#39;Donald Trump\u0026#39;,\rstr_detect(to, \u0026#39;Vind\u0026#39;) ~ \u0026#39;Vindman\u0026#39;,\rstr_detect(to, \u0026#39;Assad\u0026#39;) ~ \u0026#39;Assad\u0026#39;,\rstr_detect(to, \u0026#39;McCarthy\u0026#39;) ~ \u0026#39;McCarthy\u0026#39;,\rstr_detect(to, \u0026#39;Trudeau\u0026#39;) ~ \u0026#39;Justin Trudeau\u0026#39;,\rstr_detect(to, \u0026#39;Bannon\u0026#39;) ~ \u0026#39;Steve Bannon\u0026#39;,\rstr_detect(to, \u0026#39;Netanyahu\u0026#39;) ~ \u0026#39;Netanyahu\u0026#39;,\rstr_detect(to, \u0026#39;Martin Luther\u0026#39;) ~ \u0026#39;Martin Luther King\u0026#39;,\rstr_detect(to, \u0026#39;Mandela\u0026#39;) ~ \u0026#39;Mandela\u0026#39;,\rstr_detect(to, \u0026#39;Xi\u0026#39;) ~ \u0026#39;Xi Jinping\u0026#39;,\rstr_detect(to, \u0026#39;Putin\u0026#39;) ~ \u0026#39;Putin\u0026#39;,\rstr_detect(to, \u0026#39;Mitch\u0026#39;) ~ \u0026#39;Mitch Mcconnell\u0026#39;,\rstr_detect(to, \u0026#39;Lindsey\u0026#39;) ~ \u0026#39;Lindsey Graham\u0026#39;,\rstr_detect(to, \u0026#39;Romney\u0026#39;) ~ \u0026#39;Mitt Romney\u0026#39;,\rstr_detect(to, \u0026#39;George\u0026#39;) ~ \u0026#39;George Bush\u0026#39;,\rstr_detect(to, \u0026#39;Bush\u0026#39;) ~ \u0026#39;George Bush\u0026#39;,\rstr_detect(to, \u0026#39;Turner\u0026#39;) ~ \u0026#39;Nina Turner\u0026#39;,\rstr_detect(to, \u0026#39;Clyburn\u0026#39;) ~ \u0026#39;Jim Clyburn\u0026#39;,\rstr_detect(to, \u0026#39;Cheney\u0026#39;) ~ \u0026#39;Dick Cheney\u0026#39;,\rstr_detect(to, \u0026#39;Shaheen\u0026#39;) ~ \u0026#39;Jeanne Shaheen\u0026#39;,\rstr_detect(to, \u0026#39;Hart\u0026#39;) ~ \u0026#39;Quentin Hart\u0026#39;,\rstr_detect(to, \u0026#39;Cokie\u0026#39;) ~ \u0026#39;Cokie Roberts\u0026#39;,\rstr_detect(to, \u0026#39;Kelly\u0026#39;) ~ \u0026#39;Laura Kelly\u0026#39;,\rstr_detect(to, \u0026#39;Berry\u0026#39;) ~ \u0026#39;Seth Berry\u0026#39;,\rstr_detect(to, \u0026#39;Grassley\u0026#39;) ~ \u0026#39;Chuck Grassley\u0026#39;,\rstr_detect(to, \u0026#39;Tommy\u0026#39;) ~ \u0026#39;Tom Steyer\u0026#39;,\rstr_detect(to, \u0026#39;Pelosi\u0026#39;) ~ \u0026#39;Nancy Pelosi\u0026#39;,\rstr_detect(to, \u0026#39;Kim\u0026#39;) ~ \u0026#39;Kim Jong-un\u0026#39;,\rstr_detect(to, \u0026#39;Pence\u0026#39;) ~ \u0026#39;Mike Pence\u0026#39;,\rstr_detect(to, \u0026#39;Schatz\u0026#39;) ~ \u0026#39;Brian Schatz\u0026#39;,\rstr_detect(to, \u0026#39;Gates\u0026#39;) ~ \u0026#39;Robert Gates\u0026#39;,\rstr_detect(to, \u0026#39;Jill\u0026#39;) ~ \u0026#39;Jill Biden\u0026#39;,\rstr_detect(to, \u0026#39;Casey Jo\u0026#39;) ~ \u0026#39;Casey Jo\u0026#39;,\rstr_detect(to, \u0026#39;Franklin\u0026#39;) |\rstr_detect(to, \u0026#39;FDR\u0026#39;) ~ \u0026#39;Franklin D. Roosevelt\u0026#39;,\rstr_detect(to, \u0026#39;Welch\u0026#39;) ~ \u0026#39;Joseph Welch\u0026#39;,\rstr_detect(to, \u0026#39;Beau\u0026#39;) ~ \u0026#39;Beau Biden\u0026#39;,\rstr_detect(to, \u0026#39;Rudy Giuliani\u0026#39;) ~ \u0026#39;Rudy Giuliani\u0026#39;,\rstr_detect(to, \u0026#39;Bolton\u0026#39;) ~ \u0026#39;John Bolton\u0026#39;,\rstr_detect(to, \u0026#39;McCain\u0026#39;) ~ \u0026#39;John McCain\u0026#39;,\rstr_detect(to, \u0026#39;Truman\u0026#39;) ~ \u0026#39;Harry Truman\u0026#39;,\rstr_detect(to, \u0026#39;Dunford\u0026#39;) ~ \u0026#39;Joe Dunford\u0026#39;,\rstr_detect(to, \u0026#39;Breyer\u0026#39;) ~ \u0026#39;Justice Breyer\u0026#39;,\rstr_detect(to, \u0026#39;Cindy\u0026#39;) ~ \u0026#39;Cindy McCain\u0026#39;,\rto == \u0026#39;Dick\u0026#39; ~ \u0026#39;Uncle Dick\u0026#39;,\rto == \u0026#39;Charles\u0026#39; ~ \u0026#39;Charles Fried\u0026#39;,\rto == \u0026#39;JFK\u0026#39; |\r(to == \u0026#39;Kennedy\u0026#39; \u0026amp; speaker == \u0026#39;Joe Biden\u0026#39;) ~ \u0026#39;John F. Kennedy\u0026#39;,\rto == \u0026#39;Kennedy\u0026#39; \u0026amp; speaker == \u0026#39;Amy Klobuchar\u0026#39; ~ \u0026#39;Ted Kennedy\u0026#39;,\rto %in% c(\u0026#39;Joey\u0026#39;) ~ \u0026#39;Himself\u0026#39;,\rto %in% c(\r\u0026#39;Ady\u0026#39;,\r\u0026#39;Carl\u0026#39;,\r\u0026#39;Ady Barkan\u0026#39;,\r\u0026#39;Derek\u0026#39;,\r\u0026#39;Mark\u0026#39;,\r\u0026#39;Salvador\u0026#39;,\r\u0026#39;Rachael\u0026#39;,\r\u0026#39;Nicole\u0026#39;\r) ~ \u0026#39;American Constituents\u0026#39;,\rto %in% c(\r\u0026#39;David\u0026#39;,\r\u0026#39;Chuck\u0026#39;,\r\u0026#39;Wolf\u0026#39;,\r\u0026#39; Wolf\u0026#39;,\r\u0026#39;Margaret\u0026#39;,\r\u0026#39;Brianne\u0026#39;,\r\u0026#39;Adam\u0026#39;,\r\u0026#39;Jake\u0026#39;,\r\u0026#39;Norah\u0026#39;,\r\u0026#39;Judy\u0026#39;,\r\u0026#39;Gayle\u0026#39;,\r\u0026#39;Dana\u0026#39;,\r\u0026#39;Jorge - it\u0026#39;,\r\u0026#39;Lester\u0026#39;,\r\u0026#39;Rachel\u0026#39;\r) ~ \u0026#39;Moderator\u0026#39;,\rTRUE ~ to\r)\r) %\u0026gt;%\rgroup_by(from, to) %\u0026gt;%\rsummarize(n_mentions = n()) %\u0026gt;%\rungroup() %\u0026gt;%\ras_tbl_graph() %\u0026gt;%\rmutate(interesting_individuals = if_else(name %in% interesting_individuals, name, \u0026#39;Others\u0026#39;)) \rFinally, we can visualize the network with modified node names.\nedge_cols \u0026lt;- c(\u0026#39;#e63946\u0026#39;, \u0026#39;#f1faee\u0026#39;, \u0026#39;#457B9D\u0026#39;)\rggraph(persons_graph_table, layout = \u0026#39;nicely\u0026#39;) +\rgeom_edge_link(aes(edge_width = n_mentions, alpha = n_mentions), color = \u0026#39;#540b0e\u0026#39;) +\rgeom_node_point(aes(color = interesting_individuals),size = 6) +\rgeom_node_label(\raes(label = name, color = interesting_individuals),\rrepel = TRUE,\rsize = 8,\rlabel.r = 0.4,\rcheck_overlap = TRUE\r) +\rscale_color_manual(values = custom_palette) +\rlabs(title = \u0026#39;Individuals Mentioned by Top Democratic Candidates During the Democratic Primary Debates\u0026#39;,\rsubtitle = \u0026#39;This graph shows which individuals or politicians were mentioned by top 6 democratic candidates over the course of first ten priamary debates.\u0026#39;,\rcaption = \u0026#39;Visualization: @m_cnakhaee\\n\\n Source: https://github.com/favstats/demdebates2020\u0026#39;) \r\r5.3 Candidates interaction\rIn the last sections, I explained how the top 6 remaining candidates mentioned other individuals during their speeches on the debate stage. However, with a little bit of modification to our previous chunk of code, we can extend the analysis and investigate how all democratic candidates interacted with each other over the course of 10 debates.\n#The name of all candidaes\rall_candidates \u0026lt;- candidates_long %\u0026gt;%\rdistinct(speaker) %\u0026gt;%\rpull()\rcandidates_graph_table \u0026lt;- candidates_long %\u0026gt;%\rfilter(!is.na(dem_candidate_full_name),\rdem_candidate_full_name == PERSON) %\u0026gt;%\rrowwise() %\u0026gt;%\rmutate(debate = as.factor(debate)) %\u0026gt;%\rmutate(dem_candidate_full_name = as.character(dem_candidate_full_name)) %\u0026gt;%\rmutate(from = speaker, to = dem_candidate_full_name) %\u0026gt;%\rgroup_by(from, to, debate) %\u0026gt;%\rsummarize(n_mentions = n()) %\u0026gt;%\rungroup() %\u0026gt;%\ras_tbl_graph(directed = TRUE) %\u0026gt;%\rmutate(interesting_individuals = if_else(name %in% interesting_individuals, name, \u0026#39;Others\u0026#39;)) %\u0026gt;%\ractivate(nodes) %\u0026gt;%\rmutate(bet_cent = centrality_betweenness(),\rdeg_cent = centrality_degree())\r# preparing the circular layout for the network\r# Credit to https://www.timlrx.com/2018/10/14/visualising-networks-in-asoiaf-part-ii/ for helping me with the circular layout\rfull_layout \u0026lt;-\rcreate_layout(graph = candidates_graph_table,\rlayout = \u0026quot;linear\u0026quot;,\rcircular = T)\rxmin \u0026lt;- min(full_layout$x)\rxmax \u0026lt;- max(full_layout$x)\rymin \u0026lt;- min(full_layout$y)\rymax \u0026lt;- max(full_layout$y)\rggraph(\rfull_layout,\rlayout = \u0026#39;manual\u0026#39;,\rx = x,\ry = y,\rcircular = TRUE\r) +\rgeom_edge_arc(aes(edge_width = n_mentions,\ralpha = n_mentions,),\rcolour = \u0026#39;#540b0e\u0026#39;,) +\rgeom_node_point(aes(color = interesting_individuals, size = deg_cent + 40)) +\rgeom_node_text(\raes(\rlabel = name,\rcolor = interesting_individuals,\rx = x * 1.15,\ry = y * 1.15,\rangle = ifelse(\ratan(-(x / y)) * (180 / pi) \u0026lt; 0,\r90 + atan(-(x / y)) * (180 / pi),\r270 + atan(-x / y) * (180 / pi)\r)\r),\rsize = 8\r) +\rscale_color_manual(values = custom_palette) +\rlabs(title = \u0026#39;The Network of Interactions Among Democratic Candidates During Democratic Primary Debates\u0026#39;,\r#subtitle = \u0026#39;This graph shows how democtratic candidates mentioned other candidates on the debate stage.\u0026#39;,\rcaption = \u0026#39;Visualization: @m_cnakhaee\\n\\n Source: https://github.com/favstats/demdebates2020\u0026#39;) +\rexpand_limits(x = c(xmin - 0.2, xmax + 0.2),\ry = c(ymin - 0.2, ymax + 0.2)) \rThe results are self-explanatory and satisfying. One also can make an animation and show the network over time.\nNow, let’s repeat the same steps and visualize the network for other types of named entities.\n\r5.4 Organization and companies named entities\rnon_org \u0026lt;- c(\u0026#39;Trump\u0026#39;,\u0026#39;Vindmen\u0026#39;,\u0026#39;a New Yorker\u0026#39;,\u0026#39;Title\u0026#39;,\u0026#39;Obama\u0026#39;,\u0026quot;Donald Trump\u0026#39;s\u0026quot;,\u0026#39;Bernie\u0026#39;,\u0026#39;state\u0026#39;,\u0026#39;Court\u0026#39;,\u0026#39;Ours\u0026#39;,\u0026#39;Education\u0026#39;)\rnon_org_laws \u0026lt;- c(\u0026#39;Green New Deal\u0026#39;,\u0026#39;Federal Controlled Substance Act\u0026#39;)\rorg_graph_table \u0026lt;- candidates %\u0026gt;%\rseparate_rows(ORG, sep = \u0026#39;;\u0026#39;) %\u0026gt;%\rfilter(!is.na(ORG)) %\u0026gt;%\rmutate(ORG = str_remove_all(ORG, \u0026#39;the \u0026#39;),\rORG = str_remove_all(ORG, \u0026#39;this \u0026#39;),) %\u0026gt;%\rfilter(\rspeaker %in% interesting_individuals,!ORG %in% non_org,!ORG %in% non_org_laws,\rdebate %in% c(6, 7, 8, 9, 10),\rnchar(ORG)\u0026gt;1\r) %\u0026gt;%\rmutate(from = speaker, to = ORG) %\u0026gt;%\rgroup_by(from, to) %\u0026gt;%\rsummarize(n_mentions = n()) %\u0026gt;%\rungroup() %\u0026gt;%\rmutate(\rto = case_when(\rto %in% c(\u0026#39;United Nations\u0026#39;,\r\u0026#39;U.N.\u0026#39;,\r\u0026#39;UN\u0026#39;) ~ \u0026#39;United Nations\u0026#39;,\rstr_detect(to, \u0026#39;Department\u0026#39;) \u0026amp;\rstr_detect(to, \u0026#39;State\u0026#39;) ~ \u0026#39;Department of State\u0026#39;,\rstr_detect(to, \u0026#39;Department\u0026#39;) \u0026amp;\rstr_detect(to, \u0026#39;Defence\u0026#39;) ~ \u0026#39;Department of State\u0026#39;,\rstr_detect(to, \u0026#39;Supreme\u0026#39;) \u0026amp;\rstr_detect(to, \u0026#39;Court\u0026#39;) ~ \u0026#39;Supreme Court\u0026#39;,\rstr_detect(to, \u0026#39;Treasury\u0026#39;) ~ \u0026#39;Department of the Treasury\u0026#39;,\rstr_detect(to, \u0026#39;Unitetd\u0026#39;) \u0026amp;\rstr_detect(to, \u0026#39;State\u0026#39;) ~ \u0026#39;United State\u0026#39;,\rstr_detect(to, \u0026#39;Yale\u0026#39;) ~ \u0026#39;Yale\u0026#39;,\rTRUE ~ to\r)\r) %\u0026gt;%\ras_tbl_graph() %\u0026gt;%\rmutate(interesting_individuals = if_else(name %in% interesting_individuals, name, \u0026#39;Others\u0026#39;))\rggraph(org_graph_table, layout = \u0026#39;nicely\u0026#39;) +\rgeom_edge_link(aes(edge_width = n_mentions,alpha=n_mentions),\rcolour = \u0026#39;#540b0e\u0026#39;) +\rgeom_node_point(aes(color = interesting_individuals), size = 5) +\rgeom_node_label(aes(label = name, color = interesting_individuals),\rrepel = TRUE,\rsize = 7) +\rscale_color_manual(values = custom_palette) +\rlabs(title = \u0026#39;Organizations and Institutions Mentioned by Top Democratic Candidates During the Debates\u0026#39;,\rsubtitle = \u0026#39;This plot shows which organizations and institutions were mentioned by top democratic candidates during the last 5 debates.\u0026#39;,\rcaption = \u0026#39;\u0026#39;) \r\r5.5 The network of named entities for countries and cities\rgpe_graph_table \u0026lt;- candidates %\u0026gt;%\rseparate_rows(GPE, sep = \u0026#39;;\u0026#39;) %\u0026gt;%\rfilter(!is.na(GPE)) %\u0026gt;%\rmutate(GPE = str_remove_all(GPE, \u0026#39;the \u0026#39;),\rGPE = str_remove_all(GPE, \u0026#39;this \u0026#39;)) %\u0026gt;%\rfilter(speaker %in% interesting_individuals,\rdebate %in% c(6, 7, 8, 9, 10)) %\u0026gt;%\rmutate(from = speaker, to = GPE) %\u0026gt;%\rgroup_by(from, to) %\u0026gt;%\rsummarize(n_mentions = n()) %\u0026gt;%\rungroup() %\u0026gt;%\ras_tbl_graph() %\u0026gt;%\rmutate(interesting_individuals = if_else(name %in% interesting_individuals, name, \u0026#39;Others\u0026#39;)) \rggraph(gpe_graph_table, layout = \u0026#39;nicely\u0026#39;) +\rgeom_edge_link(aes(edge_width = n_mentions, alpha = n_mentions),\rcolour = \u0026#39;#540b0e\u0026#39;) +\rgeom_node_point(aes(color = interesting_individuals), size = 5) +\rgeom_node_label(aes(label = name, color = interesting_individuals),\rrepel = TRUE,\rsize = 9) +\rscale_color_manual(values = custom_palette) +\rlabs(title = \u0026#39;Countries, Cities and States Mentioned by Top Democratic Candidates During the Last Five Primary Debates\u0026#39;,\rsubtitle = \u0026#39;\u0026#39;,\rcaption = \u0026#39;\u0026#39;) \r\r5.6 The network of named entities for laws\rnon_law \u0026lt;-\rc(\u0026#39;the ZIP Code\u0026#39;, \u0026quot;\u0026quot;)\rlaw_graph_table \u0026lt;- candidates %\u0026gt;%\rseparate_rows(LAW, sep = \u0026#39;;\u0026#39;) %\u0026gt;%\rfilter(!is.na(LAW)) %\u0026gt;%\rmutate(LAW = str_remove_all(LAW, \u0026#39;the \u0026#39;)) %\u0026gt;%\rfilter(speaker %in% interesting_individuals,!LAW %in% non_law) %\u0026gt;%\rmutate(from = speaker, to = LAW) %\u0026gt;%\rgroup_by(from, to) %\u0026gt;%\rsummarize(n_mentions = n()) %\u0026gt;%\rungroup() %\u0026gt;%\rmutate(\rto = case_when(\rstr_detect(to , \u0026#39;Constitution\u0026#39;) ~ \u0026#39;Constitution\u0026#39;,\rstr_detect(to , \u0026#39;Roe\u0026#39;) ~ \u0026#39;Roe V. Wade\u0026#39;,\rstr_detect(to , \u0026#39;War Powers Act\u0026#39;) ~ \u0026#39;War Powers Act\u0026#39;,\rstr_detect(to , \u0026#39;New START\u0026#39;) ~ \u0026#39;New START Treaty\u0026#39;,\rTRUE ~ to\r)\r) %\u0026gt;%\ras_tbl_graph() %\u0026gt;%\rmutate(interesting_individuals = if_else(name %in% interesting_individuals, name, \u0026#39;Others\u0026#39;))\rggraph(law_graph_table, layout = \u0026#39;nicely\u0026#39;) +\rgeom_edge_link(aes(edge_width = n_mentions, alpha = n_mentions), colour = \u0026#39;#540b0e\u0026#39;) +\rgeom_node_point(aes(color = interesting_individuals), size = 5) +\rgeom_node_label(aes(label = name, color = interesting_individuals),\rrepel = TRUE,\rsize = 7) +\rscale_color_manual(values = custom_palette) +\rlabs(title = \u0026#39;Laws Mentioned by Top Democratic Candidates During the First Ten Primary Debates\u0026#39;,\rsubtitle = \u0026#39;\u0026#39;,\rcaption = \u0026#39;\u0026#39;) \r\r5.7 The network of named entities for nationalities, religious or political groups\rnon_norp \u0026lt;- c(\u0026#39;Coronavirus\u0026#39;, \u0026#39;\u0026#39;)\rnorp_graph_table \u0026lt;- candidates %\u0026gt;%\rseparate_rows(NORP, sep = \u0026#39;;\u0026#39;) %\u0026gt;%\rfilter(!is.na(NORP)) %\u0026gt;%\rmutate(NORP = singularize(NORP)) %\u0026gt;%\rfilter(speaker %in% interesting_individuals,!NORP %in% non_norp,\rdebate %in% c(6, 7, 8, 9, 10)) %\u0026gt;%\rmutate(from = speaker, to = NORP) %\u0026gt;%\rgroup_by(from, to) %\u0026gt;%\rsummarize(n_mentions = n()) %\u0026gt;%\rungroup() %\u0026gt;%\rmutate(\rto = case_when(\rstr_detect(to, \u0026#39;African\u0026#39;) \u0026amp;\rstr_detect(to, \u0026#39;American\u0026#39;) ~ \u0026#39;African-American\u0026#39;,\rstr_detect(to, \u0026#39;republican\u0026#39;) ~ \u0026#39;Republican\u0026#39;,\rstr_detect(to, \u0026#39;Democrat\u0026#39;) ~ \u0026#39;Democrat\u0026#39;,\rstr_detect(to, \u0026#39;Jew\u0026#39;) ~ \u0026#39;Jew\u0026#39;,\rstr_detect(to, \u0026#39;Palestinian\u0026#39;) ~ \u0026#39;Palestinian\u0026#39;,\rTRUE ~ to\r)\r) %\u0026gt;%\ras_tbl_graph() %\u0026gt;%\rmutate(interesting_individuals = if_else(name %in% interesting_individuals, name, \u0026#39;Others\u0026#39;))\rggraph(norp_graph_table, layout = \u0026#39;nicely\u0026#39;) +\rgeom_edge_link(aes(edge_width = n_mentions, alpha = n_mentions), colour = \u0026#39;#540b0e\u0026#39;) +\rgeom_node_point(aes(color = interesting_individuals), size = 5) +\rgeom_node_label(aes(label = name, color = interesting_individuals),\rrepel = TRUE,\rsize = 10) +\rscale_color_manual(values = custom_palette) +\rlabs(title = \u0026#39;Nationalities, religious or Political Groups Mentioned by Top Democratic Candidates During the Last Five Primary Debates\u0026#39;,\rsubtitle = \u0026#39;\u0026#39;,\rcaption = \u0026#39;\u0026#39;) \r##Resources:\rA very useful place to learn more how spacy works the spacy’s online course by one of its founders and developers.\r[1] https://course.spacy.io/en/\n[2] https://www.youtube.com/watch?v=IqOJU1-_Fi0\u0026amp;t=676s\nThere is\rhttp://www.favstats.eu/post/demdebates/\n\r\r","date":1583625600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1583622658,"objectID":"2130b6fd38f7ff296c9f05a3c5fa7131","permalink":"/post/2020-03-08-analayzing-the-2020-democratic-presidential-debates-part-2/","publishdate":"2020-03-08T00:00:00Z","relpermalink":"/post/2020-03-08-analayzing-the-2020-democratic-presidential-debates-part-2/","section":"post","summary":"1. Introduction\rMany of us could not watch every 2020 Democratic Primary debate. It was important for some of us to know what happened during the debates. In my case, I was reading about what happened in debates in some online newspapers, or I watched a highlight of a debate on Youtube the next day. However, they only give a summary of a debate or just broadcast a portion of debates that includes a heated exchange of opinions between candidates.","tags":["NLP","Python","R","social network analysis"],"title":"Analyzing the 2020 Democratic Presidential Debates - Part 2","type":"post"},{"authors":[],"categories":["NLP","R"],"content":"\r\r\rI am not a US citizen, nor have I been to the United States, but that does not mean that I should not care about the result of the US presidential election. The outcome of the election plays an important role in my life and almost everyone’s else around the world. So, I have been following the US politics for a few years.\nI consider everything and every issue around me as a data science problem and an opportunity to use data science. The US presidential election is not an exception, and a few weeks ago, I was wondering how I can use data science techniques to analyze the presidential election in the U.S and the Democratic Primary elections. Luckily, a few days later, I found an amazing R package on Twitter which contains the transcripts of speeches given by all candidates in the Democratic Party’s debates.\nNow that I had access to a dataset, it was time to think about how I should use it and how I can extract useful knowledge from it. There are many possibilities for studying the debates’ transcript, but I was interested in investigating 3 aspects of the debates and candidates:\nDetermining the most eloquent presidential candidate.\rSentiment analysis of the transcripts to find out who used positive or most negative words on the stage.\rNetwork analysis of the transcripts.\r\rIn this post, I will explain how I used R and the tidytext package to investigate the first two points. Discussing how I approached needs a much longer and separate post, so I will write about here.\nWho is the most eloquent candidate?\rEveryone agrees that Donald Trump only uses a basic English vocabulary in his speeches and tweets, and he is not the most eloquent president in the US history. But what about his future challenger from the democratic party and how skillful his opponents are with words? For this reason, I analyzed the transcripts from this point of view to determine how good they are with words.\nAn eloquent person has gained a rich vocabulary and uses a wide range of complex words in his/her speeches. An inarticulate person has a limited vocabulary and uses simple and everyday words in his/her writings or conversations. Ideally, I think we can measure eloquence by counting the number of unique words and the number of sophisticated words that a person uses.\nHowever, I could not find a dataset of English words along with their perceived complexity. So, to measure the eloquence of the presidential candidates, I defined two other metrics that I hope can serve as an approximation to the truth:\nVocabulary size: The ratio of unique words that a candidate used in his/her debate speech.\rVocabulary complexity: The ratio of stop-words (words that are very common and rarely add much value to the content). Intuitively, a lower ratio of stopword usage by a candidate shows that the candidate is more articulate.\r\rI use the Tidytext library and its stopword list to compute my defined metrics. Note that there are several stopword lexicons out there, and the choice of lexicon can slightly change the outcome.\nIt’s time to start the analysis itself, but before that I need to import a few libraries and set and customize the theme that I am going to use for visualization.\nlibrary(readability)\rlibrary(syllable)\rlibrary(demdebates2020)\rlibrary(tidytext)\rlibrary(tidyverse)\rlibrary(gghighlight)\rlibrary(ggthemes)\rlibrary(kableExtra)\r#set a default theme for visualization\rtheme_set(theme_fivethirtyeight())\r#customize the default theme theme_update(legend.position = \u0026#39;none\u0026#39;,\rtext = element_text(family = \u0026#39;Montserrat\u0026#39;),\rplot.title = element_text(family = \u0026#39;Montserrat\u0026#39;, face = \u0026quot;bold\u0026quot;,size = 25, margin = margin(0, 0, 20, 0)),\raxis.text.x = element_blank(),\raxis.text.y = element_text(family = \u0026#39;Montserrat\u0026#39;, face = \u0026quot;bold\u0026quot;,size = 15, margin = margin(0, 0, 20, 0)),\rpanel.spacing = unit(2, \u0026quot;points\u0026quot;),\raxis.title.x = element_blank(),\raxis.title.y = element_blank())\rcustom_palette \u0026lt;-c(\r\u0026#39;Mike Bloomberg\u0026#39; = \u0026#39;#EDC948\u0026#39;,\r\u0026#39;Amy Klobuchar\u0026#39; = \u0026#39;#59A14F\u0026#39; ,\r\u0026#39;Joe Biden\u0026#39; = \u0026#39;#4E79A7\u0026#39;,\r\u0026#39;Pete Buttigieg\u0026#39; = \u0026#39;#B07AA1\u0026#39;,\r\u0026#39;Elizabeth Warren\u0026#39; = \u0026#39;#F28E2B\u0026#39;,\r\u0026#39;Bernie Sanders\u0026#39; = \u0026#39;#E15759\u0026#39; )\rThe field of the democratic primary election is full of candidates. So, for the sake of simplicity and clarity, I am going to analyze candidates that are still in the race (as of February 23rd) and were present in the last two democratic debate. It means that I will compare six democratic candidates including Bernie Sanders, Elizabeth Warren, Mike Bloomberg, Pete Buttigieg, Amy Klobuchar and Joe Biden.\nspeakers \u0026lt;- debates %\u0026gt;%\rfilter(!is.na(speech), type == \u0026#39;Candidate\u0026#39; ,debate == 9) %\u0026gt;%\rdistinct(speaker) %\u0026gt;%\rpull(speaker)\rspeakers\r## [1] \u0026quot;Bernie Sanders\u0026quot; \u0026quot;Elizabeth Warren\u0026quot; \u0026quot;Mike Bloomberg\u0026quot; \u0026quot;Pete Buttigieg\u0026quot; ## [5] \u0026quot;Amy Klobuchar\u0026quot; \u0026quot;Joe Biden\u0026quot;\rreadability_scores \u0026lt;- debates %\u0026gt;%\rfilter(!is.na(speech), type == \u0026#39;Candidate\u0026#39;) %\u0026gt;%\rwith(readability(speech,list(speaker,debate))) readability_scores %\u0026gt;% filter(speaker %in% speakers) %\u0026gt;% pivot_longer(Flesch_Kincaid:Average_Grade_Level,names_to = \u0026#39;readability_measure\u0026#39;,values_to = \u0026#39;value\u0026#39;) %\u0026gt;% ggplot(aes(x = debate, y = value,color = speaker)) +\rgeom_point(size = 6,alpha = 0.7)+\rgeom_line(size = 2,alpha = 0.9) +\rscale_color_manual(values = custom_palette) +\rlabs(color = \u0026#39;\u0026#39;) +\rfacet_wrap(~readability_measure,scales = \u0026#39;free_y\u0026#39;) +\rtheme(legend.position = \u0026#39;top\u0026#39;)\rBefore computing my desirable metrics, I should tokenize and transform the transcript into a tidy format (one word per row). After that, I will create a logical variable called is_stop_word to determine whether a word is stopword or not.\ndebate_vocab_df \u0026lt;- debates %\u0026gt;%\rfilter(!is.na(speech), type == \u0026#39;Candidate\u0026#39;,speaker %in% speakers) %\u0026gt;%\runnest_tokens(word, speech) %\u0026gt;%\rmutate(is_stop_word = word %in% stop_words$word) %\u0026gt;%\rgroup_by(speaker) %\u0026gt;%\rsummarize(stop_word_ratio = sum(is_stop_word) / n(),\rvocab_size = n_distinct(word)/ n()) %\u0026gt;% arrange(stop_word_ratio) #show the output head(debate_vocab_df) %\u0026gt;% kable() %\u0026gt;%\rkable_styling(bootstrap_options = c(\u0026quot;striped\u0026quot;, \u0026quot;hover\u0026quot;, \u0026quot;condensed\u0026quot;, \u0026quot;responsive\u0026quot;))\r\r\rspeaker\r\rstop_word_ratio\r\rvocab_size\r\r\r\r\r\rBernie Sanders\r\r0.6588343\r\r0.0882325\r\r\r\rElizabeth Warren\r\r0.6942596\r\r0.0911883\r\r\r\rPete Buttigieg\r\r0.6978231\r\r0.1147498\r\r\r\rAmy Klobuchar\r\r0.7189251\r\r0.1027148\r\r\r\rJoe Biden\r\r0.7195672\r\r0.0842458\r\r\r\rMike Bloomberg\r\r0.7415574\r\r0.2083830\r\r\r\r\rAfter computing my metrics it is time to visualize them with ggplot.\n\rStop word ratio\rI will start by visualizing the stop word ratio for each candidate.\ndebate_vocab_df %\u0026gt;%\rmutate(speaker = fct_reorder(speaker,stop_word_ratio,.desc = TRUE)) %\u0026gt;% ggplot(aes(x = speaker , y = stop_word_ratio,fill = speaker)) +\rgeom_col(show.legend = FALSE) +\rgeom_label(aes(label = round(stop_word_ratio,digits = 3)) ,size = 5) +\rcoord_flip() +\rscale_fill_manual(values = custom_palette) +\rlabs(title = \u0026quot;The ratio of stopwords used by Democratic canidates in the debates\u0026quot;)\rIt seems that Bernie Sanders had used the lowest percentage of stopwords in his speeches. On the other hand, Mike Bloomberg had used the largest ratio of stopwords in his first and only debates so far.\n\rVocabulary size\rThe vocabulary size metric shows a different trend as Mike Bloomberg has the highest score among the rest of the candidates. Of course and as I mentioned before, Bloomberg has appeared only once on the debate stage, and it might be too soon to draw a conclusion about his eloquence.\n debate_vocab_df %\u0026gt;%\rmutate(speaker = fct_reorder(speaker,vocab_size,.desc = FALSE)) %\u0026gt;% ggplot(aes(x = speaker , y = vocab_size,fill = speaker)) +\rgeom_col(show.legend = FALSE) +\rgeom_label(aes(label = round(vocab_size,digits = 3) ,size = 8)) +\rcoord_flip() +\rscale_fill_manual(values = custom_palette) +\rlabs(title = \u0026quot;The ratio of unique Words used by Democratic candidates in the Debates\u0026quot;,\rcaption = \u0026#39;Visualization: @m_cnakhaee\\n\\n Source: https://github.com/favstats/demdebates2020\u0026#39;)\rSo, there is no outright winner in terms of language skills among Democratic candidates. Bernie Sanders had the best score in terms of vocabulary complexity, but he has the least ratio of unique words among his competitors. Also, one can argue that being eloquent might not be advantage to a candidate and win them an election ( look at the person who is the current president). Finally, I must emphasize that my metrics are rather arbitrary and should be taken with a grain of salt.\n\rSentiment analysis\rIn this part of my blog post, I examine how the language used by each top candidate had changed over the course of debates. I will use the tidy text approach to measure sentiment in the text. There are four main sentiment lexicons in the tidytext library, but in this experiment I am just using the Loughran lexicon.\ndebate_senteneces_sentiment \u0026lt;- debates %\u0026gt;%\rfilter(type == \u0026#39;Candidate\u0026#39;, is.na(background)) %\u0026gt;%\runnest_tokens(word, speech) %\u0026gt;%\ranti_join(stop_words) %\u0026gt;%\rinner_join(get_sentiments(\u0026quot;loughran\u0026quot;))\rhead(debate_senteneces_sentiment,3) %\u0026gt;% kable() %\u0026gt;%\rkable_styling(bootstrap_options = c(\u0026quot;striped\u0026quot;, \u0026quot;hover\u0026quot;, \u0026quot;condensed\u0026quot;, \u0026quot;responsive\u0026quot;))\r\r\rspeaker\r\rbackground\r\rtype\r\rgender\r\rdebate\r\rday\r\rorder\r\rword\r\rsentiment\r\r\r\r\r\rElizabeth Warren\r\rNA\r\rCandidate\r\rfemale\r\r1\r\r1\r\r6\r\rdestroyed\r\rnegative\r\r\r\rElizabeth Warren\r\rNA\r\rCandidate\r\rfemale\r\r1\r\r1\r\r8\r\rcorruption\r\rnegative\r\r\r\rAmy Klobuchar\r\rNA\r\rCandidate\r\rfemale\r\r1\r\r1\r\r11\r\rprosperity\r\rpositive\r\r\r\r\rdebate_senteneces_sentiment %\u0026gt;%\rgroup_by(speaker,debate,sentiment)%\u0026gt;%\rsummarise(sentiment_score = n())%\u0026gt;%\rungroup() %\u0026gt;%\rfilter(speaker %in% speakers) %\u0026gt;%\rggplot(aes(x = debate,y= sentiment_score,color = speaker)) +\rgeom_line(size = 3,alpha = 0.8) +\rgeom_point(size = 4) +\rscale_color_manual(values = custom_palette) +\rscale_x_continuous(breaks = seq(1,10),labels = seq(1,10)) +\rlabs(title = \u0026#39;What kinds of Language Have the Top Deomocratic Candidates Used in the Debates?\u0026#39;,\rcolor = \u0026#39;\u0026#39;,\rx = \u0026#39;\u0026#39;) +\rfacet_wrap(sentiment ~ . ,ncol = 1,scales = \u0026#39;free\u0026#39;) +\rtheme(strip.text = element_text(size = 20),\rstrip.background = element_rect(fill = \u0026#39;gray80\u0026#39;) ,\rlegend.text = element_text(size = 15),\rtitle = element_text(size = 25),\rlegend.position = \u0026#39;top\u0026#39;,\raxis.text.y = element_blank(),\raxis.text.x = element_text(size = 15),\raxis.ticks.y = element_blank(),\raxis.title.y = element_blank())\rAn the overall sentiment score for each candidate:\ndebate_senteneces_sentiment %\u0026gt;%\rgroup_by(speaker,sentiment)%\u0026gt;%\rsummarise(sentiment_score = n())%\u0026gt;%\rungroup() %\u0026gt;%\rfilter(speaker %in% speakers) %\u0026gt;%\rggplot(aes(speaker,sentiment_score,fill = speaker)) +\rgeom_col(alpha =0.8) +\rscale_fill_manual(values = custom_palette) +\rcoord_flip() +\rfacet_wrap(~sentiment, ncol = 5) +\rtheme(strip.text = element_text(size = 20),\rstrip.background = element_rect(fill = \u0026#39;gray80\u0026#39;) ,\rtitle = element_text(size = 25),\rlegend.position = \u0026#39;none\u0026#39;,\raxis.title.y = element_blank(),\raxis.title.x = element_blank())\rIt seems that negativity has been the most predominant emotion during Democratic debates (which absolutely makes sense since they want to unseat a president). Bernie Sanders used the highest number of words with negative sentiment in his remarks.\nPerforming sentiment analysis in tidytext is straightforward and easy, but sometimes the results are not what we hope and what the candidate actually meant. So, also take these results with a grain of salt.\n\rFurther Reading\rIf you are interested to learn more about tidy text mining in r, the following links can be helpful:\nhttps://www.tidytextmining.com/tidytext.html\nhttps://education.rstudio.com/blog/2020/02/conf20-tidytext/\n\r","date":1582416000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1582474522,"objectID":"2384d136e84da70dbe6a47ec2a434796","permalink":"/post/2020-02-23-the-most-eloquent-democratic-candidate/","publishdate":"2020-02-23T00:00:00Z","relpermalink":"/post/2020-02-23-the-most-eloquent-democratic-candidate/","section":"post","summary":"I am not a US citizen, nor have I been to the United States, but that does not mean that I should not care about the result of the US presidential election. The outcome of the election plays an important role in my life and almost everyone’s else around the world. So, I have been following the US politics for a few years.\nI consider everything and every issue around me as a data science problem and an opportunity to use data science.","tags":["NLP","R"],"title":"Analyzing the 2020 Democratic Party Presidential Debates - Part 1","type":"post"},{"authors":[],"categories":["R","NLP","Python"],"content":"\r\rSince the conquest of Persia (now Iran) by the Muslim forces in the 7th century, Arabic culture and language have had an enormous influence on Iran and Iranians. Although Iran had never fully adapted Arabic as its primary language, the new Persian (Farsi) language is a mix of Arabic and the old Persian (Pahlavi) and almost uses the same alphabet for writing. Also, in some parts of Iran, Arabic is the daily-life language.\rOver the past 100 years, a very few (narrowly-minded and mostly racist) scholars have tried to erase Arabic words from the Persian literature. Since I was a kid, I have always wanted to put my data science skills and tools to\nI decided to start a small project and determine how much influence Arabic has had on Persian Literature and poetry over time. Simply, my goal is to look at every word used in poems and determine whether it comes from Arabic, or it is originally a Persian word. Then I count the occurrence of each of them and compute their ratio.\nHowever, this is not an easy task for several reasons. Although determining the origin of a word is not difficult for a well-educated person, determining the root language of each word manually is not feasible. So, I tried smarter ways (but less accurate) to achieve the same goal. Like many other languages, Persian poems are different from daily written or spoken Persian, and therefore standard NLP methods are not as effective as before.\nIdeally, we need a complete dataset of words with Arabic roots used in Persian to solve this task. However, as far as I know, this dataset does not exist, and I must use other approaches:\r1. Some rules and exceptions can be used to distinguish Persian words from Arabic words. For example, unlike Persian, Arabic does not have four letters representing “p”, “j” such as Japan, “g” such as game and “ch” in its alphabet. It means that any word that consists of one of these letters it is definitely a non-Arabic word. On the other hand, we do not have any letters in the Persian alphabet for representing the ‘th’ letter (and a few other letters) in Arabic. Therefore, words that consist of these letters are likely to be Arabic words.\n# fa --\u0026gt; Farsi (Persian)\r# ar ---\u0026gt; Arabic\r# un ----\u0026gt; Unkown\rdef arabic_word(word):\rif \u0026#39;ث\u0026#39; in word:\rreturn \u0026#39;ar\u0026#39;\relif \u0026#39;ح\u0026#39; in word:\rreturn \u0026#39;ar\u0026#39; elif \u0026#39;ص\u0026#39; in word:\rreturn \u0026#39;ar\u0026#39; if \u0026#39;ض\u0026#39; in word:\rreturn \u0026#39;ar\u0026#39;\relif \u0026#39;ظ\u0026#39; in word:\rreturn \u0026#39;ar\u0026#39; elif \u0026#39;ع\u0026#39; in word:\rreturn \u0026#39;ar\u0026#39; elif \u0026#39;ط\u0026#39; in word:\rreturn \u0026#39;ar\u0026#39; elif \u0026#39;ق\u0026#39; in word:\rreturn \u0026#39;ar\u0026#39; elif \u0026#39;ژ\u0026#39; in word:\rreturn \u0026#39;fa\u0026#39;\relif \u0026#39;گ\u0026#39; in word:\rreturn \u0026#39;fa\u0026#39; elif \u0026#39;چ\u0026#39; in word:\rreturn \u0026#39;fa\u0026#39; elif \u0026#39;پ\u0026#39; in word:\rreturn \u0026#39;fa\u0026#39; else:\rreturn \u0026#39;un\u0026#39;\rUnfortunately, the rules mentioned above are not comprehensive, and they cannot determine the origin of many words. So, I turned to the python port of the Langdetect library for help. If the above rules can not determine the origin of a word, I will ask this library to identify the language. I should mention that langdetect can sometimes be wrong, so the final results might not be 100% accurate.\r\rI must also mention that I performed a few preprocessing steps, such as removing stopwords on the poetry corpus. A few other operations such as stemming could have been performed, but my initial assessment might not significantly change the final results.\rAfter preprocessing, I stored all the information about the ratio of Arabic and Persian words for each poet in a separate dataset.\nlang_ratio_df \u0026lt;- read_csv(\u0026#39;lang_ratio_df.csv\u0026#39;)\rhead(lang_ratio_df)\r## # A tibble: 6 x 6\r## poet century ar fa ratio period ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; ## 1 Abusaeid Abolkheir 5 3014 8277 0.364 Khorasani Style\r## 2 Ahmad Shamlou 14 8232 28862 0.285 Contemporary ## 3 Akhavan-Sales 14 3338 14937 0.223 Contemporary ## 4 Amir Khusrow 8 10582 41997 0.252 Iraqi Style ## 5 Anvari 6 29430 67188 0.438 Iraqi Style ## 6 Artimani 10 2616 7706 0.339 Indian Style\rI visualized the ratio of words for each poet using the ggplot library in R.\n lang_ratio_df %\u0026gt;%\rmutate(\rpoet = fct_reorder(poet, ratio),\rperiod = factor(\rperiod,\rlevels = c(\u0026#39;Khorasani Style\u0026#39;,\u0026#39;Iraqi Style\u0026#39;,\u0026#39;Indian Style\u0026#39;,\u0026#39;Contemporary\u0026#39; )\r)) %\u0026gt;% ggplot(aes(x = poet, y = ratio , color = period)) +\rgeom_point(size = 4) +\rgeom_segment(aes(\ry = 0, yend = ratio, x = poet, xend = poet), size = 1) +\rgeom_text(\raes(x = poet, y = ratio,label = scales::percent(ratio)), size = 5, nudge_y = .2,family = \u0026#39;Montserrat\u0026#39;) +\rlabs( x = \u0026#39;\u0026#39;, y = \u0026#39;\u0026#39;, title = \u0026#39;The Estimated Ratio of Arabic Words Used by Famous Persion Poets\u0026#39;) +\rscale_color_tableau() +\rscale_y_continuous(labels = scales::percent_format(accuracy = 1)) +\rcoord_flip() +\rfacet_wrap( ~ period, scales = \u0026quot;free_y\u0026quot;, ncol = 2) +\rtheme_tufte() +\rtheme(\rtext = element_text(family = \u0026#39;Montserrat\u0026#39;),\rlegend.title = element_text(size = 20),\raxis.ticks.x = element_blank(),\rlegend.text = element_text(\rsize = 15,\rmargin = ggplot2::margin(0, 20, 0, 0)),\rplot.title = element_text(\rface = \u0026quot;bold\u0026quot;,\rcolor = \u0026#39;gray\u0026#39;,\rsize = 22,\rmargin = ggplot2::margin(0, 20, 20, 0),\rhjust = 0.5,\rvjust = 0.5),\rstrip.text = element_text(\rcolor = \u0026#39;gray80\u0026#39;,\rsize = 18 ,\rmargin = ggplot2::margin(1, 0, 1, 0)),\rlegend.position = \u0026#39;none\u0026#39;,\raxis.title.x = element_blank(),\raxis.text.x = element_blank(),\raxis.text.y = element_text(size = 12, color = \u0026#39;gray\u0026#39;),\rplot.background = element_rect(fill = \u0026quot;black\u0026quot;, color = \u0026quot;black\u0026quot;),\rpanel.background = element_rect(fill = \u0026quot;black\u0026quot;, color = \u0026quot;black\u0026quot;),\rpanel.border = element_rect(fill = NA, color = NA))\rAs you can see above, every poet used at least a sizable number of Arabic words in his/her work. Most notably, Ferdowsi wrote Shahname (the Book of Kings), which recounts the myths and legends of Persian Kings and Heroes and is the oldest piece of poetry analyzed in my experiment, also includes a considerable number of Arabic words. Other top Persian poets such as Hafez, Saadi and Rumi used Arabic words in almost 40%-50% of their works.\nIt can be best shown using the following plot, which is made using the ggpage package in R. The plot shows the distribution of words and their origins for several top Persian poets. Note that I only used a random subset of words from each poet’s works and not their whole works of poetry in this plot.\nsample_poets_df \u0026lt;- read_csv(\u0026#39;sample_poets.csv\u0026#39;)\rhead(sample_poets_df)\r## # A tibble: 6 x 4\r## word lang poet century\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 \u0026lt;U+0628\u0026gt;\u0026lt;U+0627\u0026gt;\u0026lt;U+0645\u0026gt; fa Rudaki 3\r## 2 \u0026lt;U+0627\u0026gt;\u0026lt;U+0634\u0026gt;\u0026lt;U+06A9\u0026gt; fa Rudaki 3\r## 3 \u0026lt;U+063A\u0026gt;\u0026lt;U+0645\u0026gt; ar Rudaki 3\r## 4 \u0026lt;U+0647\u0026gt;\u0026lt;U+0645\u0026gt;\u0026lt;U+06CC\u0026gt; fa Rudaki 3\r## 5 \u0026lt;U+0628\u0026gt;\u0026lt;U+0631\u0026gt;\u0026lt;U+0645\u0026gt; fa Rudaki 3\r## 6 \u0026lt;U+0646\u0026gt;\u0026lt;U+0647\u0026gt;\u0026lt;U+0627\u0026gt;\u0026lt;U+0646\u0026gt;\u0026lt;U+06CC\u0026gt; fa Rudaki 3\rggpage_df %\u0026gt;%\rmutate(poet = fct_reorder(poet, century)) %\u0026gt;%\rggpage_plot(aes(fill = lang)) +\rlabs(title = \u0026#39;Distribution of Persian and Arabic Words Used by Top Persian Poets\u0026#39;, fill = \u0026#39;\u0026#39;) +\rscale_fill_manual(values = plotcolors,\rguide = \u0026#39;legend\u0026#39; ,\rlabels = c(\u0026#39;Arabic\u0026#39;,\u0026#39;Persian\u0026#39;)) +\rfacet_wrap(~ poet, nrow = 3) +\rtheme(\rstrip.text = element_text(\rsize = 15,\rface = \u0026quot;bold\u0026quot;,\rmargin = ggplot2::margin(1, 1, 1, 1, \u0026quot;cm\u0026quot;),\rcolor = \u0026#39;white\u0026#39;\r),\rtext = element_text(family = \u0026#39;Montserrat\u0026#39;),\rlegend.position = \u0026#39;top\u0026#39;,\rlegend.text = element_text(\rsize = 15,\rmargin = ggplot2::margin(10, 10, 10, 10)\r),\rpanel.spacing = unit(1, \u0026quot;points\u0026quot;),\rplot.title = element_text(\rface = \u0026quot;bold\u0026quot;,\rsize = 22,\rmargin = ggplot2::margin(30, 0, 30, 0),\rhjust = 0.5\r),\rpanel.grid.major = element_blank(),\rpanel.grid.minor = element_blank(),\rstrip.background = element_rect(fill = \u0026#39;#000F2B\u0026#39;),\rpanel.border = element_blank(),\raxis.text.x = element_blank(),\raxis.ticks.x = element_blank(),\raxis.title.x = element_blank(),\raxis.text.y = element_blank(),\raxis.ticks.y = element_blank(),\raxis.title.y = element_blank(),\r)\rConclusion\rHow Much Influence Did Arabic Have on Persian Literature has been one of my questions since I started to read and study literature. Nobody had been able to answer this question, and I could not have answered it without the help of data science.\nMy analysis shows that the Arabic language has contributed significantly to our literature and culture. The golden era of Persian poetry can be seen as a result of its integration with Arabic. Persian also made its contribution to the Arabic language and Arabic poetry. So, talking about erasing one language from the other is not helpful or wise, and I hope everyone realizes that.\n\r","date":1581120000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581178144,"objectID":"19e5ff0ae163a6f22c89473e1a48f09b","permalink":"/post/2020-02-08-going-back-to-the-roots-how-much-influence-did-arabic-have-on-persian-literature/","publishdate":"2020-02-08T00:00:00Z","relpermalink":"/post/2020-02-08-going-back-to-the-roots-how-much-influence-did-arabic-have-on-persian-literature/","section":"post","summary":"Since the conquest of Persia (now Iran) by the Muslim forces in the 7th century, Arabic culture and language have had an enormous influence on Iran and Iranians. Although Iran had never fully adapted Arabic as its primary language, the new Persian (Farsi) language is a mix of Arabic and the old Persian (Pahlavi) and almost uses the same alphabet for writing. Also, in some parts of Iran, Arabic is the daily-life language.","tags":["NLP","R"],"title":"Going Back to the Roots! How Much Influence Did Arabic Have on Persian Literature?","type":"post"},{"authors":[],"categories":["R","XAI"],"content":"\r\rIn the 4th week of the Tidy Tuesday project, a very interesting and fun dataset was proposed to the data science community. The dataset contains information about thousands of songs on Spotify’s platform and along with their metadata and audio features. You can download the dataset can using the following piece of code.\n4th week of the Tidy Tuesday project\nspotify_songs \u0026lt;- readr::read_csv(\u0026#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv\u0026#39;)\rhead(spotify_songs)\r## # A tibble: 6 x 23\r## track_id track_name track_artist track_popularity track_album_id\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; ## 1 6f807x0~ I Don\u0026#39;t C~ Ed Sheeran 66 2oCs0DGTsRO98~\r## 2 0r7CVbZ~ Memories ~ Maroon 5 67 63rPSO264uRjW~\r## 3 1z1Hg7V~ All the T~ Zara Larsson 70 1HoSmj2eLcsrR~\r## 4 75Fpbth~ Call You ~ The Chainsm~ 60 1nqYsOef1yKKu~\r## 5 1e8PAfc~ Someone Y~ Lewis Capal~ 69 7m7vv9wlQ4i0L~\r## 6 7fvUMiy~ Beautiful~ Ed Sheeran 67 2yiy9cd2QktrN~\r## # ... with 18 more variables: track_album_name \u0026lt;chr\u0026gt;,\r## # track_album_release_date \u0026lt;chr\u0026gt;, playlist_name \u0026lt;chr\u0026gt;, playlist_id \u0026lt;chr\u0026gt;,\r## # playlist_genre \u0026lt;chr\u0026gt;, playlist_subgenre \u0026lt;chr\u0026gt;, danceability \u0026lt;dbl\u0026gt;,\r## # energy \u0026lt;dbl\u0026gt;, key \u0026lt;dbl\u0026gt;, loudness \u0026lt;dbl\u0026gt;, mode \u0026lt;dbl\u0026gt;, speechiness \u0026lt;dbl\u0026gt;,\r## # acousticness \u0026lt;dbl\u0026gt;, instrumentalness \u0026lt;dbl\u0026gt;, liveness \u0026lt;dbl\u0026gt;, valence \u0026lt;dbl\u0026gt;,\r## # tempo \u0026lt;dbl\u0026gt;, duration_ms \u0026lt;dbl\u0026gt;\rFor this week’s tidy Tuesday, I decided to use a somewhat different approach from my previous submissions. Instead of focusing solely on the visualization aspect of my submissions, I tried to use other tools from the tidy model universe for machine learning model development,\nEach song has around 12 columns representing audio features. The Github’s page for this dataset describes these features as follows:\n\r\r\r\rvariable\rclass\rdescription\r\r\r\rdanceability\rdouble\rDanceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.\r\renergy\rdouble\rEnergy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.\r\rkey\rdouble\rThe estimated overall key of the track. Integers map to pitches using standard Pitch Class notation . E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1.\r\rloudness\rdouble\rThe overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typical range between -60 and 0 db.\r\rmode\rdouble\rMode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.\r\rspeechiness\rdouble\rSpeechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.\r\racousticness\rdouble\rA confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.\r\rinstrumentalness\rdouble\rPredicts whether a track contains no vocals. “Ooh” and “aah” sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly “vocal”. The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.\r\rliveness\rdouble\rDetects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.\r\rvalence\rdouble\rA measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).\r\rtempo\rdouble\rThe overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.\r\rduration_ms\rdouble\rDuration of song in milliseconds\r\r\r\rIt would be very helpful to compare songs based on their audio features and have an overall picture of where each song is placed. Unfortunately, we can only visualize 2 or 3 audio features at the same time, and It is not possible to put all these features in a 2D or 3D space. So, I tried to use unsupervised machine learning to visualize songs on a 2D space by transforming their high-dimensional audio features into a more compressed form.\nlibrary(tidyverse)\rlibrary(tidymodels)\rlibrary(workflows)\rlibrary(gghighlight)\rlibrary(hrbrthemes)\rlibrary(ggthemes)\rlibrary(lubridate)\rlibrary(reticulate)\rlibrary(ggrepel)\rlibrary(plotly)\rlibrary(uwot)\rtheme_update(legend.position = \u0026#39;top\u0026#39;,\rlegend.text = element_text(size = 32,color = \u0026#39;gray75\u0026#39; ),\rlegend.key = element_rect(fill = \u0026quot;black\u0026quot;, color = \u0026quot;black\u0026quot;),\rlegend.background= element_rect(fill = \u0026quot;black\u0026quot;, color = \u0026quot;black\u0026quot;),\rplot.title = element_text(family = \u0026#39;Montserrat\u0026#39;, face = \u0026quot;bold\u0026quot;, size = 60,hjust = 0.5,vjust = 0.5,color = \u0026#39;#FFE66D\u0026#39;,margin = ggplot2::margin(40,0,0,0)),\rplot.subtitle = element_text(\rfamily = \u0026#39;Montserrat\u0026#39;, size = 30, hjust = 0.5),\rstrip.background = element_blank(),\rplot.background = element_rect(fill = \u0026quot;black\u0026quot;, color = \u0026quot;black\u0026quot;),\rpanel.background = element_rect(fill = \u0026quot;black\u0026quot;, color = \u0026quot;black\u0026quot;),\rpanel.grid.major.x =element_blank(),\rpanel.grid.major.y =element_blank(),\rpanel.grid.minor =element_blank(),\raxis.text.x.bottom = element_blank(),\raxis.ticks.x = element_blank(), axis.ticks.y = element_blank(),\raxis.text.x = element_blank(),\raxis.text.y.left = element_blank()) \rDimensionality Reduction and UMAP\rMy initial idea was to use some clustering algorithms to cluster songs based on their audio feature and find songs that are similar to each other. Yet, it was not easy to visualize these clusters in a two-dimensional space. Of course, you can do that by using hierarchal clustering but even then, visualizing a few thousand samples (songs) seems to be impractical. So, I decided to use other unsupervised techniques to compress these high-dimensional audio features and transform them into a more compact 2D space.\nThere are several dimensionality reduction algorithms such as PCA, t-SNE UMAP. The primary purpose of these algorithms is to give us a compressed representation of the input data, while preserving the most relevant information in the data. PCA is a linear dimensionality reduction method, while both t-SNE and UMAP are non-linear methods.\nIn this post, I will use UMAP and t-SNE, two widely used dimensionality reduction algorithms. When the input dataset is large T-SNE becomes very slow and is not an efficient algorithm anymore. On the other hand, UMAP can handle larger datasets much more easily and quickly. Moreover, UMAP can preserve the underlying local structure present in the data, and it can also represent the global structure of the data more accurately. What do we mean by local and global structure? For example, in the song dataset, persevering local structure means that songs that belong to an artist are clustered together. Similarly, global structure means that songs belonging to more related genres (e.g., hard rock, album rock, and classic rock) will be placed in close proximity to each other on the new projection.\nUMAP achieves this goal by employing some advanced optimization techniques and mathematical concepts. Understanding how UMAP uses these techniques and projects the input data into a more compressed representation is not crucial, but If you are curious to know more about the theory behind UMAP and its difference with T-SNE, I recommend this excellent blogpost by Andy Coenen and Adam Pearce.\nData Preprocessing\rBoth UMAP and T-SNE compute a distance metric between samples. This distance metric should be meaningful and reasonable. If we do not scale the input features before feeding them to these algorithms, some features might have a stronger (unfair) influence than other features on the computation of the distance between samples. For this reason, it is necessary to normalize input features before implementing them,\nI create a data preprocessing recipe using the recipe package, and I add a normalization step to scale the audio features. Note that since I implement an unsupervised algorithm, there is no need to split the dataset into a training and testing dataset.\nnormalized_features \u0026lt;- spotify_songs %\u0026gt;%\rrecipe() %\u0026gt;% step_normalize( danceability,\renergy,\rkey,\rloudness,\rmode,\rspeechiness,\racousticness,\rinstrumentalness,\rliveness,\rvalence,\rtempo,\rduration_ms) %\u0026gt;% prep() %\u0026gt;% juice()\rhead(normalized_features)\r## # A tibble: 6 x 23\r## track_id track_name track_artist track_popularity track_album_id\r## \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; ## 1 6f807x0~ I Don\u0026#39;t C~ Ed Sheeran 66 2oCs0DGTsRO98~\r## 2 0r7CVbZ~ Memories ~ Maroon 5 67 63rPSO264uRjW~\r## 3 1z1Hg7V~ All the T~ Zara Larsson 70 1HoSmj2eLcsrR~\r## 4 75Fpbth~ Call You ~ The Chainsm~ 60 1nqYsOef1yKKu~\r## 5 1e8PAfc~ Someone Y~ Lewis Capal~ 69 7m7vv9wlQ4i0L~\r## 6 7fvUMiy~ Beautiful~ Ed Sheeran 67 2yiy9cd2QktrN~\r## # ... with 18 more variables: track_album_name \u0026lt;fct\u0026gt;,\r## # track_album_release_date \u0026lt;fct\u0026gt;, playlist_name \u0026lt;fct\u0026gt;, playlist_id \u0026lt;fct\u0026gt;,\r## # playlist_genre \u0026lt;fct\u0026gt;, playlist_subgenre \u0026lt;fct\u0026gt;, danceability \u0026lt;dbl\u0026gt;,\r## # energy \u0026lt;dbl\u0026gt;, key \u0026lt;dbl\u0026gt;, loudness \u0026lt;dbl\u0026gt;, mode \u0026lt;dbl\u0026gt;, speechiness \u0026lt;dbl\u0026gt;,\r## # acousticness \u0026lt;dbl\u0026gt;, instrumentalness \u0026lt;dbl\u0026gt;, liveness \u0026lt;dbl\u0026gt;, valence \u0026lt;dbl\u0026gt;,\r## # tempo \u0026lt;dbl\u0026gt;, duration_ms \u0026lt;dbl\u0026gt;\r\r\rT-SNE\rBoth UMAP and T-SNE have several hyper-parameters that can influence the resulting embedding output. However, T-SNE is a notoriously slow algorithm and the opportunity for trial and error with different sets of hyper-parameter values are limited. For the sake of simplicity, I stick to default settings for hyper-parameter in T-SNE.\nlibrary(Rtsne)\rtsne_embedding \u0026lt;- normalized_features %\u0026gt;%\rselect(c(12:23)) %\u0026gt;%\rRtsne(check_duplicates = FALSE)\rtsne_embeddings \u0026lt;- spotify_songs %\u0026gt;% select(-c(12:22)) %\u0026gt;% bind_cols(tsne_embedding$Y %\u0026gt;% as_tibble()) %\u0026gt;% = element_rect(fill = \u0026quot;black\u0026quot;, color = \u0026quot;black\u0026quot;),\rdplyr::rename(tsne_1 = V1, tsne_2 = V2) %\u0026gt;% \rEven though I managed to transform a high dimensional dataset into a 2D space, still it was very challenging to visualize every song and every artists all at once. So, I just select a few famous artists that I have heard about. Each artist in this list more or less represents at least a genre of music and it can perfectly show that an artist (or a band) made several genres of music and how difficult our task is.\nselected_artists \u0026lt;- c(\u0026#39;Queen\u0026#39;,\u0026#39;Drake\u0026#39;,\u0026#39;Rihanna\u0026#39;,\u0026#39;Taylor Swift\u0026#39;,\u0026#39;Eminem\u0026#39;,\u0026#39;Snoop Dogg\u0026#39;,\u0026#39;Katy Perry\u0026#39;,\u0026#39;The Beatles\u0026#39;)\rtsne_embeddings \u0026lt;- tsne_embeddings%\u0026gt;% mutate(\rselected_artist = if_else( track_artist %in% selected_artists, as.character(track_artist), \u0026quot;\u0026quot;),\rtrack_name_selected_artist = if_else(track_artist %in% selected_artists, track_name, NULL),\rgenre_selected_artist = if_else(track_artist %in% selected_artists,playlist_genre, NULL),\rpopular_tracks_selected_artist = if_else(\rtrack_artist %in% selected_artists \u0026amp; track_popularity \u0026gt; 65,shorter_names, NULL )) %\u0026gt;%\rdistinct(track_name, .keep_all = TRUE)\rtsne_embeddings %\u0026gt;%\rggplot(aes(x = tsne_1, y = tsne_2 ,color = selected_artist )) +\rgeom_point(size = 5.3,alpha =0.8) +\rgghighlight(selected_artist != \u0026quot;\u0026quot;,unhighlighted_params = list(alpha = 0.3,size = 0.8, color = \u0026#39;#FFE66D\u0026#39;)) +\rscale_color_manual(values = c(\u0026#39;#5BC0EB\u0026#39;,\u0026#39;#FDE74C\u0026#39;,\u0026#39;#7FB800\u0026#39;,\u0026#39;#E55934\u0026#39;,\u0026#39;#FA7921\u0026#39;,\u0026#39;#1A936F\u0026#39; ,\u0026#39;#F0A6CA\u0026#39;,\u0026#39;#B8BEDD\u0026#39;))+\rguides(size = FALSE,\rcolor = guide_legend(override.aes = list(alpha = 0.9,size = 12))) +\rgeom_text_repel(aes(label = popular_tracks_selected_artist),size = 7, family = \u0026#39;Montserrat\u0026#39;,\rpoint.padding = 2.2,\rbox.padding = .5,\rforce = 1,\rmin.segment.length = 0.1) +\rlabs(x = \u0026quot;\u0026quot;, y = \u0026quot;\u0026quot; ,\rtitle = \u0026#39;The Map of Spotify Songs Based on T-SNE Algorithm\\n\u0026#39;,\rsubtitle = \u0026#39;Using the T-SNE algorithm, the audio features of each song are mapped into a 2D space.\\n Each point represents a unique song and the most popular songs of several known artist are also shown\\n\u0026#39;,\rcolor = \u0026#39;\u0026#39;) \rAs you can see in this projection, songs that belong to the same artists are placed close to each other. It seems that T-SNE is able to preserve the local topological structure of songs. Now I will look at how T-SNE distinguishes different genres of music.\ntsne_embeddings %\u0026gt;%\rggplot(aes(x = tsne_1, y = tsne_2 ,color = playlist_genre )) +\rgeom_point(size = 5.3,alpha =0.8) +\rgghighlight(selected_artist != \u0026quot;\u0026quot;,unhighlighted_params = list(alpha = 0.3,size = 0.8, color = \u0026#39;#FFE66D\u0026#39;)) +\rscale_color_tableau() +\rguides(size = FALSE,\rcolor = guide_legend(override.aes = list(alpha = 0.9,size = 12))) +\rgeom_text_repel(aes(label = popular_tracks_selected_artist),size = 7, family = \u0026#39;Montserrat\u0026#39;,\rpoint.padding = 2.2,\rbox.padding = .5,\rforce = 1,\rmin.segment.length = 0.1) +\rlabs(x = \u0026quot;\u0026quot;, y = \u0026quot;\u0026quot; ,\rtitle = \u0026#39;The Map of Spotify Songs Based on T-SNE Algorithm\\n\u0026#39;,\rsubtitle = \u0026#39;Using the T-SNE algorithm, the audio features of each song are mapped into a 2D space.\\n Each point represents a unique song and the most popular songs of several known artist are also shown\\n\u0026#39;,\rcolor = \u0026#39;\u0026#39;) \r\rUMAP\rJust like t-SNE, UMAP is a dimensionality reduction algorithm but it is much more computationally efficient and faster that t-SNE. The UMAP algorithm was originally implemented in Python. But there are also several libraries in R such as umapr, umap and uwot that also provide an implementation of the UMAP algorithm. umapr and umap use the reticulate package and provide a wrapper function around the original umap-learn python library. Also, umap and uwot library have their own R implementation and they do not require the python package to be installed beforehand. For this specific experiment, I will use the uwot library.\nwe can change and tune a few hyper-parameters in the implementation of UMAP in the uwot library, These hyperparameter can change the embedding outcome. However, there are two hyper-parameters that have a much more important impact on the structure of the low-dimensional representation:n_neighbors, min_dist and metric.\n\rn_neighbors determines the number of nearest neighbor data points that we use to compute and construct the embedding.\rmin_dist controls the minimum distance between data points in the low dimensional space (embedding). That means a low value of min_dist results in a more compact clusters of data points. On the other hand, with larger values of min_dist, the projection will be less compact and tend to preserve the global structure.\rmetric: We can use different metrics (e.g.. cosine or Euclidean) to compute the distance between data points and to find the nearest neighbors.\r\rThe choice of hyperparameter values can be very important for the final projection. However,choosing the right set of hyper-parameters in UMAP is extremely difficult because UMAP is an unsupervised algorithm and we do not have a baseline to evaluate its performance. Fortunately, UMAP is vary fast and scalable algorithm. It means that we can run UMAP with different hyperparameter settings and decide which set of values best serves our purpose.\nMy main goal from running UMAP is to visualize songs and their audio features on a 2D space and I can use a trick to decrease UMAP’s computation time. According to uwot’s documentation, if my only purpose is visualization, I can set the value of fast_sgd hyper-parameter to TRUE to speed up UMAP’s convergence and running time.\rNext, I create a grid of values for these three hyper-parameters and each time I will learn a new UMAP embedding based on different combinations of these values.\nn_neighbors \u0026lt;- c(15,30,50,100,150)\rmin_distance \u0026lt;- c( 0.001, 0.003, 0.009,0.03,0.09)\rmetrics \u0026lt;- c(\u0026quot;euclidean\u0026quot; ,\u0026quot;cosine\u0026quot;,\u0026quot;hamming\u0026quot;)\r#make a copy of the dataset\rspotify_songs_emb \u0026lt;- spotify_songs\rfor (nn in n_neighbors) {\rfor (md in min_distance) {\rfor (metric in metrics) {\rumap_embedding \u0026lt;- normalized_features %\u0026gt;%\rselect(c(12:23)) %\u0026gt;%\rumap(n_neighbors = nn,min_dist = md,metric = metric, fast_sgd = TRUE)\rspotify_songs_emb \u0026lt;- spotify_songs_emb %\u0026gt;% bind_cols(umap_embedding[,1]%\u0026gt;% as_tibble() ) %\u0026gt;% bind_cols(umap_embedding[,2] %\u0026gt;% as_tibble() )\rnames(spotify_songs_emb)[names(spotify_songs_emb) == \u0026#39;value\u0026#39; ] = paste(\u0026#39;nn_\u0026#39;,nn,\u0026#39;md_\u0026#39;,md,\u0026#39;metric\u0026#39;,metric,\u0026#39;1\u0026#39;,sep = \u0026#39;.\u0026#39;)\rnames(spotify_songs_emb)[names(spotify_songs_emb) == \u0026#39;value1\u0026#39; ] = paste(\u0026#39;nn_\u0026#39;,nn,\u0026#39;md_\u0026#39;,md,\u0026#39;metric\u0026#39;,metric,\u0026#39;2\u0026#39;,sep = \u0026#39;.\u0026#39;)\r}\r}\r}\rJust like what I did for T-SNE, I will focus on the same list of artists.\nspotify_songs_emb \u0026lt;- spotify_songs_emb%\u0026gt;% mutate(\rselected_artist = if_else( track_artist %in% selected_artists, as.character(track_artist), \u0026quot;\u0026quot;),\rpoint_size_selected_artist = if_else(track_artist %in% selected_artists, 0.5, 0.1),\rtrack_name_selected_artist = if_else(track_artist %in% selected_artists, track_name, NULL),\rgenre_selected_artist = if_else(track_artist %in% selected_artists,playlist_genre, NULL),\rpopular_tracks_selected_artist = if_else(\rtrack_artist %in% selected_artists \u0026amp; track_popularity \u0026gt; 65,shorter_names, NULL )) %\u0026gt;%\rdistinct(track_name, .keep_all = TRUE)\rNow, it was time to plot the results of UMAP embeddings using ggplot and gghighlight.\nSetting 1\r\rNearest neighbors: 50\n\rMinimum distance: 0.09\n\rDistance metric: Euclidean\n\r\rspotify_songs_emb %\u0026gt;%\rggplot(aes(x = nn_.50.md_.0.09.metric.euclidean.1, y = nn_.50.md_.0.09.metric.euclidean.2 ,color = selected_artist )) +\rgeom_point(size = 5.3,alpha =0.8) +\rgghighlight(selected_artist != \u0026quot;\u0026quot;,unhighlighted_params = list(alpha = 0.3,size=0.8, color = \u0026#39;#FFE66D\u0026#39;)) +\rscale_color_manual(values = c(\u0026#39;#5BC0EB\u0026#39;,\u0026#39;#FDE74C\u0026#39;,\u0026#39;#7FB800\u0026#39;,\u0026#39;#E55934\u0026#39;,\u0026#39;#FA7921\u0026#39;,\u0026#39;#1A936F\u0026#39; ,\u0026#39;#F0A6CA\u0026#39;,\u0026#39;#B8BEDD\u0026#39;))+\rguides(size = FALSE,\rcolor = guide_legend(override.aes = list(alpha = 0.9,size = 12))) +\rgeom_text_repel(aes(label = popular_tracks_selected_artist),size = 8, family = \u0026#39;Montserrat\u0026#39;,\rpoint.padding = 2.2,\rbox.padding = .5,\rforce = 1,\rmin.segment.length = 0.1) +\rlabs(x = \u0026quot;\u0026quot;, y = \u0026quot;\u0026quot; ,\rcolor = \u0026#39;\u0026#39;) \r\rSetting 2\r\rNearest neighbors: 50\n\rMinimum distance: 0.09\n\rDistance metric: Hamming\n\r\rspotify_songs_emb %\u0026gt;%\rggplot(aes(x = nn_.50.md_.0.09.metric.hamming.1, y = nn_.50.md_.0.09.metric.hamming.2,color = selected_artist )) +\rgeom_point(size = 5.3,alpha =0.8) +\rgghighlight(selected_artist != \u0026quot;\u0026quot;,unhighlighted_params = list(alpha = 0.3,size=0.8, color = \u0026#39;#FFE66D\u0026#39;)) +\rscale_color_manual(values = c(\u0026#39;#5BC0EB\u0026#39;,\u0026#39;#FDE74C\u0026#39;,\u0026#39;#7FB800\u0026#39;,\u0026#39;#E55934\u0026#39;,\u0026#39;#FA7921\u0026#39;,\u0026#39;#1A936F\u0026#39; ,\u0026#39;#F0A6CA\u0026#39;,\u0026#39;#B8BEDD\u0026#39;))+\rguides(size = FALSE,\rcolor = guide_legend(override.aes = list(alpha = 0.9,size = 12))) +\rgeom_text_repel(aes(label = popular_tracks_selected_artist),size = 8, family = \u0026#39;Montserrat\u0026#39;,\rpoint.padding = 2.2,\rbox.padding = .5,\rforce = 1,\rmin.segment.length = 0.1) +\rlabs(x = \u0026quot;\u0026quot;, y = \u0026quot;\u0026quot; ,\rcolor = \u0026#39;\u0026#39;) \r\rSetting 3\r\rNearest neighbors: 150\n\rMinimum distance: 0.09\n\rDistance metric: Euclidean\n\r\rspotify_songs_emb %\u0026gt;%\rggplot(aes(x = nn_.150.md_.0.09.metric.euclidean.1, y = nn_.150.md_.0.09.metric.euclidean.2,color = playlist_genre )) +\rgeom_point(size = 5.3,alpha =0.8) +\rgghighlight(selected_artist != \u0026quot;\u0026quot;,unhighlighted_params = list(alpha = 0.3,size=0.8, color = \u0026#39;#FFE66D\u0026#39;)) +\rscale_color_tableau() +\rguides(size = FALSE,\rcolor = guide_legend(override.aes = list(alpha = 0.9,size = 12))) +\rgeom_text_repel(aes(label = popular_tracks_selected_artist),size = 8, family = \u0026#39;Montserrat\u0026#39;,\rpoint.padding = 2.2,\rbox.padding = .5,\rforce = 1,\rmin.segment.length = 0.1) +\rlabs(x = \u0026quot;\u0026quot;, y = \u0026quot;\u0026quot; ,\rcolor = \u0026#39;\u0026#39;) \r\rSetting 4\r\rNearest neighbors: 15\n\rMinimum distance: 0.09\n\rDistance metric: Euclidean\n\r\rspotify_songs_emb %\u0026gt;%\rggplot(aes(x = nn_.15.md_.0.09.metric.euclidean.1, y = nn_.15.md_.0.09.metric.euclidean.2,color = playlist_genre )) +\rgeom_point(size = 5.3,alpha =0.8) +\rgghighlight(selected_artist != \u0026quot;\u0026quot;,unhighlighted_params = list(alpha = 0.3,size=0.8, color = \u0026#39;#FFE66D\u0026#39;)) +\rscale_color_tableau() +\rguides(size = FALSE,\rcolor = guide_legend(override.aes = list(alpha = 0.9,size = 12))) +\rgeom_text_repel(aes(label = popular_tracks_selected_artist),size = 8, family = \u0026#39;Montserrat\u0026#39;,\rpoint.padding = 2.2,\rbox.padding = .5,\rforce = 1,\rmin.segment.length = 0.1) +\rlabs(x = \u0026quot;\u0026quot;, y = \u0026quot;\u0026quot; ,\rcolor = \u0026#39;\u0026#39;) \r\rSetting 5\r\rNearest neighbors: 150\n\rMinimum distance: 0.001\n\rDistance metric: Euclidean\n\r\rspotify_songs_emb %\u0026gt;%\rggplot(aes(x = nn_.150.md_.0.001.metric.euclidean.1, y = nn_.150.md_.0.001.metric.euclidean.2,color = playlist_genre )) +\rgeom_point(size = 5.3,alpha =0.8) +\rgghighlight(selected_artist != \u0026quot;\u0026quot;,unhighlighted_params = list(alpha = 0.3,size=0.8, color = \u0026#39;#FFE66D\u0026#39;)) +\rscale_color_tableau() +\rguides(size = FALSE,\rcolor = guide_legend(override.aes = list(alpha = 0.9,size = 12))) +\rgeom_text_repel(aes(label = popular_tracks_selected_artist),size = 8, family = \u0026#39;Montserrat\u0026#39;,\rpoint.padding = 2.2,\rbox.padding = .5,\rforce = 1,\rmin.segment.length = 0.1) +\rlabs(x = \u0026quot;\u0026quot;, y = \u0026quot;\u0026quot; ,\rcolor = \u0026#39;\u0026#39;) \r\rSetting 6\r\rNearest neighbors: 15\n\rMinimum distance: 0.09\n\rDistance metric: Hamming\n\r\rspotify_songs_emb %\u0026gt;%\rggplot(aes(x = nn_.15.md_.0.09.metric.hamming.1, y = nn_.15.md_.0.09.metric.hamming.2,color = playlist_genre )) +\rgeom_point(size = 5.3,alpha =0.8) +\rgghighlight(selected_artist != \u0026quot;\u0026quot;,unhighlighted_params = list(alpha = 0.3,size=0.8, color = \u0026#39;#FFE66D\u0026#39;)) +\rscale_color_tableau() +\rguides(size = FALSE,\rcolor = guide_legend(override.aes = list(alpha = 0.9,size = 12))) +\rgeom_text_repel(aes(label = popular_tracks_selected_artist),size = 8, family = \u0026#39;Montserrat\u0026#39;,\rpoint.padding = 2.2,\rbox.padding = .5,\rforce = 1,\rmin.segment.length = 0.1) +\rlabs(x = \u0026quot;\u0026quot;, y = \u0026quot;\u0026quot; ,\rcolor = \u0026#39;\u0026#39;) \rFor the most part, both t-SNE and UMAP place songs from the same artists or similar songs close to each other. The UMAP embeddings with Euclidean distance are somehow similar to a real map. In the UMAP representation of the songs, we can see isolated clusters of songs. However, in t-SNE representation, no clear and separate cluster of points can be seen.\rWe can observe that the most influential hyper-parameter seems to be the distance metric. Additionally, when we decrease the value of min_dist, the projection becomes less compact, and the global structure emerges. However, we also see that sometimes music genres are not well-separated as we would like them to be. We should take into account that audio features might not be enough to distinguish between genres of music, and We need to incorporate other aspects of songs such as lyrics to differentiate between genres. For instance, Kaylin Pavlik, in her blogpost explained how she based on similar audio features, trained several machine learning models to classify songs into six main categories (EDM, Latin, Pop, R\u0026amp;B, Rap, \u0026amp; Rock). Her best model achieved an accuracy of 54.3%, which is a decent performance but not super accurate. I also tuned and trained a few machine learning models on this dataset, but I could not achieve higher performance.\n\r\rSupervised UMAP\rUMAP is an unsupervised dimensionality reduction algorithm, but we can also feed target labels to UMAP and make it a supervised algorithm by specifying the target variable. To make this happen in UWOT, we can give the target column (playlist_genre) as an input to y argument.\nsupervised_umap_embedding_df \u0026lt;- spotify_songs %\u0026gt;% select(-c(12:22)) %\u0026gt;% bind_cols(supervised_umap_embedding %\u0026gt;% as_tibble()) %\u0026gt;% dplyr::rename(umap_1 = V1, umap_2 = V2) %\u0026gt;% mutate(\rselected_artist = if_else( track_artist %in% selected_artists, as.character(track_artist), \u0026quot;\u0026quot;),\rpoint_size_selected_artist = if_else(track_artist %in% selected_artists, 0.5, 0.1),\rtrack_name_selected_artist = if_else(track_artist %in% selected_artists, track_name, NULL),\rgenre_selected_artist = if_else(track_artist %in% selected_artists,playlist_genre, NULL),\rpopular_tracks_selected_artist = if_else(\rtrack_artist %in% selected_artists \u0026amp; track_popularity \u0026gt; 70,shorter_names, NULL )) %\u0026gt;%\rdistinct(track_name, .keep_all = TRUE)\rsupervised_umap_embedding_df %\u0026gt;%\rggplot(aes(x = umap_1, y = umap_2 ,color = playlist_genre )) +\rgeom_point(size = 5.3,alpha =0.8 ) +\rgghighlight(selected_artist != \u0026quot;\u0026quot;,unhighlighted_params = list(alpha = 0.3,size = 0.8, color = \u0026#39;#FFE66D\u0026#39;)) +\rscale_color_tableau() +\rguides(size = FALSE,\rcolor = guide_legend(override.aes = list(alpha = 0.9,size = 12))) +\rgeom_text_repel(aes(label = popular_tracks_selected_artist),size = 7, family = \u0026#39;Montserrat\u0026#39;,\rpoint.padding = 2.2,\rbox.padding = .5,\rforce = 1,\rmin.segment.length = 0.1) +\rlabs(x = \u0026quot;\u0026quot;, y = \u0026quot;\u0026quot; ,\rcolor = \u0026#39;\u0026#39;) \rIt is no surprise that the results of the supervised UMAP are much better separated than the unsupervised one. We just gave additional information to UMAP to transform input data.\n\r","date":1580515200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580573526,"objectID":"f4e147bbb9061144d5695c3fecc5d1a2","permalink":"/post/2020-02-01-the-map-of-spotify-songs/","publishdate":"2020-02-01T00:00:00Z","relpermalink":"/post/2020-02-01-the-map-of-spotify-songs/","section":"post","summary":"In the 4th week of the Tidy Tuesday project, a very interesting and fun dataset was proposed to the data science community. The dataset contains information about thousands of songs on Spotify’s platform and along with their metadata and audio features. You can download the dataset can using the following piece of code.\n4th week of the Tidy Tuesday project\nspotify_songs \u0026lt;- readr::read_csv(\u0026#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv\u0026#39;)\rhead(spotify_songs)\r## # A tibble: 6 x 23\r## track_id track_name track_artist track_popularity track_album_id\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; ## 1 6f807x0~ I Don\u0026#39;t C~ Ed Sheeran 66 2oCs0DGTsRO98~\r## 2 0r7CVbZ~ Memories ~ Maroon 5 67 63rPSO264uRjW~\r## 3 1z1Hg7V~ All the T~ Zara Larsson 70 1HoSmj2eLcsrR~\r## 4 75Fpbth~ Call You ~ The Chainsm~ 60 1nqYsOef1yKKu~\r## 5 1e8PAfc~ Someone Y~ Lewis Capal~ 69 7m7vv9wlQ4i0L~\r## 6 7fvUMiy~ Beautiful~ Ed Sheeran 67 2yiy9cd2QktrN~\r## # .","tags":["R","XAI","Visualization"],"title":"The Map of Spotify Songs","type":"post"},{"authors":[],"categories":["XAI"],"content":"In my last post, I shared my notes from two talks at Explainable Data Science summer school in Luxembourg. Although every talk in the summer school was interesting and taught me new things but I particularly liked the \u0026ldquo;Explanations in Philosophy and Psychology\u0026rdquo; talk by Christos Bechlivanidis. I learned a lot of new things from this this talk specially because what I had focused by them was mainly about the more algorithmic aspect of explainability. In this post I am going to share my notes from this talk. The slides for this talk can be downloaded from this link.\nProducers and consumers of explanations in AI The developer who produces the explanation and evaluates it or as Miller et al (2017), the inmates are running the asylum phenomena. But what makes the good explanation for the developer is not necessarily good for other users of the system. The developer has a deeper understanding of the system. He/she might be cursed by his/her knowledge. In addition, However, his/her understanding, perspective, or goals may be different from the end-user. When producing explanations we need to carefully assess the complexity of the explanation and the knowledge and beliefs of the audience. Fred is a simple person and does not know anything about how neural networks work.\nWhat is an explanation? Explanations are always expressed in a contrastive manner and this contrast is usually implied by the context. Also, an explanations is not a description.\nNevertheless, answering \u0026ldquo;what is an explanation? \u0026quot; depends on who we ask.\nPhilosopher care about the normative side of an explanation and consider a (good) explanations to be a scientific explanation. But psychologists are interested in the descriptive side or what people consider as an explanation such as everyday explanations and what makes a good explanation.\nDifferent philosophers and scientists have proposed different definition for an explanation:\nAristotle: Citing the function, the material, the category or the (efficient) cause of X.\nHempel: Producing an (logical) argument whose conclusion is the explanandum X. Salmon: Stating everything that affects the probability of X. In other words, If P(Β|Α) ≠ P(Β) then A is explanatory relevant to B (e.g. P(pregnant | male \u0026amp; contraceptives) = P(pregnant | male)). One downside of this definition is that A does not need to have a high probability to be explanatory. For example,if P(Β|Α) - P(Β) = 0.000001, A is still explanatory relevant to B.\nKitcher: Showing how X fits a more general state of affairs\nSalmon: Stating the causal history of X. An explanation of X will trace the causal processes and interactions that lead to X. But, in general, not all causal events in the past of X are explanatory relevant to X. The causal model presented by Salmon has limitation in dealing with certain type of causation such as Double Prevention. Take the following image where a pink plane wants to drop a bomb on a city. A red plane with an alligator has a mission to shoot the pink plane and prevent the bombing. Also, A blue plane is there to prevent the red plane from shooting the pink plane. Now if the the blue plane successfully shoot the red plane and the pink plane successfully drops its bomb on the city, does the blue plane cause the bombardment of the city.\nTYPES OF EXPLANATIONS Why are we interested in explanations? We seek explanations because:\n To prepare ourselves for similar events in the future : Why is the phone turned off? because it has low battery. Just to explain, understand and assign responsibilities or blames in one-off events: why did the assassination of Duke Ferdinand lead to WWI? To rationalize actions that we take: Why didn\u0026rsquo;t you vote? Because it does not make any difference To find meaning To become satisfied from explanations. The explanations are like orgasms.  Nevertheless, the explanations may not fulfill their function or objective.\nA PREFERENCE FOR TELEOLOGY However, some people and children are often biased toward teleological explanations and they are looking for the purpose not the cause in their explanations: Mountains were created to be climbed.\nExplanations virtues The following properties have been proposed as criteria of a good explanation:\n  No Circularity: \u0026ldquo;This diet pill works because it helps people lose weight\u0026rdquo; and \u0026ldquo;People lose weight because they use this diet pill\u0026rdquo; are circular arguments. Although we can detect circularity from childhood, it is not always easy to identify it.\n  Coherence : Different elements of explanation must have internal consistency. It means that an explanation must be consistent with prior knowledge and current evidence.\nHowever, explaining the full set of elements (relations) may not be simple. For instance, to fully explain how a bicycle works we need to say how its various mechanical elements interact and constrain each other.\nExplanations are incomplete (even in science) because our mental representations are skeletal and incomplete. We tend to overestimate the depth of our own understanding. But the moment we start writing down our understanding, it becomes clear that our understanding is (mostly) shallow and incomplete.\nTiger example: Tigers have dark vertical stripes on their bodies but can we tell without looking at an image of a tiger whether these stripes are vertical or horizontal on the tiger\u0026rsquo;s tail and legs?!\nBicycle example: How much do you know how a bicycle work? Draw one!\nBut sometimes compression is also needed.\n We rely heavily in expertise of other minds. In an experiment carried out by Zemla et al. (2017), it was observed that compared to other measures such as complexity, articulation, coherence, generality and truth, one of the most important measures of explanation quality for the participants was “perceived expertise”. Perceived expertise indicates whether participants believed the explanation was written by an expert. The more we we trust in the expertise of the explainer, the more likely we accept the explanation.    Relevance:\n  From philosophical point of view, only factors that make a difference to the explanandum or have a causal role should be included to generate a good explanation. This level of details is ideal but not attainable and we usually find a trade-off by abstraction. Moreover, hyper-concrete explanations are too true to be good (e.g. extremely detailed maps).\n  Strevens (2007) proposed that in order to create an optimal explanation first we need to include every imaginable event and then we remove and abstract every event that makes no difference to the occurrence of the explanandum.\n  But is it true for non-experts? Philosophical view is different from non-expert view. Weisberg et al (2008) showed that adding irrelevant neuroscientific information (e.g. jargons) to an explanation increased its perceived quality by non-experts (naïve adults and neuroscience students).\n  Another experiment was carried out in which participant were asked to rate 3 types of explanations:\n    The average ratings for the abstract explanation was significantly lower than the irrelevant explanation.\n    On the other hand, the causal ratings for the abstract explanation was higher that the other two types of explanations\n      Match the epistemic status of the audience\n When producing explanations we need to carefully asses the knowledge and beliefs of the audience.    Simplicity\n Everyone agrees that explanations should be simple. But what do we mean by simplicity? (number of entities,number of entity types, shortest description? ) Paul Thagard (1989): simplicity is determined by the number of special required assumptions. People prefer these kinds of simpler explanations because fewer assumptions means fewer unexplained causes . However, when probabilities of assumptions are also included in the explanation, people choose the most probable explanation not the simplest. In case of equal probabilities, simpler explanations are preferred. Zemla et al (2017) it showed that the quality of explanations was positively correlated both with the number of unexplained causes and its length (level of detail)    Generality (Breadth– Scope - Coverage)\n Is it better to explain more things but less precisely or fewer things but more precisely? Thagard (1992) argues that an explanations that explains more pieces of evidence should be favored.    EVALUATING EXPLANATIONS To evaluate our explanations, we need to ask a public audience. This audience can be our friends, family members and colleagues who may not have any knowledge of the system. However, we should take into account that the these evaluations can be biased and noisy. For this reason, we need to take a larger sample of people.\nAlternatively, we can also collaborate with HCI experts, psychologist and behavioral scientist to evaluate explanations.\nDifferent groups of users see different explanation and same group of users see different explanation. We need to compare different versions of our explanations (like A/B testing) .\nWe can also utilize online crowdsourcing tools and run our analysis through them:\n •Amazon Mechanical Turk – mturk.co Prolific Academic - prolific.c Gorilla - gorilla.sc Testable - testable.org  What do we need to ask?   Do they think that the provided explanation is a good explanation?\n  How well do they understand this explanation?\n  Behavioral measures such as what did they expect from the explanation?\n  Summary ","date":1578182400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578227399,"objectID":"aa67a1664421ca5e838a968c013ded34","permalink":"/post/2020-01-05-euads-summer-school-explanations-in-philosophy-and-psychology/","publishdate":"2020-01-05T00:00:00Z","relpermalink":"/post/2020-01-05-euads-summer-school-explanations-in-philosophy-and-psychology/","section":"post","summary":"In my last post, I shared my notes from two talks at Explainable Data Science summer school in Luxembourg. Although every talk in the summer school was interesting and taught me new things but I particularly liked the \u0026ldquo;Explanations in Philosophy and Psychology\u0026rdquo; talk by Christos Bechlivanidis. I learned a lot of new things from this this talk specially because what I had focused by them was mainly about the more algorithmic aspect of explainability.","tags":["XAI"],"title":"EuADS Summer School 2019, Explanations in Philosophy and Psychology Talk by Christos Bechlivanidis","type":"post"},{"authors":[],"categories":["social network analysis"],"content":"\r\r","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581553695,"objectID":"cb1441a50bf3842fc41650be84b2848d","permalink":"/project/2020-01-01-how-do-people-share-on-telegram/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/project/2020-01-01-how-do-people-share-on-telegram/","section":"project","summary":"\r\r","tags":["social network analysis"],"title":"How Do People Share on Telegram?","type":"project"},{"authors":[],"categories":["XAI"],"content":"Last September, I had the opportunity to participate in the EXPLAINABLE DATA SCIENCE summer school in Kirchberg, Luxembourg. the summer school was organized by the European Association for Data Science (EuADS) and was held during 10-13 September.\nWhat I specifically liked about this summer school ( of course besides enjoying the the beautiful city of Luxembourg ) was the fact that it covered a vast variety of topics in the explainable machine learning (AI) literature, ranging from visualization, XAI techniques, causality to psychological aspects of explainability. In addition, the summer school has a special guest, the legendary Christopher Bishop who gave the inaugural lecture.\nYou can find the complete program and the presentations in the EuADS\u0026rsquo;s website. Nevertheless during some presentations in the summer school, I took notes and I summarized them.\n Disclaimer:\nSometimes it is not easy to keep up with the speaker and take notes. Also, it is possible that what I wrote down is just my interpretation and not what the speaker intened to say. For this reason, I do not guarantee that all details in this post are accurate or what the speakers wanted to communicate.\n From Data Mining to Data Science - Peter Flach (EuADS President) 1. What is Data Science?** \u0026ldquo;Data Science\u0026rdquo; is a vague term. One might mean by \u0026ldquo;data science\u0026rdquo;:\n It is the Science of data. This definition is more frequently used by statistician and machine learning and is more theoretical. Doing science with data. This definition is more applied and data intensive. Applying science to data. This definition is also heavily applied and data intensive.  Data is not the New Oil\nSome people are overexcited about having access to huge amount of data as if they have discovered an oil field. Likewise, they believe that they can simply extract value from data and this data is a new driver for progress and prosperity. However, even if we acquire data we cannot be certain that it is valuable and we can extract value from it.\nIn other words, data in and of itself does not present value:\ndata != value but\nBut data and knowledge together can result in value. Here knowledge can be an input or an output of the data.\ndata + knowledge = value\nNow data science can defined as follows:\nIt means that Data Science has three main ingredients:\n Data  Knowledge Value   The kinds of value that Data Science can generate are:\n scientific knowledge and models societal value economic value personal value  2. From Data Mining to Data Science Many consider data mining to be the father of data science. Others say that data mining is a subset of data science. While the interest for data mining is declining, data science gain more popularity.\nFig. 2: Data science is getting more popular than data mining\nFig. 3: CRISP data mining process\nIn data mining, we (implicitly) assume that there is some value in the and our aim is to use data mining techniques to uncover it. We can see data mining just like the extraction of a valuable metals from an existing mine.\nHowever, in data science, we first need to make sure that data has some value. In other words, data science can be seen as prospective, which means we are searching for a mine to extract metal material from it. That puts more emphasis on the exploratory aspect (nature) of data science, which includes the following activities:\nThese activities do not exist in the data mining space and distinguish data science and data mining.\nData Science Trajectory (DST) space\nData mining is a more sequential and more prescriptive approach where every operation must be implemented in a specific order. All activities in data mining can be a part of a data science project but not the opposite. For instance, not every data science project requires a modeling phase. On the other hand, the goal of data science for a specific application can be just data collection or data publication.\nRead more about this in the following paper:\n CRISP-DM Twenty Years Later: From Data Mining Processes to Data Science Trajectories. Fernando Martinez-Plumed, Lidia Contreras-Ochando, Cesar Ferri, Jose Hernandez-Orallo, Meelis Kull, NicolasLachiche, Maria Jose Ramirez-Quintana and Peter Flach. (Under review, 2019)\n 3. Responsible Data Science - The Human Factor (3/5) Data Science is for, about, by and with humans and human factors should be taken into consideration at every stage of a data science project. But it is not always easy to measure, define and ultimately achieve them.\nFor example, look at following table which shows the number and the percentage of students who applied and were admitted to a university.\nAt the first glance, this table might suggest a case of bias toward women in the admission process. However, further examinations show that the low percentage of total admissions for women is due to the fact that female applicants tended to apply to more difficult programs with an overall lower chance of acceptance while men applied to easier programs with a higher probability of acceptance. In other words, the difficulty of programs was a confounding factor that influenced the outcome not gender bias. It indicates measuring a human factor such as fairness is not easy because measuring bias is not easy. Furthermore, according to Goodhart\u0026rsquo;s Law, the moment we decide to use these metrics (e.g. bias) as our target to optimize, they are not good measures anymore.\nin the the rest of talk, Peter Flach discussed the relationship between GDPR and fairness and specifically he touched upon an important issue regarding data ownership and the role of GDPR for personal data protection.\nHe provided an example of authorship to demonstrate that solving data ownership is not a simple task. If someone writes a book about someone else (e.g. Clinton), the author has the ownership and the copyright not the the person whom the book is about.\nResources:\nSlides  Model-Based Machine Learning  This talk was dedicated to Sabine Krolak-Schwerdt who unfortunately passed away recently and was one of the founders of EuADS.\n Three factors have contributed to the popularity and the recent success of AI  More computing power Large amount of available data (Big data) More powerful algorithms  Dozens of machine learning algorithms have been developed.\nBut the \u0026lsquo;No Free Lunch Theorem\u0026rsquo; states that no universal machine learning can solve every problem.\n Averaged over all possible data distributions, every classification algorithm has the same error rate when classifying previously unobserved points. D. Wolpert (1996)\n This means that the goal of machine learning is to find an algorithm that is well-suited to the problem that being solved.\nModel-Based machine learning In the traditional machine learning paradigm, ML algorithms play a centric role. We start by an ML algorithm and we would like to know how we can apply it to our problem.\nHowever, in model-based machine learning paradigm, we are looking to find a well-matched algorithm for our problem. We can derive a model that best represents our problem by making explicit modeling assumptions.\nData and prior knowledge Scenario 1: we have collected a handful of voltage and current measurement from an experiment. and we want to determine the relationship between the current and voltage using these measurements.\nScenario 2: We have a huge database containing images from 1000 objects and our goal is to develop a model to classify each image correctly.\nBut are these datasets \u0026lsquo;big\u0026rsquo; enough for solving their corresponding problems. In the first scenario, although we only have a few measurements, we know that they are enough for finding the relationship between voltage and current. On the other hand, even though we have access to a large number of images for each class, these images do not represent the distribution of all images.\n The trade-off between prior knowledge and the amount of data needed\nTherefore, we must distinguish between two types of \u0026lsquo;big data\u0026rsquo;:\n In terms of size In terms of being statistically significant  Then, Chris Bishop argued that we need to incorporate uncertainties into our machine learning models otherwise the consequences would be dire. It means that we should never ever build direct classifier but we should build probabilistic classifier.\nWhy is that? Because not all misclassification errors are equal and different costs are assigned to different errors. Misclassifying a patient with cancer may be much worse than misclassifying a healthy patient. So, instead of minimizing the number of misclassified instances, we can minimize the expected (average costs).\nFinally, Chris Bishop presented a demo of a movie recommendation system.\nResources:\nSlides\nModel-Based Machine Learning ","date":1577750400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577792792,"objectID":"ec240810c875bcfce8efb59e8e36b305","permalink":"/post/2019-12-31-explainable-data-science-summer-school/","publishdate":"2019-12-31T00:00:00Z","relpermalink":"/post/2019-12-31-explainable-data-science-summer-school/","section":"post","summary":"Last September, I had the opportunity to participate in the EXPLAINABLE DATA SCIENCE summer school in Kirchberg, Luxembourg. the summer school was organized by the European Association for Data Science (EuADS) and was held during 10-13 September.\nWhat I specifically liked about this summer school ( of course besides enjoying the the beautiful city of Luxembourg ) was the fact that it covered a vast variety of topics in the explainable machine learning (AI) literature, ranging from visualization, XAI techniques, causality to psychological aspects of explainability.","tags":["XAI","Machine Learning"],"title":"Explainable Data Science Summer School","type":"post"},{"authors":[],"categories":["R","Tidy Tuesday"],"content":"\r\rFor six years, I used python exclusively as the primary tool for carrying out my data science tasks and running my experiments. Recently, I have started using Tidyverse packages and tools in R for my data science activities. I am completely fascinated by how these tools make it easy for me to perform analysis and create nice visualization. Since then, I have tried to participate in the weekly Tidy Tuesday project.\rYou can find my submissions on this page.\n2020\rWeek 39 - Himalayan Peaks\r\rWeek 37 - Friends\r\rPalmere Penguines\r\rWeek 12\r\rWeek 3\r\r\r2019\rWeek 52 - Christmas Songs\r\r\r\r\rWeek 51 -Adoptable dogs\rWeek 46 - Code in CRAN Packages\r\r\rWeek 36 - Moore’s Law\r\rWeek 35 - Simpsons Guest Stars\r\r","date":1577577600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577577600,"objectID":"1720f1c6afbab5514e89f8da30d0ae5a","permalink":"/project/2019-12-29-tidy-tuesday-submissions/","publishdate":"2019-12-29T00:00:00Z","relpermalink":"/project/2019-12-29-tidy-tuesday-submissions/","section":"project","summary":"For six years, I used python exclusively as the primary tool for carrying out my data science tasks and running my experiments. Recently, I have started using Tidyverse packages and tools in R for my data science activities. I am completely fascinated by how these tools make it easy for me to perform analysis and create nice visualization. Since then, I have tried to participate in the weekly Tidy Tuesday project.","tags":["TidyTuesday"],"title":"Tidy Tuesday Submissions","type":"project"},{"authors":[],"categories":[],"content":"Welcome to Slides Academic\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34;\rif porridge == \u0026#34;blueberry\u0026#34;:\rprint(\u0026#34;Eating...\u0026#34;)\r Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}}\r{{% fragment %}} **Two** {{% /fragment %}}\r{{% fragment %}} Three {{% /fragment %}}\rPress Space to play!\nOne Two Three  A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}}\r- Only the speaker can read these notes\r- Press `S` key to view\r{{% /speaker_note %}}\rPress the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/img/boards.jpg\u0026#34; \u0026gt;}}\r{{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}}\r{{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}\r Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1,\r.reveal section h2,\r.reveal section h3 {\rcolor: navy;\r}\r Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Academic's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Muhammad Chenariyan Nakhaee","Djoerd Hiemstra","Mariëlle Stoelinga"],"categories":null,"content":"","date":1548979200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1548979200,"objectID":"81ebcad8bff3994e0bd682f223337921","permalink":"/publication/ict-open/","publishdate":"2019-01-01T00:00:00Z","relpermalink":"/publication/ict-open/","section":"publication","summary":"In this paper we reviewed the recent literature on the use of machine learning in rail track maintenance.","tags":["Machine Learning","Railway Maintenance"],"title":"The Recent Applications of Machine Learning in Rail Track Maintenance A Survey","type":"publication"},{"authors":["Muhammad Chenariyan Nakhaee","Djoerd Hiemstra","Mariëlle Stoelinga","Martijn van Noort"],"categories":null,"content":"","date":1548979200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1548979200,"objectID":"7856548e6f80a594d9293493a7e5c990","permalink":"/publication/rssrail/","publishdate":"2019-01-01T00:00:00Z","relpermalink":"/publication/rssrail/","section":"publication","summary":"In this paper we reviewed the recent literature on the use of machine learning in rail track maintenance.","tags":["Machine Learning","Railway Maintenance"],"title":"The Recent Applications of Machine Learning in Rail Track Maintenance A Survey","type":"publication"},{"authors":null,"categories":null,"content":"","date":1546300800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1546300800,"objectID":"6d99026b9e19e4fa43d5aadf147c7176","permalink":"/contact/","publishdate":"2019-01-01T00:00:00Z","relpermalink":"/contact/","section":"","summary":"Hello!","tags":null,"title":"Landing Page","type":"widget_page"},{"authors":["Enno Ruijter","Carlos E. Budde","Muhammad Chenariyan Nakhaee","Mariëlle Stoelinga","Doina Bucur","Djoerd Hiemstra","Stefano Schivo"],"categories":null,"content":"","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"7fd08c0bae599921a279fc4fb66418a7","permalink":"/publication/ffort/","publishdate":"2019-01-01T00:00:00Z","relpermalink":"/publication/ffort/","section":"publication","summary":"This paper presents FFORT (the Fault tree FOResT) A large, diverse, extendable, and open benchmark suite consisting of fault tree models, together with relevant metadata.","tags":["Fault Trees"],"title":"FFORT A benchmark set for fault tree analysis","type":"publication"}]