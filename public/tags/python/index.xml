<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python | Muhammad Chenariyan Nakhaee</title>
    <link>/tags/python/</link>
      <atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <description>Python</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Wed, 28 Oct 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/avatar.jpg</url>
      <title>Python</title>
      <link>/tags/python/</link>
    </image>
    
    <item>
      <title>TikTok API</title>
      <link>/post/2020-10-28-tiktok-api/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      <guid>/post/2020-10-28-tiktok-api/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(reticulate)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How Easy Is It to Understand What Donald Trump Says?</title>
      <link>/post/2020-10-19-readability-of-trump-and-biden-speeches/</link>
      <pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate>
      <guid>/post/2020-10-19-readability-of-trump-and-biden-speeches/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Aside from their political differences, Donald Trump and Barack Obama have very contrasting personalities, traits and characters. Obama is known to be a great communicator and an articulate speaker whose speeches are used in English classes to show how one should speak proper English. On the other hand, Trump is not the most eloquent English speaker or US president in history. Every now and then, you can find a clip on the web where Donald Trump is being mocked for the way he speaks or mispronounces words. This is so obvious that even non-native English speakers can notice how Trump’s speeches are very simple and inarticulate. Of course, this was not a bad thing for Trump at all. Actually, almost every political analyst that you see on the news talks about the fact that a vast majority of Trump’s fervent supporters are not college-educated Americans. We can attribute this to the fact that he knows how to speak to his audience and his base supporters using their language (Although it is more likely that he cannot speak better English better than this level).&lt;/p&gt;
&lt;p&gt;This post will investigate how difficult it is to understand what each US politicians talked about in the 2020 US Election cycle. I will use several readability metrics that can help us compute text comprehensibility. A wide range of these measures are implemented in the &lt;a href=&#34;https://github.com/shivam5992/textstat&#34;&gt;{&lt;code&gt;textstat&lt;/code&gt;}&lt;/a&gt; python package, and it is super easy to calculate them using this package.&lt;/p&gt;
&lt;p&gt;I compiled a list of US Election-related speeches from rev.com and turned them into an R package called &lt;a href=&#34;https://github.com/mcnakhaee/us2020election&#34;&gt;&lt;code&gt;{us2020election}&lt;/code&gt;&lt;/a&gt;. I use this package as my data source for my analysis. Like some of my other posts, I use Python to perform the analysis and R to visualize my results. Now let’s get started by importing the necessary packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(reticulate)
library(ggthemes)
library(us2020election)
library(ggridges)
theme_set(theme_tufte())
theme_update(legend.position = &amp;#39;none&amp;#39;,
          text = element_text(family = &amp;#39;Lobser&amp;#39;),
          plot.title = element_text(margin = margin(t= 10,b= 5),family = &amp;#39;Lobser&amp;#39;),
          plot.subtitle = element_text(margin = margin(b= 10),family = &amp;#39;Lobser&amp;#39;),
          panel.background = element_rect(fill = &amp;#39;#FDF6E3&amp;#39;),
          plot.background = element_rect(fill = &amp;#39;#FDF6E3&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import numpy as np
import pandas as pd 
import textstat&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are several readability measures for English text included in {&lt;code&gt;textstat&lt;/code&gt;}. Calculating these measures is very straightforward and easy. I will explain what each metric represents in more details.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;us_election_speeches = r.us_election_speeches
us_election_speeches[&amp;#39;Flesch_Reading_Ease_formula&amp;#39;] = us_election_speeches[&amp;#39;text&amp;#39;].apply(lambda x: textstat.flesch_reading_ease(x))
us_election_speeches[&amp;#39;gunning_fog&amp;#39;] = us_election_speeches[&amp;#39;text&amp;#39;].apply(lambda x: textstat.gunning_fog(x))
us_election_speeches[&amp;#39;smog_index&amp;#39;] = us_election_speeches[&amp;#39;text&amp;#39;].apply(lambda x: textstat.smog_index(x))
us_election_speeches[&amp;#39;automated_readability_index&amp;#39;] = us_election_speeches[&amp;#39;text&amp;#39;].apply(lambda x: textstat.automated_readability_index(x))
us_election_speeches[&amp;#39;coleman_liau_index&amp;#39;] = us_election_speeches[&amp;#39;text&amp;#39;].apply(lambda x: textstat.coleman_liau_index(x))
us_election_speeches[&amp;#39;linsear_write_formula&amp;#39;] = us_election_speeches[&amp;#39;text&amp;#39;].apply(lambda x: textstat.linsear_write_formula(x))
us_election_speeches[&amp;#39;dale_chall_readability_score&amp;#39;] = us_election_speeches[&amp;#39;text&amp;#39;].apply(lambda x: textstat.dale_chall_readability_score(x))
us_election_speeches[&amp;#39;text_standard&amp;#39;] = us_election_speeches[&amp;#39;text&amp;#39;].apply(lambda x: textstat.text_standard(x))
us_election_speeches[&amp;#39;text_standard_float&amp;#39;] = us_election_speeches[&amp;#39;text&amp;#39;].apply(lambda x: textstat.text_standard(x,float_output  = True))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s look at the resulting dataframe.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;us_election_speeches &amp;lt;- py$us_election_speeches 
us_election_speeches %&amp;gt;% 
glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 286
## Columns: 15
## $ speaker                      &amp;lt;chr&amp;gt; &amp;quot;Barack Obama&amp;quot;, &amp;quot;Mike Pence&amp;quot;, &amp;quot;Kamala ...
## $ title                        &amp;lt;chr&amp;gt; &amp;quot;Barack Obama Campaign Roundtable Even...
## $ text                         &amp;lt;chr&amp;gt; &amp;quot;Barack Obama: (00:01)\n… or the ’40s ...
## $ date                         &amp;lt;chr&amp;gt; &amp;quot;Oct 21, 2020&amp;quot;, &amp;quot;Oct 21, 2020&amp;quot;, &amp;quot;Oct 2...
## $ location                     &amp;lt;chr&amp;gt; &amp;quot;Philadelphia, Pennsylvania&amp;quot;, &amp;quot;Portsmo...
## $ type                         &amp;lt;chr&amp;gt; &amp;quot;Roundtable&amp;quot;, &amp;quot;Campaign Speech&amp;quot;, &amp;quot;Camp...
## $ Flesch_Reading_Ease_formula  &amp;lt;dbl&amp;gt; 78.38, 67.99, 65.35, 85.99, 71.04, 81....
## $ gunning_fog                  &amp;lt;dbl&amp;gt; 8.80, 9.32, 10.80, 5.37, 8.30, 7.31, 5...
## $ smog_index                   &amp;lt;dbl&amp;gt; 9.8, 11.5, 11.6, 8.1, 10.4, 8.7, 8.2, ...
## $ automated_readability_index  &amp;lt;dbl&amp;gt; 9.0, 10.8, 11.5, 5.3, 8.8, 6.9, 5.5, 5...
## $ coleman_liau_index           &amp;lt;dbl&amp;gt; 7.95, 9.11, 8.71, 6.48, 8.12, 6.90, 6....
## $ linsear_write_formula        &amp;lt;dbl&amp;gt; 5.375000, 5.333333, 11.666667, 15.0000...
## $ dale_chall_readability_score &amp;lt;dbl&amp;gt; 5.77, 5.75, 6.27, 5.18, 5.65, 5.66, 5....
## $ text_standard                &amp;lt;chr&amp;gt; &amp;quot;8th and 9th grade&amp;quot;, &amp;quot;8th and 9th grad...
## $ text_standard_float          &amp;lt;dbl&amp;gt; 9, 9, 12, 6, 8, 6, 6, 5, 11, 6, 5, 7, ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I am going to visualize the changes in the distribution of speech complexity for each politician. To make things more, I will select a list of politicians that I’d like to analyze in this post.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;speakers &amp;lt;- c(&amp;#39;Barack Obama&amp;#39;,&amp;#39;Pete Buttigieg&amp;#39;,&amp;#39;Mike Pence&amp;#39;,&amp;#39;Elizabeth Warren&amp;#39;,&amp;#39;Bernie Sanders&amp;#39;,&amp;#39;Donald Trump&amp;#39;,&amp;#39;Kamala Harris&amp;#39;,&amp;#39;Joe Biden&amp;#39;,&amp;#39;Mike Bloomberg&amp;#39;)
custom_palette &amp;lt;-c(
    &amp;#39;Mike Bloomberg&amp;#39; = &amp;#39;#4E79A7&amp;#39;,
    &amp;#39;Amy Klobuchar&amp;#39; = &amp;#39;#4E79A7&amp;#39;,
    &amp;#39;Joe Biden&amp;#39; = &amp;#39;#4E79A7&amp;#39;,
    &amp;#39;Pete Buttigieg&amp;#39; = &amp;#39;#4E79A7&amp;#39;,
    &amp;#39;Elizabeth Warren&amp;#39; =  &amp;#39;#4E79A7&amp;#39;,
    &amp;#39;Barack Obama&amp;#39;  = &amp;#39;#4E79A7&amp;#39;,
    &amp;#39;Bernie Sanders&amp;#39; = &amp;#39;#4E79A7&amp;#39;,
    &amp;#39;Kamala Harris&amp;#39; = &amp;#39;#4E79A7&amp;#39;,
    &amp;#39;Donald Trump&amp;#39;  = &amp;#39;#E15759&amp;#39; ,
     &amp;#39;Mike Pence&amp;#39; = &amp;#39;#E15759&amp;#39; 
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also, I created a function to make ridge plots for each metric easier.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_plot &amp;lt;- function(metric = Flesch_Reading_Ease_formula,subtitle = subtitle) {
  metrics &amp;lt;- rlang::enquo(metric)
  us_election_speeches %&amp;gt;%
    separate_rows(speaker, sep = &amp;#39;,&amp;#39;) %&amp;gt;%
    filter(speaker %in% speakers, type != &amp;#39;Debate&amp;#39;) %&amp;gt;%
    add_count(speaker) %&amp;gt;%
    ggplot() +
    geom_density_ridges(aes(
      x = !!metrics ,
      y = speaker,
      fill = speaker
    )) +
    labs(x = &amp;#39;&amp;#39;, y = &amp;#39;&amp;#39;,title = &amp;quot;How Easy Is It to Comprehend Different US Politicians?&amp;quot;,subtitle = str_wrap(subtitle,width = 100)) +
    scale_fill_manual(values = custom_palette) 
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s look at several readability measure in more depth.&lt;/p&gt;
&lt;div id=&#34;flesch-reading-ease-scores&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Flesch Reading Ease scores&lt;/h3&gt;
&lt;p&gt;The first readability score that I will look at is based on the Flesch Reading Ease formula. It computes the number of syllables to determine how easy a piece of text is. The maximum value of Flesch Reading Ease is 122, and there is no minimum value for it. Higher Flesch Reading Ease scores indicate that the text (speech) is easier to understand by the audience. In our case, it would show how sophisticated each politician is in terms of language use. You can find more about this metric on &lt;a href=&#34;https://en.wikipedia.org/wiki/Flesch–Kincaid_readability_tests&#34;&gt;Wikipedia&lt;/a&gt;!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_plot(Flesch_Reading_Ease_formula ,
            subtitle = &amp;#39;The Flesch Reading Ease scores measure the complexity of a text document. Higher scores indicate a text is easier to comprehend.&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-10-19-readability-of-trump-and-biden-speeches/index.en_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;we can interpret the scores using the following table:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;13%&#34; /&gt;
&lt;col width=&#34;20%&#34; /&gt;
&lt;col width=&#34;66%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;School level&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;100.00–90.00&lt;/td&gt;
&lt;td&gt;5th grade&lt;/td&gt;
&lt;td&gt;Very easy to read. Easily understood by an average 11-year-old student.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;90.0–80.0&lt;/td&gt;
&lt;td&gt;6th grade&lt;/td&gt;
&lt;td&gt;Easy to read. Conversational English for consumers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;80.0–70.0&lt;/td&gt;
&lt;td&gt;7th grade&lt;/td&gt;
&lt;td&gt;Fairly easy to read.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;70.0–60.0&lt;/td&gt;
&lt;td&gt;8th &amp;amp; 9th grade&lt;/td&gt;
&lt;td&gt;Plain English. Easily understood by 13- to 15-year-old students.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;60.0–50.0&lt;/td&gt;
&lt;td&gt;10th to 12th grade&lt;/td&gt;
&lt;td&gt;Fairly difficult to read.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;50.0–30.0&lt;/td&gt;
&lt;td&gt;College&lt;/td&gt;
&lt;td&gt;Difficult to read.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;30.0–10.0&lt;/td&gt;
&lt;td&gt;College graduate&lt;/td&gt;
&lt;td&gt;Very difficult to read. Best understood by university graduates.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;10.0–0.0&lt;/td&gt;
&lt;td&gt;Professional&lt;/td&gt;
&lt;td&gt;Extremely difficult to read. Best understood by university graduates.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;gunning-fog-index&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Gunning fog index&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Gunning_fog_index&#34;&gt;The Gunning fog index&lt;/a&gt; is another metric to measure the complexity of a text document. It shows how many years of education one might need to understand a piece of text. Larger values of the Gunning fog index correspond to more difficult writings.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_plot(gunning_fog,subtitle = &amp;#39;The Gunning fog index measure the complexity of a text document. Larger values of the Gunning fog index correspond to more difficult writings.&amp;#39; )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-10-19-readability-of-trump-and-biden-speeches/index.en_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-smog-index&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The SMOG index&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/SMOG&#34;&gt;The SMOG index&lt;/a&gt; computes the ratio of polysyllables (words with three or more syllables) in sentences to determine text complexity.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_plot(smog_index,subtitle = &amp;#39;The SMOG index measure the complexity of a text document. Larger values of the SMOG index indicate more difficult writings.&amp;#39; )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-10-19-readability-of-trump-and-biden-speeches/index.en_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;linsear-write-formula&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Linsear Write Formula&lt;/h3&gt;
&lt;p&gt;Like previous the metric, &lt;a href=&#34;https://en.wikipedia.org/wiki/Linsear_Write&#34;&gt;the Linsear Write Formula&lt;/a&gt; uses words with three or more syllables to compute text readability. It also relies on the sentence length to measure how difficult reading a text could be.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_plot(linsear_write_formula, subtitle = &amp;#39;The Linsear Write Formula measure the complexity of a text document. Larger values indicate more difficult writings.&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-10-19-readability-of-trump-and-biden-speeches/index.en_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;dale-chall-readability-score&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Dale–Chall_readability_formula&#34;&gt;Dale-Chall Readability Score&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This metric is different from the other metrics that we have talked about. It uses a dictionary of 3000 words that are easy to read and understand for a fourth-grade student. So, Words that are not in this dictionary are considered to be complex. The higher the Dale-Chall Score is, the more difficult it is to read a text.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_plot(dale_chall_readability_score,subtitle = &amp;#39;The Dale-Chall Readability Score measure the complexity of a text document. The higher the Dale-Chall Score is, the more difficult it is to read a text.&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-10-19-readability-of-trump-and-biden-speeches/index.en_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;960&#34; /&gt;
### A unified readability
We introduced several readability metrics, but each one of them might give us a slightly different result. There is a way in &lt;code&gt;textstats&lt;/code&gt; to combine all these metrics and have a single readability metric.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;us_election_speeches %&amp;gt;%
  filter(speaker %in% speakers) %&amp;gt;%
  mutate(text_standard = str_replace(text_standard,&amp;#39; and &amp;#39;,&amp;#39;-&amp;#39;),
        text_standard = factor(
    text_standard,
    levels = c(
      &amp;#39;4th-5th grade&amp;#39;,
      &amp;#39;5th-6th grade&amp;#39;,
      &amp;#39;6th-7th grade&amp;#39;,
      &amp;#39;7th-8th grade&amp;#39;,
      &amp;#39;8th-9th grade&amp;#39;,
      &amp;#39;9th-10th grade&amp;#39;,
      &amp;#39;10th-11th grade&amp;#39;,
      &amp;#39;11th-12th grade&amp;#39;,
      &amp;#39;12th-13th grade&amp;#39;,
      &amp;#39;14th-15th grade&amp;#39;
    )
  )) %&amp;gt;%
  count(speaker, text_standard) %&amp;gt;%
  mutate(n = n + 1) %&amp;gt;%
  ggplot()  +
  geom_col(aes(x = text_standard , y =  n, fill = speaker)) +
  labs(x = &amp;#39;&amp;#39;, y = &amp;#39;&amp;#39;, title = &amp;quot;How Easy Is It to Understand What Each US Politician Said in Their Campaign Speeches?&amp;quot;) +
  scale_fill_manual(values = custom_palette) +
  scale_y_log10() +
  facet_wrap(~ speaker, ncol = 1) +
  theme(axis.text  = element_text(size = 13),
        plot.title = element_text(size = 20,margin = margin(b = 10,t = 10)),
        strip.text = element_text(size = 15))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-10-19-readability-of-trump-and-biden-speeches/index.en_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Interestingly, we can observe that Trump never gave a speech to an audience with difficulty more than the 7th or 8th grade. We can also convert this readability metric to numbers to visualize and compare it to other metrics.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_plot(text_standard_float,subtitle = &amp;#39;The complexity of a text document were measured based on several readability metrics where larger values indicate more difficult writings.&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-10-19-readability-of-trump-and-biden-speeches/index.en_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;We can consistently see that Trump speeches are less sophisticated and less complex than the speeches given by the rest of politicians. We can attribute this to his lack of sophistication in terms of language, the fact that he knows how can speak to his audience or both. Also, we can notice that Mike Pence and Barack Obama seem to use a more an advanced language in their speeches.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;section&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Exploring Word Embeddings </title>
      <link>/post/2020-10-16-exploring-word-embeddings/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      <guid>/post/2020-10-16-exploring-word-embeddings/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(reticulate)
use_condaenv(&amp;#39;r-reticulate&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import whatlies&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model &amp;lt;- import(&amp;#39;pandas&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Explaining Machine Learning Models Using Contextual Importance and Contextual Utility</title>
      <link>/post/explaining-machine-learning-models-using-contextual-importance-and-contextual-utility/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/explaining-machine-learning-models-using-contextual-importance-and-contextual-utility/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-kinds-of-explanation-does-ciu-generate&#34;&gt;What Kinds of explanation does CIU generate?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-does-ciu-work&#34;&gt;How does CIU work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#a-toy-example-predicting-breast&#34;&gt;A toy example: predicting breast&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#permutation-feature-importance&#34;&gt;Permutation feature importance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#decision-tree-classifier&#34;&gt;Decision Tree Classifier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#random-forest-classifier&#34;&gt;Random Forest Classifier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gradient-boosting-classifier&#34;&gt;Gradient Boosting Classifier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#explaining-a-single-observation&#34;&gt;Explaining a single observation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#generating-textual-explanations&#34;&gt;Generating Textual Explanations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#drawbacks&#34;&gt;Drawbacks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Explainability is a hot topic in the machine learning research community these days. Over the past few years, many methods have been introduced to understand how a machine learning model makes a prediction. However, explainability is not an entirely new concept, and it was actually started a few decades ago. In this blog post, I will introduce a rather unknown but simple technique that was introduced almost 20 years ago. This technique is called &lt;a href=&#34;https://www.researchgate.net/publication/228897070_Explaining_results_of_neural_networks_by_contextual_importance_and_utility&#34;&gt;Contextual Importance and Utility (CIU)&lt;/a&gt; for explaining ML models and show you how we can explain any types of machine learning. This method relies on the notion of context is important.&lt;/p&gt;
&lt;p&gt;For example, imagine we are trying to predict house prices from a set of features such as the number of bedrooms and pools. If every house in the dataset has no pool (the current context), then the feature corresponding to it has no usefulness and no importance for predicting a model. On the other hand, in a city where most houses have one or two bedrooms (again the current context), houses with three or more bedrooms are more unusual.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-kinds-of-explanation-does-ciu-generate&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What Kinds of explanation does CIU generate?&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;It is a &lt;a href=&#34;https://christophm.github.io/interpretable-ml-book/taxonomy-of-interpretability-methods.html&#34;&gt;&lt;strong&gt;&lt;em&gt;model-agnostic&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; methods, and it can explain the output of any “black-box” machine learning model.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It produces &lt;a href=&#34;https://christophm.github.io/interpretable-ml-book/scope-of-interpretability.html&#34;&gt;&lt;strong&gt;&lt;em&gt;local&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; explanations, which means that the explanations are generated for individual instances (not the whole model), and they show which features are more important for an individual observation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It gives us &lt;a href=&#34;https://christophm.github.io/interpretable-ml-book/taxonomy-of-interpretability-methods.html&#34;&gt;&lt;strong&gt;&lt;em&gt;post-hoc&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; explanations as it is a method that processes the output of a machine learning model after training.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Unlike LIME and many other techniques, CIU does not approximate or transforms what a model predicts but instead directly explain predictions. It can also provide a contrastive explanation. For instance, why did the model predict rainy and not cloudy?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;how-does-ciu-work&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;How does CIU work?&lt;/h2&gt;
&lt;p&gt;CIT estimates two values that aim to explain the context in which a machine learning model predicts:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Contextual Importance (CI)&lt;/strong&gt; measures how much change in the range and output values can be attributed to one (or several) input variables. CU is based on the notion that a variable which results in a broader ranger of output values would be more critical. Formally, CIU is defined as follows:&lt;/p&gt;
&lt;p&gt;CI = (Cmax - Cmin)/(absmax - absmin)&lt;/p&gt;
&lt;p&gt;Contextual Utility (CU) indicates how favorable the current value of one (or several) input variables is for a high output value. CU is computed using the following formula:&lt;/p&gt;
&lt;p&gt;CU = (out - Cmin)/(Cmax - Cmin)&lt;/p&gt;
&lt;p&gt;Cmax and Cmin are the highest and lowest values that the output of an ML model &lt;em&gt;can&lt;/em&gt; take by changing the input feature(s). Obtaining Cmax and Cmin is computationally, and mathematically is not a trivial task. In the original paper, these values are computed using a Monte Carlo simulation, where a lot of observations were generated. Also, absmax and absmin indicate the absolute range of values that the output has taken. For example, In classification problems, the absolute minimum and maximum range of values are the predicted probabilities of machine learning models between 0 and 1.&lt;/p&gt;
&lt;p&gt;CIU is implemented both in &lt;a href=&#34;https://github.com/TimKam/py-ciu&#34;&gt;&lt;strong&gt;python&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/KaryFramling/ciu&#34;&gt;R&lt;/a&gt;. For simplicity, I will use its python implementation (&lt;em&gt;py-ciu library&lt;/em&gt;) in this blogpost.&lt;/p&gt;
&lt;p&gt;You can install &lt;code&gt;py-ciu&lt;/code&gt; using the pip command:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;pip install py-ciu&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;a-toy-example-predicting-breast&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A toy example: predicting breast&lt;/h2&gt;
&lt;p&gt;I will use the breast cancer dataset in scikit-learn to show how we can use CIU. I will train three different machine learning models, including a decision tree, a random forest, and a gradient boosting algorithm on this dataset and compute CI and CU values for a single instance from the test dataset.&lt;/p&gt;
&lt;p&gt;First, we need to load the necessary libraries and modules.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from ciu import determine_ciu
from sklearn.ensemble import GradientBoostingClassifier,RandomForestClassifier
from sklearn.inspection import permutation_importance
from sklearn.tree import DecisionTreeClassifier
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# for reproducability
np.random.seed(123)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we split the dataset into a training and test set. We train our machine learning models on the training dataset and evaluate their performance on the test dataset. Note that for explaining ML models, we should use samples from the test dataset and not the training dataset.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;X = pd.DataFrame(load_breast_cancer()[&amp;#39;data&amp;#39;])
y = load_breast_cancer()[&amp;#39;target&amp;#39;]
X.columns = load_breast_cancer()[&amp;#39;feature_names&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;X_train,X_test, y_train,y_test = train_test_split(X,y,stratify = y)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def fit_evaluate_model(clf):
  clf = clf.fit(X_train, y_train)
  print(&amp;#39; Accuracy on test dataset {}&amp;#39;.format(clf.score(X_test,y_test)))
  return clf&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;permutation-feature-importance&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Permutation feature importance&lt;/h3&gt;
&lt;p&gt;As mentioned before, CIU only generates local explanations and does not give us a global overview of how a model makes a prediction. To gain a better understanding of the global importance of the model, we can compute the permutation feature importance scores:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def print_permutation_importance(model):
  imp_features = []
  pi = permutation_importance(model, X_test, y_test,
                            n_repeats=30,
                           random_state=0)
  for i in pi.importances_mean.argsort()[::-1]:
       if pi.importances_mean[i] - 2 * pi.importances_std[i] &amp;gt; 0:
           print(f&amp;quot;{X_test.columns[i]:&amp;lt;8} &amp;quot;
                 f&amp;quot;{pi.importances_mean[i]:.3f} &amp;quot;
                 f&amp;quot; +/- {pi.importances_std[i]:.3f}&amp;quot;)
           imp_features.append(pi.importances_mean[i])
           if len(imp_features) == 0:
                print(&amp;#39;no important features&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;decision-tree-classifier&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Decision Tree Classifier&lt;/h3&gt;
&lt;p&gt;Since we just used a toy example, I will not be very picky about my model’s hyper-parameters and leave them to be the default values in sklearn.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;dt = DecisionTreeClassifier()
dt_fit = fit_evaluate_model(dt)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  Accuracy on test dataset 0.9370629370629371&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print_permutation_importance(dt_fit)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## worst perimeter 0.173  +/- 0.019
## worst concave points 0.145  +/- 0.023
## worst concavity 0.135  +/- 0.017
## worst area 0.063  +/- 0.014
## radius error 0.036  +/- 0.014
## worst smoothness 0.018  +/- 0.008
## mean area 0.017  +/- 0.006&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;random-forest-classifier&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Random Forest Classifier&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;rf = RandomForestClassifier(
)
rf_fit = fit_evaluate_model(rf)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  Accuracy on test dataset 0.972027972027972&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print_permutation_importance(rf_fit)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## worst texture 0.023  +/- 0.004
## mean texture 0.013  +/- 0.006
## worst smoothness 0.010  +/- 0.004
## mean concavity 0.010  +/- 0.005
## worst fractal dimension 0.006  +/- 0.003&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;gradient-boosting-classifier&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Gradient Boosting Classifier&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;gb = GradientBoostingClassifier()
gb_fit = fit_evaluate_model(gb)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  Accuracy on test dataset 0.9790209790209791&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print_permutation_importance(gb_fit)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## worst concave points 0.023  +/- 0.011
## mean concave points 0.021  +/- 0.010&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The random forest and gradient boosting classifiers have the same accuracy score; however, their most important features are different.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;explaining-a-single-observation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Explaining a single observation&lt;/h3&gt;
&lt;p&gt;Now let us explain how each model predicts a single example (observation) from the test dataset.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;example = X_test.iloc[1,:]
example_prediction = gb.predict(example.values.reshape(1, -1))
example_prediction_prob = gb.predict_proba(example.values.reshape(1, -1))
prediction_index = 0 if example_prediction &amp;gt; 0.5 else 1
print(f&amp;#39;Prediction {example_prediction}; Probability: {example_prediction_prob}&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Prediction [1]; Probability: [[0.10952357 0.89047643]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To obtain a CIU score, we need to compute the minimum and maximum observed value of each feature in the dataset.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def min_max_features(X_train):
  min_max = dict()
  for i in range(len(X_train.columns)):
      min_max[X_train.columns[i]] =[X_train.iloc[:,i].min(),X_train.iloc[:,i].max(),False]
  return min_max
  
min_max = min_max_features(X_train)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def explain_ciu(example,model):
  ciu = determine_ciu(
      example.to_dict(),
      model.predict_proba,
      min_max,
      1000,
      prediction_index,
  )
  return ciu&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;dt_ciu = explain_ciu(example,dt_fit)
rf_ciu = explain_ciu(example,rf_fit)
gb_ciu = explain_ciu(example,gb_fit)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;generating-textual-explanations&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Generating Textual Explanations&lt;/h3&gt;
&lt;p&gt;We can obtain a textual explanation of CIU which indicates which feature(s) can be important for our test example&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;dt_ciu.text_explain()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;The feature &amp;quot;mean radius&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;mean texture&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;mean perimeter&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;mean area&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;mean smoothness&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;mean compactness&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;mean concavity&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;mean concave points&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;mean symmetry&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;mean fractal dimension&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;radius error&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;texture error&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;perimeter error&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;area error&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;smoothness error&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;compactness error&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;concavity error&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;concave points error&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;symmetry error&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;fractal dimension error&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;worst radius&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;worst texture&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;worst perimeter&amp;quot;, which is highly important (CI=100.0%), is very typical for its class (CU=100.0%).&amp;#39;, &amp;#39;The feature &amp;quot;worst area&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;worst smoothness&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;worst compactness&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;worst concavity&amp;quot;, which is highly important (CI=100.0%), is very typical for its class (CU=100.0%).&amp;#39;, &amp;#39;The feature &amp;quot;worst concave points&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;worst symmetry&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;worst fractal dimension&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;rf_ciu.text_explain()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;The feature &amp;quot;mean radius&amp;quot;, which is important (CI=32.26%), is very typical for its class (CU=90.0%).&amp;#39;, &amp;#39;The feature &amp;quot;mean texture&amp;quot;, which is important (CI=35.48%), is unlikely for its class (CU=27.27%).&amp;#39;, &amp;#39;The feature &amp;quot;mean perimeter&amp;quot;, which is not important (CI=12.9%), is typical for its class (CU=50.0%).&amp;#39;, &amp;#39;The feature &amp;quot;mean area&amp;quot;, which is not important (CI=16.13%), is unlikely for its class (CU=40.0%).&amp;#39;, &amp;#39;The feature &amp;quot;mean smoothness&amp;quot;, which is not important (CI=12.9%), is typical for its class (CU=50.0%).&amp;#39;, &amp;#39;The feature &amp;quot;mean compactness&amp;quot;, which is not important (CI=9.68%), is unlikely for its class (CU=33.33%).&amp;#39;, &amp;#39;The feature &amp;quot;mean concavity&amp;quot;, which is not important (CI=16.13%), is not typical for its class (CU=20.0%).&amp;#39;, &amp;#39;The feature &amp;quot;mean concave points&amp;quot;, which is not important (CI=19.35%), is not typical for its class (CU=16.67%).&amp;#39;, &amp;#39;The feature &amp;quot;mean symmetry&amp;quot;, which is important (CI=38.71%), is very typical for its class (CU=100.0%).&amp;#39;, &amp;#39;The feature &amp;quot;mean fractal dimension&amp;quot;, which is not important (CI=6.45%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;radius error&amp;quot;, which is not important (CI=22.58%), is typical for its class (CU=71.43%).&amp;#39;, &amp;#39;The feature &amp;quot;texture error&amp;quot;, which is not important (CI=22.58%), is very typical for its class (CU=85.71%).&amp;#39;, &amp;#39;The feature &amp;quot;perimeter error&amp;quot;, which is not important (CI=22.58%), is unlikely for its class (CU=42.86%).&amp;#39;, &amp;#39;The feature &amp;quot;area error&amp;quot;, which is important (CI=38.71%), is unlikely for its class (CU=33.33%).&amp;#39;, &amp;#39;The feature &amp;quot;smoothness error&amp;quot;, which is not important (CI=3.23%), is very typical for its class (CU=100.0%).&amp;#39;, &amp;#39;The feature &amp;quot;compactness error&amp;quot;, which is not important (CI=12.9%), is typical for its class (CU=50.0%).&amp;#39;, &amp;#39;The feature &amp;quot;concavity error&amp;quot;, which is not important (CI=6.45%), is very typical for its class (CU=100.0%).&amp;#39;, &amp;#39;The feature &amp;quot;concave points error&amp;quot;, which is not important (CI=9.68%), is typical for its class (CU=66.67%).&amp;#39;, &amp;#39;The feature &amp;quot;symmetry error&amp;quot;, which is not important (CI=6.45%), is typical for its class (CU=50.0%).&amp;#39;, &amp;#39;The feature &amp;quot;fractal dimension error&amp;quot;, which is not important (CI=19.35%), is very typical for its class (CU=100.0%).&amp;#39;, &amp;#39;The feature &amp;quot;worst radius&amp;quot;, which is very important (CI=51.61%), is very typical for its class (CU=87.5%).&amp;#39;, &amp;#39;The feature &amp;quot;worst texture&amp;quot;, which is very important (CI=67.74%), is unlikely for its class (CU=33.33%).&amp;#39;, &amp;#39;The feature &amp;quot;worst perimeter&amp;quot;, which is very important (CI=70.97%), is typical for its class (CU=63.64%).&amp;#39;, &amp;#39;The feature &amp;quot;worst area&amp;quot;, which is very important (CI=61.29%), is typical for its class (CU=57.89%).&amp;#39;, &amp;#39;The feature &amp;quot;worst smoothness&amp;quot;, which is not important (CI=6.45%), is typical for its class (CU=50.0%).&amp;#39;, &amp;#39;The feature &amp;quot;worst compactness&amp;quot;, which is not important (CI=9.68%), is unlikely for its class (CU=33.33%).&amp;#39;, &amp;#39;The feature &amp;quot;worst concavity&amp;quot;, which is very important (CI=64.52%), is very typical for its class (CU=85.0%).&amp;#39;, &amp;#39;The feature &amp;quot;worst concave points&amp;quot;, which is important (CI=38.71%), is not typical for its class (CU=16.67%).&amp;#39;, &amp;#39;The feature &amp;quot;worst symmetry&amp;quot;, which is important (CI=25.81%), is typical for its class (CU=50.0%).&amp;#39;, &amp;#39;The feature &amp;quot;worst fractal dimension&amp;quot;, which is not important (CI=3.23%), is not typical for its class (CU=0.1%).&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;gb_ciu.text_explain()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;The feature &amp;quot;mean radius&amp;quot;, which is not important (CI=16.49%), is not typical for its class (CU=0.65%).&amp;#39;, &amp;#39;The feature &amp;quot;mean texture&amp;quot;, which is highly important (CI=90.14%), is not typical for its class (CU=3.76%).&amp;#39;, &amp;#39;The feature &amp;quot;mean perimeter&amp;quot;, which is not important (CI=2.63%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;mean area&amp;quot;, which is not important (CI=3.36%), is very typical for its class (CU=100.0%).&amp;#39;, &amp;#39;The feature &amp;quot;mean smoothness&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;mean compactness&amp;quot;, which is important (CI=34.53%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;mean concavity&amp;quot;, which is not important (CI=4.0%), is not typical for its class (CU=8.92%).&amp;#39;, &amp;#39;The feature &amp;quot;mean concave points&amp;quot;, which is important (CI=38.25%), is not typical for its class (CU=3.57%).&amp;#39;, &amp;#39;The feature &amp;quot;mean symmetry&amp;quot;, which is not important (CI=8.91%), is very typical for its class (CU=100.0%).&amp;#39;, &amp;#39;The feature &amp;quot;mean fractal dimension&amp;quot;, which is not important (CI=1.54%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;radius error&amp;quot;, which is not important (CI=10.53%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;texture error&amp;quot;, which is not important (CI=6.53%), is very typical for its class (CU=100.0%).&amp;#39;, &amp;#39;The feature &amp;quot;perimeter error&amp;quot;, which is not important (CI=1.48%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;area error&amp;quot;, which is very important (CI=57.97%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;smoothness error&amp;quot;, which is not important (CI=16.51%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;compactness error&amp;quot;, which is not important (CI=4.39%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;concavity error&amp;quot;, which is not important (CI=4.03%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;concave points error&amp;quot;, which is not important (CI=5.76%), is very typical for its class (CU=100.0%).&amp;#39;, &amp;#39;The feature &amp;quot;symmetry error&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;fractal dimension error&amp;quot;, which is not important (CI=21.47%), is not typical for its class (CU=17.33%).&amp;#39;, &amp;#39;The feature &amp;quot;worst radius&amp;quot;, which is not important (CI=1.27%), is very typical for its class (CU=100.0%).&amp;#39;, &amp;#39;The feature &amp;quot;worst texture&amp;quot;, which is very important (CI=60.61%), is not typical for its class (CU=13.75%).&amp;#39;, &amp;#39;The feature &amp;quot;worst perimeter&amp;quot;, which is important (CI=41.37%), is not typical for its class (CU=23.17%).&amp;#39;, &amp;#39;The feature &amp;quot;worst area&amp;quot;, which is not important (CI=19.51%), is typical for its class (CU=67.91%).&amp;#39;, &amp;#39;The feature &amp;quot;worst smoothness&amp;quot;, which is not important (CI=18.24%), is unlikely for its class (CU=48.97%).&amp;#39;, &amp;#39;The feature &amp;quot;worst compactness&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;worst concavity&amp;quot;, which is not important (CI=10.79%), is very typical for its class (CU=100.0%).&amp;#39;, &amp;#39;The feature &amp;quot;worst concave points&amp;quot;, which is important (CI=42.94%), is not typical for its class (CU=4.32%).&amp;#39;, &amp;#39;The feature &amp;quot;worst symmetry&amp;quot;, which is not important (CI=5.86%), is not typical for its class (CU=0.1%).&amp;#39;, &amp;#39;The feature &amp;quot;worst fractal dimension&amp;quot;, which is not important (CI=0.0%), is not typical for its class (CU=0.1%).&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;drawbacks&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Drawbacks&lt;/h3&gt;
&lt;p&gt;Although CIU is a brilliant and simple technique, I believe it has the following drawbacks:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;In regression problems, the range of possible values for the target variable can be infinite, which somehow does not make sense when we want to compute CIU. The authors said that they had put a limit on the range of values.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Computing the range of values can be a little bit misleading, especially when we have outliers in the dataset.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is not clear how we can get a global explanation for the model using CIU.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Analyzing the 2020 Democratic Presidential Debates - Part 2</title>
      <link>/post/2020-03-08-analayzing-the-2020-democratic-presidential-debates-part-2/</link>
      <pubDate>Sun, 08 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/post/2020-03-08-analayzing-the-2020-democratic-presidential-debates-part-2/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;Many of us could not watch every 2020 Democratic Primary debate. It was important for some of us to know what happened during the debates. In my case, I was reading about what happened in debates in some online newspapers, or I watched a highlight of a debate on Youtube the next day. However, they only give a summary of a debate or just broadcast a portion of debates that includes a heated exchange of opinions between candidates. As a result, many important issues raised by candidates will be &lt;strong&gt;ignored and forgotten in the&lt;/strong&gt; aftermath of a debate. So, it is crucial to summarize the debate’s content so that everyone could understand what went on in the debate and what issues each candidate addressed during his/her speech. In this blog post, I will show you how I used some NLP techniques for exploring the content of debates and give you a comprehensive overview of topics that each candidate discussed.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mcnakhaee.com/post/2020-02-23-the-most-eloeuent-democratic-candidate/&#34;&gt;In my last blog post&lt;/a&gt;, I explained that I had the three following goals in mind when I started exploring the 2020 Democratic Debates :&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;To know how eloquent presidential candidates are.&lt;/li&gt;
&lt;li&gt;To find out who used more positive or more negative words in his/her speech by performing sentiment analysis.&lt;/li&gt;
&lt;li&gt;A map of topics, individuals, and entities that each candidate mentioned in his/her speech by using named entity recognition and network analysis..&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I only discussed how I approached the first two aspects of my experiment in my last blogpost. Now it is time to investigate the third and last one.&lt;/p&gt;
&lt;p&gt;Initially, my aim was to use network analysis to determine potential allies and enemies on the debate stage. For example, &lt;a href=&#34;https://www.theguardian.com/us-news/2020/mar/04/mike-bloomberg-out-60-second-attack-elizabeth-warren-destroyed-campaign&#34;&gt;Elizabeth Warren mentioned Mike Bloomberg several times and attacked him harshly in the 9th debate&lt;/a&gt;. During the same debate, &lt;a href=&#34;https://www.independent.co.uk/news/world/americas/us-election/amy-klobuchar-pete-buttigieg-handshake-democratic-debate-video-a9348621.html&#34;&gt;Amy Klobuchar and Pete Buttigieg clashed bitterly with each other&lt;/a&gt;. These are just two instances of many other heated exchanges between the candidates that happened throughout the ten debates.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To make things more precise, I transformed my objective into two questions that I would like to answer:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;How many times did a candidate address (mention) other candidates during a debate?&lt;/li&gt;
&lt;li&gt;How did he/she refer to a candidate(in a friendly or unfriendly manner)?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;A simple approach to answering these questions is to store the names of all candidates in a variable (for example, a vector in R or a list in Python), iterate over the transcript, compute the sentiment, count and store the number of times that another candidate brought up a candidate’s name.&lt;/p&gt;
&lt;p&gt;However, this approach is a little bit challenging and requires a lot of manual data pre-processing efforts. For each democratic candidate, one must compile a comprehensive combination of ways that may be used to call a candidate, and to prepare such a list seems to be a very time-consuming task. For example, other candidates mentioned Bernie Sanders in many different ways, including Bernie, Bernie Sanders, or Senator Sanders.&lt;/p&gt;
&lt;p&gt;I realized that I could use Named Entity Recognition (NER), a technique from the Natural Language Processing (NLP) literature, to extract candidates’ names from the transcript and solve this problem more efficiently. Using this approach, I can find candidates’ names from the transcript, but I can also find the names of other politicians, individuals, and even organizations and further extend my analysis to include many more topics and issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;workflow&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;2. Workflow&lt;/h2&gt;
&lt;p&gt;I made use of both Python and R in my analysis. My workflow includes the following steps:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;I access the transcript of debates using this package.&lt;/li&gt;
&lt;li&gt;I use tidytext to split the transcript into multiple sentences and also for sentiment analysis.&lt;/li&gt;
&lt;li&gt;I extract several types of Named Entities from each sentence, using Spacy,&lt;/li&gt;
&lt;li&gt;I compute the sentiment of each sentence using TextBlob library in Python.&lt;/li&gt;
&lt;li&gt;I transferred the results to R for visualization. There, I visualize the network of mentions and entities using ggraph and ggplot library.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that I could have implemented all the steps in R. For instance, Spacy has an R wrapper called Spacyr, which gives the same functionality that I need for this analysis. However, I’d like to increase the number of tools that I can use. Notably, using Python and R side by side is an exciting challenge for me.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(demdebates2020)
library(tidytext)
library(tidygraph)
library(tidyverse)
library(ggraph)
library(gghighlight)
library(ggthemes)
library(kableExtra)
library(reticulate)
library(magrittr)
library(pluralize)
theme_set(
  theme_graph(base_family = &amp;#39;Montserrat&amp;#39;)  +
    theme(
      panel.border = element_blank(),
      plot.title = element_text(
        family = &amp;#39;Montserrat&amp;#39;,
        face = &amp;quot;bold&amp;quot;,
        colour = &amp;#39;#540b0e&amp;#39;,
        size = 42,
        margin = ggplot2::margin(40, 40, 20, 10),
        hjust = 0
      ),
      plot.subtitle =  element_text(
        family = &amp;#39;Montserrat&amp;#39;,
        face = &amp;quot;bold&amp;quot;,
        colour = &amp;#39;#7d4f50&amp;#39;,
        size = 30,
        margin = ggplot2::margin(20, 40, 80, 10),
        hjust = 0
      ),
      plot.caption =  element_text(
        family = &amp;#39;Montserrat&amp;#39;,
        face = &amp;quot;bold&amp;quot;,
        colour = &amp;#39;#540b0e&amp;#39;,
        size = 16,
        margin = ggplot2::margin(0, 0, 20, 20),
      ),
      legend.position = &amp;#39;none&amp;#39;,
      plot.background = element_rect(fill = &amp;#39;#FCF0E1&amp;#39;),
      
    )
)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;loading-the-dataset&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;2.2 Loading the dataset&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(debates) &lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table table-striped table-hover table-condensed table-responsive&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
speaker
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
background
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
speech
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
type
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
gender
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
debate
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
day
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
order
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Savannah Guthrie
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
All right. So with that business out of the way, we want to get to it. And we’ll start this evening with Senator Elizabeth Warren.
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Moderator
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
female
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Savannah Guthrie
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Senator, good evening to you.
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Moderator
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
female
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Elizabeth Warren
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Thank you. Good to be here.
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Candidate
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
female
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Savannah Guthrie
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
You have many plans - free college, free child care, government health care, cancellation of student debt, new taxes, new regulations, the breakup of major corporations. But this comes at a time when 71 percent of Americans say the economy is doing well, including 60 percent of Democrats. What do you say to those who worry this kind of significant change could be risky to the economy?
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Moderator
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
female
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Elizabeth Warren
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
So I think of it this way. Who is this economy really working for? It’s doing great for a thinner and thinner slice at the top. It’s doing great for giant drug companies. It’s just not doing great for people who are trying to get a prescription filled.
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Candidate
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
female
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Elizabeth Warren
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
It’s doing great for people who want to invest in private prisons, just not for the African Americans and Latinx whose families are torn apart, whose lives are destroyed, and whose communities are ruined.
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Candidate
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
female
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;tokenization&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;2.1. Tokenization&lt;/h3&gt;
&lt;p&gt;As I mentioned before, I use tidytext to tokenize the transcript dataset based on sentences. For sentence tokenization, you need to set &lt;code&gt;token = &#39;sentences&#39;&lt;/code&gt; in &lt;code&gt;unnest_tokens()&lt;/code&gt; function. I think sentence tokenization is a reasonable choice because candidates might change the subject or the tone of their speech in each sentence.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;debates &amp;lt;- debates %&amp;gt;%
 unnest_tokens(sentence, speech, token = &amp;#39;sentences&amp;#39;,to_lower = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(debates) &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(debates) %&amp;gt;%
 kable() %&amp;gt;%
 kable_styling(bootstrap_options = c(&amp;quot;striped&amp;quot;, &amp;quot;hover&amp;quot;, &amp;quot;condensed&amp;quot;, &amp;quot;responsive&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table table-striped table-hover table-condensed table-responsive&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
speaker
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
background
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
type
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
gender
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
debate
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
day
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
order
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
sentence
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Abby Phillip
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
(APPLAUSE)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Moderator
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
female
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
222
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Abby Phillip
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
(APPLAUSE)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Moderator
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
female
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
283
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Abby Phillip
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
(APPLAUSE)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Moderator
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
female
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
285
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Abby Phillip
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
(APPLAUSE)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Moderator
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
female
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
328
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Abby Phillip
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
(APPLAUSE)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Moderator
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
female
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
576
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Abby Phillip
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
(COMMERCIAL BREAK)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Moderator
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
female
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
284
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;named-entity-recognition-using-spacy&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;3. Named Entity Recognition using Spacy&lt;/h3&gt;
&lt;p&gt;Now we change to python for NER, but we need to install and import a few python libraries before starting the analysis.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import pandas as pd
import spacy
from textblob import TextBlob&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In RStudio and Rmarkdown notebooks, with the help of the &lt;code&gt;reticulate&lt;/code&gt; library, we can easily load the debate dataset in our R environment to our Python environment.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;debates = r.debates&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that in in the transcript dataset there are rows for both the candidates and the moderators who asked questions from candidates. However, we are particularly interested in what the candidates said, so we only filter rows corresponding to candidates.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;candidates = debates[(debates[&amp;#39;type&amp;#39;] == &amp;#39;Candidate&amp;#39;) &amp;amp; (pd.notnull(debates[&amp;#39;sentence&amp;#39;])) ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are almost ready to extract the named entities. However, to use Spacy’s NLP features such as NER, we first need to download and load a pre-trained English language model. There are &lt;a href=&#34;https://spacy.io/usage/models&#34;&gt;several English language models&lt;/a&gt; with different sizes available in Spacy. I used the largest language model available as it might be better and more accurate.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;nlp = spacy.load(&amp;#39;en_core_web_lg&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Spacy’s NER model is trained on the &lt;a href=&#34;https://catalog.ldc.upenn.edu/LDC2013T19&#34;&gt;OntoNotes 5&lt;/a&gt; corpus, and it can detect several types of named entities, including:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;TYPE&lt;/th&gt;
&lt;th&gt;DESCRIPTION&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;PERSON&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;People, including fictional.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;NORP&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Nationalities or religious or political groups.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;FAC&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Buildings, airports, highways, bridges, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;ORG&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Companies, agencies, institutions, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;GPE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Countries, cities, states.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;LOC&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Non-GPE locations, mountain ranges, bodies of water.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;PRODUCT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Objects, vehicles, foods, etc. (Not services.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;EVENT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Named hurricanes, battles, wars, sports events, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;WORK_OF_ART&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Titles of books, songs, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;LAW&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Named documents made into laws.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;LANGUAGE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Any named language.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;DATE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Absolute or relative dates or periods.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;TIME&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Times smaller than a day.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;PERCENT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Percentage, including ”%“.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;MONEY&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Monetary values, including unit.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;QUANTITY&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Measurements, as of weight or distance.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;ORDINAL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;“first”, “second”, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;CARDINAL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Numerals that do not fall under another type.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As you can see, there are many types of named entities, but I narrow down my analysis to just a handful of them, including &lt;code&gt;PERSON&lt;/code&gt;, &lt;code&gt;ORG&lt;/code&gt;, &lt;code&gt;GPE&lt;/code&gt;, &lt;code&gt;NORP&lt;/code&gt;, &lt;code&gt;LAW&lt;/code&gt;, and &lt;code&gt;LOC&lt;/code&gt;.
The named entity labels are stored in &lt;code&gt;label_&lt;/code&gt; attribute. To do so, we need to create &lt;code&gt;Doc&lt;/code&gt; object using &lt;code&gt;nlp()&lt;/code&gt; method. When we call &lt;code&gt;nlp()&lt;/code&gt; on the input text, spacy uses the language model to tokenize the document first. Then, spacy applies a tagger, parser, and named entity recognizer steps as its processing pipeline’s next components. The named entities can be accessed by &lt;code&gt;ents&lt;/code&gt; attribute of the document object.&lt;/p&gt;
&lt;p&gt;If you are interested to learn more about Spacy and how it works, I have provided some links at the end of this post.&lt;/p&gt;
&lt;p&gt;I define a python function that iterates over all named entities and see to which class of named entities (by default &lt;code&gt;PERSON&lt;/code&gt;) they belong. I apply this function to the transcript column in the original dataset and store each extracted type of entity as a separate column.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def extract_entities_delim(text,type_ent = &amp;#39;PERSON&amp;#39;):
  ent_text = &amp;#39;&amp;#39;
  doc = nlp(text)
  for e in doc.ents:
    if e.label_ == type_ent:
      ent_text = e.text+ &amp;#39;;&amp;#39; + ent_text 
  return ent_text&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;candidates[&amp;#39;PERSON&amp;#39;] = candidates[&amp;#39;sentence&amp;#39;].apply(lambda x:extract_entities_delim(x))
candidates[&amp;#39;ORG&amp;#39;] = candidates[&amp;#39;sentence&amp;#39;].apply(lambda x:extract_entities_delim(x,&amp;#39;ORG&amp;#39;))
candidates[&amp;#39;GPE&amp;#39;] = candidates[&amp;#39;sentence&amp;#39;].apply(lambda x:extract_entities_delim(x,&amp;#39;GPE&amp;#39;))
candidates[&amp;#39;NORP&amp;#39;] = candidates[&amp;#39;sentence&amp;#39;].apply(lambda x:extract_entities_delim(x,&amp;#39;NORP&amp;#39;))
candidates[&amp;#39;LAW&amp;#39;] = candidates[&amp;#39;sentence&amp;#39;].apply(lambda x:extract_entities_delim(x,&amp;#39;LAW&amp;#39;))
candidates[&amp;#39;LOC&amp;#39;] = candidates[&amp;#39;sentence&amp;#39;].apply(lambda x:extract_entities_delim(x,&amp;#39;LOC&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;sentiment-analysis&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;4. Sentiment Analysis&lt;/h3&gt;
&lt;p&gt;Next, I use TextBlob to compute each sentence’s sentiment and store its polarity score in a separate column called &lt;code&gt;polarity_sentiment&lt;/code&gt; (TextBlob also returns a &lt;code&gt;subjectivity&lt;/code&gt; score, but for simplicity, I will not use this score in my analysis). The polarity sentiment score is a value between -1 and 1. If the value is larger than 0, it means that the sentence has a positive sentiment. On the other hand, if the returned value is smaller than 0, it indicates that the sentence’s sentiment is negative.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def polarity_sentiment(text):
  blob = TextBlob(text)
  return blob.sentiment.polarity
  
candidates[&amp;#39;polarity_sentiment&amp;#39;] = candidates.sentence.apply(lambda x:polarity_sentiment(x))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;network-visualization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;5.Network Visualization&lt;/h2&gt;
&lt;p&gt;A network (graph) can nicely represent how candidates mentioned individuals and entities in their speeches. We have two types of nodes in this network:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The first set of nodes represent candidates on the debate stage (&lt;strong&gt;from nodes)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The second set of nodes represent named entities (including the name of candidates themselves) that the candidates referred to in their speeches (&lt;strong&gt;to&lt;/strong&gt; &lt;strong&gt;nodes&lt;/strong&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If a candidate mentions a named entity in his/her speech, we connect the candidate node and the named entity node via our network’s edge. It is also fair to assume that the candidate-entity network should be weighted because candidates tend to place a varying level of importance on different issues, topics, and people (named entities).&lt;/p&gt;
&lt;p&gt;We have two options for specifying weights for edges in the network:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;We can use the number of times that a candidate mentioned a named entity in his/her speech. This shows how much a named entity was important to that candidate.&lt;/li&gt;
&lt;li&gt;We can group by candidates and named entities and compute their average sentiment score. By doing so, we can measure how each candidate described these named entities. However, this approach might not be as accurate as we want.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Having said that, it is time to go back to R and visualize the network of candidates and named entities using the &lt;a href=&#34;https://github.com/thomasp85/ggraph&#34;&gt;&lt;code&gt;ggraph&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;tidygraph&lt;/code&gt; libraries. For each class of named entities, I use &lt;code&gt;as_tbl_graph()&lt;/code&gt; function, create a unique graph table dataset, and visualize the network.&lt;/p&gt;
&lt;p&gt;So, let us load the sentiment-entity dataset that I created in the Python environment to the R environment.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;candidates &amp;lt;- py$candidates&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(candidates) &lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table table-striped table-hover table-condensed table-responsive&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
X1
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
speaker
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
background
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
type
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
gender
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
debate
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
day
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
order
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
sentence
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
PERSON
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
ORG
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
GPE
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
NORP
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
LAW
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
LOC
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
polarity_sentiment
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
370
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Amy Klobuchar
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Candidate
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
female
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Well, first, the economy.
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.250
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
371
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Amy Klobuchar
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Candidate
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
female
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
We know that not everyone is sharing in this prosperity.
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.000
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
372
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Amy Klobuchar
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Candidate
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
female
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
And Donald Trump just sits in the White House and gloats about what’s going on, when you have so many people that are having trouble affording college and having trouble affording their premiums.
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Donald Trump;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.025
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
373
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Amy Klobuchar
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Candidate
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
female
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
So I do get concerned about paying for college for rich kids.
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.375
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
374
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Amy Klobuchar
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Candidate
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
female
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
I do.
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.000
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
375
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Amy Klobuchar
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Candidate
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
female
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
But I think my plan is a good one.
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.700
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div id=&#34;the-candidateperson-network&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;5.1 The Candidate/Person Network&lt;/h4&gt;
&lt;p&gt;First, I will visualize the candidate/person network. However, I should remind you that in the beginning of the democratic primary, many democratic candidates were competing against each other in the race and on the debate stage. If I were to visualize every individual that each candidate had ever in the network, the results would become unreadable. So, just like my last blog post, I selected a few democratic candidates to show my analysis.&lt;/p&gt;
&lt;p&gt;Furthermore, I will only highlight nodes corresponding to the top 6 democratic candidates and other interesting individuals, including Donald Trump and Barack Obama.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;interesting_individuals &amp;lt;-
 c(
  &amp;quot;Bernie Sanders&amp;quot; ,
  &amp;quot;Elizabeth Warren&amp;quot; ,
  &amp;quot;Mike Bloomberg&amp;quot;  ,
  &amp;quot;Pete Buttigieg&amp;quot; ,
  &amp;quot;Amy Klobuchar&amp;quot; ,
  &amp;quot;Joe Biden&amp;quot;,
  &amp;#39;Donald Trump&amp;#39;,
  &amp;#39;Barack Obama&amp;#39;
 )



custom_palette &amp;lt;-
  c(
    &amp;#39;Mike Bloomberg&amp;#39; = &amp;#39;#EDC948&amp;#39;,
    &amp;#39;Amy Klobuchar&amp;#39; = &amp;#39;#59A14F&amp;#39; ,
    &amp;#39;Joe Biden&amp;#39; = &amp;#39;#E15759&amp;#39;,
    &amp;#39;Pete Buttigieg&amp;#39; = &amp;#39;#B07AA1&amp;#39;,
    &amp;#39;Elizabeth Warren&amp;#39; =  &amp;#39;#F28E2B&amp;#39;,
    &amp;#39;Bernie Sanders&amp;#39; =  &amp;#39;#4E79A7&amp;#39; ,
    &amp;#39;Donald Trump&amp;#39; = &amp;#39;#BC3908&amp;#39;,
    &amp;#39;Barack Obama&amp;#39; = &amp;#39;#00afb9&amp;#39;,
    &amp;#39;Others&amp;#39; = &amp;#39;#540b0e&amp;#39;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;persons_graph_table &amp;lt;- candidates %&amp;gt;%
 separate_rows(PERSON, sep = &amp;#39;;&amp;#39;) %&amp;gt;%
 filter(speaker %in% interesting_individuals,PERSON != &amp;#39;&amp;#39;, debate %in% c(8, 9, 10)) %&amp;gt;%
 mutate(from = speaker, to = PERSON) %&amp;gt;%
 group_by(from, to) %&amp;gt;%
 summarize(n_mentions = n(),
      mean_sent = mean(polarity_sentiment),
      sent =case_when(mean_sent &amp;lt; -0.01 ~ &amp;#39;Negative&amp;#39;,
               mean_sent &amp;gt; 0.01 ~ &amp;#39;Positive&amp;#39;,
              TRUE ~ &amp;#39;Neutral&amp;#39; )
               ) %&amp;gt;%
 ungroup() %&amp;gt;%
 as_tbl_graph() %&amp;gt;%
 mutate(interesting_individuals = if_else(name %in% interesting_individuals, name, &amp;#39;Others&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;edge_cols &amp;lt;- c(&amp;#39;#e63946&amp;#39;,&amp;#39;#f1faee&amp;#39;,&amp;#39;#457B9D&amp;#39;)
ggraph(persons_graph_table, layout = &amp;#39;kk&amp;#39;) + 
  geom_edge_link(aes(edge_width = n_mentions,colour = sent )) +
  geom_node_point(aes(color = interesting_individuals ),size = 5) + 
  geom_node_label(aes(label = name,color = interesting_individuals),repel = TRUE,size= 8) + 
 scale_color_manual(values = custom_palette) +
  labs(title = &amp;#39;Who Mentioned Whom in the 2020 Democratic Debates?&amp;#39;) +
  scale_edge_colour_manual(values = edge_cols) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-08-analayzing-the-2020-democratic-presidential-debates-part-2/index_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;1920&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you look at the graph carefully, you will notice three issues with this network. First of all, the sentiment scores do not necessarily indicate how a candidate thinks about that person. For instance, Bernie Sanders and Khashoggi’s edge is red (i.e. negative sentiment), but Bernie Sanders did not talk negatively about Khashoggi at all but rather how he was murdered. Secondly, there are several nodes in the network that belong to the same individual. For example, Bernie Sanders tends to address other candidates by their first names, but other (younger) candidates usually use the last name to address each other.&lt;/p&gt;
&lt;p&gt;The third issue is that some nodes do not represent a person. The transcript dataset is full of errors, and many names are misspelled. Although Spacy is a very powerful library for NER, sometimes it gives us wrong results, and its detected named entities are not always correct. For this reason, we also need to perform a post-processing step in which we remove some incorrectly spelled words or replaced them with their correct forms. I found two ways to deal with these issues: 1. or we can use a name matching algorithm to match the partial names with its full name. This approach can be challenging because we need to have a list of all possible full names, which is only available for the candidates.2. We can manually find undesirable names and replace them with what we want.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;matching-candidate-names&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;5.1 Matching candidate names&lt;/h4&gt;
&lt;p&gt;A python library called &lt;code&gt;fuzzywuzzy&lt;/code&gt;can help us match two strings based on different similarity criteria. However, before using this library, I transform the original dataset into a long dataframe where each row belongs to a pair of candidate-person (from-to), and I move it back to our python environment.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;candidates_long &amp;lt;- candidates %&amp;gt;%
 filter(PERSON != &amp;#39;&amp;#39;) %&amp;gt;%
 separate_rows(PERSON, sep = &amp;#39;;&amp;#39;) 
head(candidates_long)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;a-tibble-6-x-16&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;A tibble: 6 x 16&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt; X1 speaker background type  gender debate   day order sentence PERSON ORG  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;
1 372 Amy Kl~ NA Cand~ female 1 1 11 And Don~ “Dona~ &lt;NA&gt;
2 372 Amy Kl~ NA Cand~ female 1 1 11 And Don~”&#34; &lt;NA&gt;
3 384 Amy Kl~ NA Cand~ female 1 1 99 It’s so~ “Bara~ &lt;NA&gt;
4 384 Amy Kl~ NA Cand~ female 1 1 99 It’s so~”&#34; &lt;NA&gt;
5 422 Amy Kl~ NA Cand~ female 1 1 329 But the~ “Dona~ &lt;NA&gt;
6 422 Amy Kl~ NA Cand~ female 1 1 329 But the~”&#34; &lt;NA&gt;
# … with 5 more variables: GPE &lt;chr&gt;, NORP &lt;chr&gt;, LAW &lt;chr&gt;, LOC &lt;chr&gt;,
# polarity_sentiment &lt;dbl&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;candidates_long = r.candidates_long&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s look at the full names of democratic candidates.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import pandas as pd
candidate_lists = pd.unique(candidates_long.speaker)
print(candidate_lists)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I define a python function called &lt;code&gt;match_names&lt;/code&gt;that uses &lt;code&gt;process.extractOne&lt;/code&gt; function to select the first matched named entity with at least 80 percent similarity to a candidate’s full name. The matched names are stored in a separate column called &lt;code&gt;dem_candidate_full_name&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from fuzzywuzzy import fuzz 
from fuzzywuzzy import process &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def match_names(name):
  try:
    return process.extractOne(name, candidate_lists,score_cutoff = 80)[0] 
  except:
    return None

candidates_long[&amp;#39;dem_candidate_full_name&amp;#39;] = candidates_long.PERSON.apply(lambda x: match_names(x) )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can return to R and continue our analysis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;candidates_long &amp;lt;- py$candidates_long
glimpse(candidates_long)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;a-word-of-caution&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;A word of caution&lt;/h4&gt;
&lt;p&gt;We need to be very careful with the results of the name-matching algorithm. There are too many politicians with the name ‘John’ and a John might refer to “John McCain” or “John Bolton” not the candidate “John Hickenlooper”. So, as a post-processing step, I manually explore the dataset to correct the few mistakes that the matching algorithm had made.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;candidates_long &amp;lt;- candidates_long %&amp;gt;%
  mutate(PERSON = if_else(
    !is.na(dem_candidate_full_name),
    dem_candidate_full_name,
    PERSON),
  PERSON = case_when(PERSON == &amp;#39;John Hickenlooper&amp;#39; &amp;amp; str_detect(sentence,&amp;#39;McCain&amp;#39;) ~ &amp;#39;John McCain&amp;#39;,
                      PERSON == &amp;#39;John Hickenlooper&amp;#39; &amp;amp; str_detect(sentence,&amp;#39;Bolton&amp;#39;) ~ &amp;#39;John Bolton&amp;#39;,
                      PERSON == &amp;#39;John Delaney&amp;#39; &amp;amp; speaker == &amp;#39;Joe Biden&amp;#39; ~&amp;#39;John McCain&amp;#39;,
                      PERSON == &amp;#39;John Delaney&amp;#39; &amp;amp; speaker == &amp;#39;   Amy Klobuchar&amp;#39; ~&amp;#39;John McCain&amp;#39;,
                      TRUE ~  PERSON)
  ) &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;manual-name-correction&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;5.2 Manual name correction&lt;/h3&gt;
&lt;p&gt;We have a better dataset now, but there are still a lot of inaccurate named entities or inconsistencies in the dataset. Let’s start by removing named entities that do not correspond with a real person.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;non_person &amp;lt;-
  c(
    &amp;#39;y adema&amp;#39; ,
    &amp;#39;Appalachia&amp;#39; ,
    &amp;#39;AUMF&amp;#39; ,
    &amp;#39;bias&amp;#39;,
    &amp;#39;nondisclosur&amp;#39; ,
    &amp;#39;Mathew 25&amp;#39;,
    &amp;#39;Idlib&amp;#39;,
    &amp;#39;ye&amp;#39;,
    &amp;#39;Everytown&amp;#39;,
    &amp;#39;Kurd&amp;#39;,
    &amp;#39;Roe V.&amp;#39;,
    &amp;#39;Wade&amp;#39;,
    &amp;#39;Trumpism&amp;#39;,
    &amp;#39;Casey&amp;#39;,
    &amp;#39;brown&amp;#39;,
    &amp;#39;Grandpa&amp;#39;,
    &amp;#39;Dad&amp;#39;,
    &amp;quot;Josh&amp;quot;,
    &amp;#39;Uighurs&amp;#39;,
    &amp;#39;Roe&amp;#39;,
    &amp;#39;PolitiFact&amp;#39;,
    &amp;#39;Latinx&amp;#39;,
    &amp;#39;Brady&amp;#39;,
    &amp;#39;pre-K.&amp;#39;,
    &amp;#39;Brady Bill&amp;#39;,
    &amp;#39;pro-Israel&amp;#39;,
    &amp;#39;ho&amp;#39;,
    &amp;#39;Dreamer&amp;#39;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have another problem left. Some individuals were mentioned in different ways, and we have several nodes for them in the graph. To solve this issue, I use &lt;code&gt;str_detect&lt;/code&gt; function from &lt;code&gt;stringr&lt;/code&gt; package to manually modify them names. I must say this was the most tedious and time-consuming part of my analysis!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;persons_graph_table &amp;lt;-  candidates_long %&amp;gt;%
  filter(speaker %in% interesting_individuals,
         !PERSON %in% non_person,
         nchar(PERSON)&amp;gt;1) %&amp;gt;%
  dplyr::rowwise() %&amp;gt;%
  mutate(dem_candidate_full_name = as.character(dem_candidate_full_name)) %&amp;gt;%
  mutate(from = speaker, to = PERSON) %&amp;gt;%
  mutate(
    to = case_when(
      to %in% c(
        &amp;#39;Donald&amp;#39;,
        &amp;#39;Donald Trump&amp;#39;,
        &amp;#39;Donald trump&amp;#39;,
        &amp;#39;Trump&amp;#39;,
        &amp;#39;President Trump&amp;#39;,
        &amp;quot;Donald Trump&amp;#39;s&amp;quot;
      ) ~ &amp;#39;Donald Trump&amp;#39;,
      to %in% c(&amp;#39;Hillar&amp;#39;,
                &amp;#39;Clinton&amp;#39;,
                &amp;#39;Hillary&amp;#39;) ~ &amp;#39;Hillary Clinton&amp;#39;,
      to %in% c(&amp;#39;Obama&amp;#39;,
                &amp;#39;Barack&amp;#39;) ~ &amp;#39;Barack Obama&amp;#39;,
      str_detect(to, &amp;#39;Trump&amp;#39;) ~ &amp;#39;Donald Trump&amp;#39;,
      str_detect(to, &amp;#39;Vind&amp;#39;) ~ &amp;#39;Vindman&amp;#39;,
      str_detect(to, &amp;#39;Assad&amp;#39;) ~ &amp;#39;Assad&amp;#39;,
      str_detect(to, &amp;#39;McCarthy&amp;#39;) ~ &amp;#39;McCarthy&amp;#39;,
      str_detect(to, &amp;#39;Trudeau&amp;#39;) ~ &amp;#39;Justin Trudeau&amp;#39;,
      str_detect(to, &amp;#39;Bannon&amp;#39;) ~ &amp;#39;Steve Bannon&amp;#39;,
      str_detect(to, &amp;#39;Netanyahu&amp;#39;) ~ &amp;#39;Netanyahu&amp;#39;,
      str_detect(to, &amp;#39;Martin Luther&amp;#39;) ~ &amp;#39;Martin Luther King&amp;#39;,
      str_detect(to, &amp;#39;Mandela&amp;#39;) ~ &amp;#39;Mandela&amp;#39;,
      str_detect(to, &amp;#39;Xi&amp;#39;) ~ &amp;#39;Xi Jinping&amp;#39;,
      str_detect(to, &amp;#39;Putin&amp;#39;) ~ &amp;#39;Putin&amp;#39;,
      str_detect(to, &amp;#39;Mitch&amp;#39;) ~ &amp;#39;Mitch Mcconnell&amp;#39;,
      str_detect(to, &amp;#39;Lindsey&amp;#39;) ~ &amp;#39;Lindsey Graham&amp;#39;,
      str_detect(to, &amp;#39;Romney&amp;#39;) ~ &amp;#39;Mitt Romney&amp;#39;,
      str_detect(to, &amp;#39;George&amp;#39;) ~ &amp;#39;George Bush&amp;#39;,
      str_detect(to, &amp;#39;Bush&amp;#39;) ~ &amp;#39;George Bush&amp;#39;,
      str_detect(to, &amp;#39;Turner&amp;#39;) ~ &amp;#39;Nina Turner&amp;#39;,
      str_detect(to, &amp;#39;Clyburn&amp;#39;) ~ &amp;#39;Jim Clyburn&amp;#39;,
      str_detect(to, &amp;#39;Cheney&amp;#39;) ~ &amp;#39;Dick Cheney&amp;#39;,
      str_detect(to, &amp;#39;Shaheen&amp;#39;) ~ &amp;#39;Jeanne Shaheen&amp;#39;,
      str_detect(to, &amp;#39;Hart&amp;#39;) ~ &amp;#39;Quentin Hart&amp;#39;,
      str_detect(to, &amp;#39;Cokie&amp;#39;) ~ &amp;#39;Cokie Roberts&amp;#39;,
      str_detect(to, &amp;#39;Kelly&amp;#39;) ~ &amp;#39;Laura Kelly&amp;#39;,
      str_detect(to, &amp;#39;Berry&amp;#39;) ~ &amp;#39;Seth Berry&amp;#39;,
      str_detect(to, &amp;#39;Grassley&amp;#39;) ~ &amp;#39;Chuck Grassley&amp;#39;,
      str_detect(to, &amp;#39;Tommy&amp;#39;) ~ &amp;#39;Tom Steyer&amp;#39;,
      str_detect(to, &amp;#39;Pelosi&amp;#39;) ~ &amp;#39;Nancy Pelosi&amp;#39;,
      str_detect(to, &amp;#39;Kim&amp;#39;) ~ &amp;#39;Kim Jong-un&amp;#39;,
      str_detect(to, &amp;#39;Pence&amp;#39;) ~ &amp;#39;Mike Pence&amp;#39;,
      str_detect(to, &amp;#39;Schatz&amp;#39;) ~ &amp;#39;Brian Schatz&amp;#39;,
      str_detect(to, &amp;#39;Gates&amp;#39;) ~  &amp;#39;Robert Gates&amp;#39;,
      str_detect(to, &amp;#39;Jill&amp;#39;) ~ &amp;#39;Jill Biden&amp;#39;,
      str_detect(to, &amp;#39;Casey Jo&amp;#39;) ~ &amp;#39;Casey Jo&amp;#39;,
      str_detect(to, &amp;#39;Franklin&amp;#39;) |
      str_detect(to, &amp;#39;FDR&amp;#39;) ~ &amp;#39;Franklin D. Roosevelt&amp;#39;,
      str_detect(to, &amp;#39;Welch&amp;#39;) ~ &amp;#39;Joseph Welch&amp;#39;,
      str_detect(to, &amp;#39;Beau&amp;#39;) ~ &amp;#39;Beau Biden&amp;#39;,
      str_detect(to, &amp;#39;Rudy Giuliani&amp;#39;) ~ &amp;#39;Rudy Giuliani&amp;#39;,
      str_detect(to, &amp;#39;Bolton&amp;#39;) ~ &amp;#39;John Bolton&amp;#39;,
      str_detect(to, &amp;#39;McCain&amp;#39;) ~ &amp;#39;John McCain&amp;#39;,
      str_detect(to, &amp;#39;Truman&amp;#39;) ~ &amp;#39;Harry Truman&amp;#39;,
      str_detect(to, &amp;#39;Dunford&amp;#39;) ~ &amp;#39;Joe Dunford&amp;#39;,
      str_detect(to, &amp;#39;Breyer&amp;#39;) ~ &amp;#39;Justice Breyer&amp;#39;,
      str_detect(to, &amp;#39;Cindy&amp;#39;) ~ &amp;#39;Cindy McCain&amp;#39;,
      to == &amp;#39;Dick&amp;#39; ~ &amp;#39;Uncle Dick&amp;#39;,
      to == &amp;#39;Charles&amp;#39; ~ &amp;#39;Charles Fried&amp;#39;,
      to == &amp;#39;JFK&amp;#39; |
        (to == &amp;#39;Kennedy&amp;#39; &amp;amp; speaker == &amp;#39;Joe Biden&amp;#39;) ~ &amp;#39;John F. Kennedy&amp;#39;,
      to == &amp;#39;Kennedy&amp;#39; &amp;amp; speaker == &amp;#39;Amy Klobuchar&amp;#39; ~ &amp;#39;Ted Kennedy&amp;#39;,
      to %in% c(&amp;#39;Joey&amp;#39;) ~ &amp;#39;Himself&amp;#39;,
      to %in% c(
        &amp;#39;Ady&amp;#39;,
        &amp;#39;Carl&amp;#39;,
        &amp;#39;Ady Barkan&amp;#39;,
        &amp;#39;Derek&amp;#39;,
        &amp;#39;Mark&amp;#39;,
        &amp;#39;Salvador&amp;#39;,
        &amp;#39;Rachael&amp;#39;,
        &amp;#39;Nicole&amp;#39;
      ) ~ &amp;#39;American Constituents&amp;#39;,
      to %in% c(
        &amp;#39;David&amp;#39;,
        &amp;#39;Chuck&amp;#39;,
        &amp;#39;Wolf&amp;#39;,
        &amp;#39;   Wolf&amp;#39;,
        &amp;#39;Margaret&amp;#39;,
        &amp;#39;Brianne&amp;#39;,
        &amp;#39;Adam&amp;#39;,
        &amp;#39;Jake&amp;#39;,
        &amp;#39;Norah&amp;#39;,
        &amp;#39;Judy&amp;#39;,
        &amp;#39;Gayle&amp;#39;,
        &amp;#39;Dana&amp;#39;,
        &amp;#39;Jorge - it&amp;#39;,
        &amp;#39;Lester&amp;#39;,
        &amp;#39;Rachel&amp;#39;
      ) ~ &amp;#39;Moderator&amp;#39;,
      TRUE ~ to
    )
  ) %&amp;gt;%
  group_by(from, to) %&amp;gt;%
  summarize(n_mentions = n()) %&amp;gt;%
  ungroup() %&amp;gt;%
  as_tbl_graph() %&amp;gt;%
  mutate(interesting_individuals = if_else(name %in% interesting_individuals, name, &amp;#39;Others&amp;#39;))  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can visualize the network with modified node names.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;edge_cols &amp;lt;- c(&amp;#39;#e63946&amp;#39;, &amp;#39;#f1faee&amp;#39;, &amp;#39;#457B9D&amp;#39;)
ggraph(persons_graph_table, layout = &amp;#39;nicely&amp;#39;) +
  geom_edge_link(aes(edge_width = n_mentions, alpha = n_mentions), color = &amp;#39;#540b0e&amp;#39;) +
  geom_node_point(aes(color = interesting_individuals),size = 6) +
  geom_node_label(
    aes(label = name, color = interesting_individuals),
    repel = TRUE,
    size = 8,
    label.r = 0.4,
    check_overlap = TRUE
  ) +
  scale_color_manual(values = custom_palette) +
  labs(title = &amp;#39;Individuals Mentioned by Top Democratic Candidates During the Democratic Primary Debates&amp;#39;,
       subtitle = &amp;#39;This graph shows which individuals or politicians were mentioned by top 6 democratic candidates over the course of first ten priamary debates.&amp;#39;,
       caption = &amp;#39;Visualization: @m_cnakhaee\n\n Source: https://github.com/favstats/demdebates2020&amp;#39;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-08-analayzing-the-2020-democratic-presidential-debates-part-2/index_files/figure-html/unnamed-chunk-32-1.png&#34; width=&#34;3840&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;candidates-interaction&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;5.3 Candidates interaction&lt;/h3&gt;
&lt;p&gt;In the last sections, I explained how the top 6 remaining candidates mentioned other individuals during their speeches on the debate stage. However, with a little bit of modification to our previous chunk of code, we can extend the analysis and investigate how all democratic candidates interacted with each other over the course of 10 debates.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#The name of all candidaes
all_candidates &amp;lt;- candidates_long %&amp;gt;%
  distinct(speaker) %&amp;gt;%
  pull()

candidates_graph_table &amp;lt;- candidates_long %&amp;gt;%
  filter(!is.na(dem_candidate_full_name),
         dem_candidate_full_name == PERSON) %&amp;gt;%
  rowwise() %&amp;gt;%
  mutate(debate = as.factor(debate)) %&amp;gt;%
  mutate(dem_candidate_full_name = as.character(dem_candidate_full_name)) %&amp;gt;%
  mutate(from = speaker, to = dem_candidate_full_name) %&amp;gt;%
  group_by(from, to, debate) %&amp;gt;%
  summarize(n_mentions = n()) %&amp;gt;%
  ungroup() %&amp;gt;%
  as_tbl_graph(directed = TRUE) %&amp;gt;%
  mutate(interesting_individuals = if_else(name %in% interesting_individuals, name, &amp;#39;Others&amp;#39;)) %&amp;gt;%
  activate(nodes) %&amp;gt;%
  mutate(bet_cent = centrality_betweenness(),
         deg_cent = centrality_degree())&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# preparing the circular layout for the network
# Credit to https://www.timlrx.com/2018/10/14/visualising-networks-in-asoiaf-part-ii/ for helping me with the circular layout
full_layout &amp;lt;-
  create_layout(graph = candidates_graph_table,
                layout = &amp;quot;linear&amp;quot;,
                circular = T)

xmin &amp;lt;- min(full_layout$x)
xmax &amp;lt;- max(full_layout$x)
ymin &amp;lt;- min(full_layout$y)
ymax &amp;lt;- max(full_layout$y)

ggraph(
  full_layout,
  layout = &amp;#39;manual&amp;#39;,
  x = x,
  y = y,
  circular = TRUE
) +
  geom_edge_arc(aes(edge_width = n_mentions,
                    alpha = n_mentions,),
                colour = &amp;#39;#540b0e&amp;#39;,) +
  geom_node_point(aes(color = interesting_individuals, size = deg_cent + 40)) +
  geom_node_text(
    aes(
      label = name,
      color = interesting_individuals,
      x = x * 1.15,
      y = y * 1.15,
      angle = ifelse(
        atan(-(x / y)) * (180 / pi) &amp;lt; 0,
        90 + atan(-(x / y)) * (180 / pi),
        270 + atan(-x / y) * (180 / pi)
      )
    ),
    size = 8
  ) +
  scale_color_manual(values = custom_palette) +
  labs(title = &amp;#39;The Network of Interactions Among Democratic Candidates During Democratic Primary Debates&amp;#39;,
       #subtitle = &amp;#39;This graph shows how democtratic candidates mentioned other candidates on the debate stage.&amp;#39;,
       caption = &amp;#39;Visualization: @m_cnakhaee\n\n Source: https://github.com/favstats/demdebates2020&amp;#39;) +
  expand_limits(x = c(xmin - 0.2, xmax + 0.2),
                y = c(ymin - 0.2, ymax + 0.2)) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-08-analayzing-the-2020-democratic-presidential-debates-part-2/index_files/figure-html/unnamed-chunk-34-1.png&#34; width=&#34;2880&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The results are self-explanatory and satisfying. One also can make an animation and show the network over time.&lt;/p&gt;
&lt;p&gt;Now, let’s repeat the same steps and visualize the network for other types of named entities.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;organization-and-companies-named-entities&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;5.4 Organization and companies named entities&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;non_org &amp;lt;- c(&amp;#39;Trump&amp;#39;,&amp;#39;Vindmen&amp;#39;,&amp;#39;a New Yorker&amp;#39;,&amp;#39;Title&amp;#39;,&amp;#39;Obama&amp;#39;,&amp;quot;Donald Trump&amp;#39;s&amp;quot;,&amp;#39;Bernie&amp;#39;,&amp;#39;state&amp;#39;,&amp;#39;Court&amp;#39;,&amp;#39;Ours&amp;#39;,&amp;#39;Education&amp;#39;)
non_org_laws &amp;lt;- c(&amp;#39;Green New Deal&amp;#39;,&amp;#39;Federal Controlled Substance Act&amp;#39;)

org_graph_table &amp;lt;- candidates %&amp;gt;%
  separate_rows(ORG, sep = &amp;#39;;&amp;#39;) %&amp;gt;%
  filter(!is.na(ORG)) %&amp;gt;%
  mutate(ORG = str_remove_all(ORG, &amp;#39;the &amp;#39;),
         ORG = str_remove_all(ORG, &amp;#39;this &amp;#39;),) %&amp;gt;%
  filter(
    
    speaker %in% interesting_individuals,!ORG %in% non_org,!ORG %in% non_org_laws,
    debate %in% c(6, 7, 8, 9, 10),
    nchar(ORG)&amp;gt;1
  ) %&amp;gt;%
  mutate(from = speaker, to = ORG) %&amp;gt;%
  group_by(from, to) %&amp;gt;%
  summarize(n_mentions = n()) %&amp;gt;%
  ungroup() %&amp;gt;%
  mutate(
    to = case_when(
      to %in% c(&amp;#39;United Nations&amp;#39;,
                &amp;#39;U.N.&amp;#39;,
                &amp;#39;UN&amp;#39;) ~ &amp;#39;United Nations&amp;#39;,
      str_detect(to, &amp;#39;Department&amp;#39;) &amp;amp;
        str_detect(to, &amp;#39;State&amp;#39;) ~ &amp;#39;Department of State&amp;#39;,
      str_detect(to, &amp;#39;Department&amp;#39;) &amp;amp;
        str_detect(to, &amp;#39;Defence&amp;#39;) ~ &amp;#39;Department of State&amp;#39;,
      str_detect(to, &amp;#39;Supreme&amp;#39;) &amp;amp;
        str_detect(to, &amp;#39;Court&amp;#39;) ~ &amp;#39;Supreme Court&amp;#39;,
      str_detect(to, &amp;#39;Treasury&amp;#39;) ~ &amp;#39;Department of the Treasury&amp;#39;,
      str_detect(to, &amp;#39;Unitetd&amp;#39;) &amp;amp;
        str_detect(to, &amp;#39;State&amp;#39;) ~ &amp;#39;United State&amp;#39;,
      str_detect(to, &amp;#39;Yale&amp;#39;) ~ &amp;#39;Yale&amp;#39;,
      TRUE ~ to
    )
  ) %&amp;gt;%
  as_tbl_graph() %&amp;gt;%
  mutate(interesting_individuals = if_else(name %in% interesting_individuals, name, &amp;#39;Others&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggraph(org_graph_table, layout = &amp;#39;nicely&amp;#39;) +
  geom_edge_link(aes(edge_width = n_mentions,alpha=n_mentions),
    colour = &amp;#39;#540b0e&amp;#39;) +
  geom_node_point(aes(color = interesting_individuals), size = 5) +
  geom_node_label(aes(label = name, color = interesting_individuals),
                  repel = TRUE,
                  size = 7) +
  scale_color_manual(values = custom_palette) +
  labs(title = &amp;#39;Organizations and Institutions Mentioned by Top Democratic Candidates During the Debates&amp;#39;,
       subtitle = &amp;#39;This plot shows which organizations and institutions were mentioned by top democratic candidates during the last 5 debates.&amp;#39;,
       caption = &amp;#39;&amp;#39;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-08-analayzing-the-2020-democratic-presidential-debates-part-2/index_files/figure-html/unnamed-chunk-36-1.png&#34; width=&#34;2880&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-network-of-named-entities-for-countries-and-cities&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;5.5 The network of named entities for countries and cities&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gpe_graph_table &amp;lt;- candidates %&amp;gt;%
  separate_rows(GPE, sep = &amp;#39;;&amp;#39;) %&amp;gt;%
  filter(!is.na(GPE)) %&amp;gt;%
  mutate(GPE = str_remove_all(GPE, &amp;#39;the &amp;#39;),
         GPE = str_remove_all(GPE, &amp;#39;this &amp;#39;)) %&amp;gt;%
  filter(speaker %in% interesting_individuals,
         debate %in% c(6, 7, 8, 9, 10)) %&amp;gt;%
  mutate(from = speaker, to = GPE) %&amp;gt;%
  group_by(from, to) %&amp;gt;%
  summarize(n_mentions = n()) %&amp;gt;%
  ungroup() %&amp;gt;%
  as_tbl_graph() %&amp;gt;%
  mutate(interesting_individuals = if_else(name %in% interesting_individuals, name, &amp;#39;Others&amp;#39;)) &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggraph(gpe_graph_table, layout = &amp;#39;nicely&amp;#39;) +
  geom_edge_link(aes(edge_width = n_mentions, alpha = n_mentions),
                 colour = &amp;#39;#540b0e&amp;#39;) +
  geom_node_point(aes(color = interesting_individuals), size = 5) +
  geom_node_label(aes(label = name, color = interesting_individuals),
                  repel = TRUE,
                  size = 9) +
  scale_color_manual(values = custom_palette) +
  labs(title = &amp;#39;Countries, Cities and States Mentioned by Top Democratic Candidates During the Last Five Primary Debates&amp;#39;,
       subtitle = &amp;#39;&amp;#39;,
       caption = &amp;#39;&amp;#39;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-08-analayzing-the-2020-democratic-presidential-debates-part-2/index_files/figure-html/unnamed-chunk-38-1.png&#34; width=&#34;3360&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-network-of-named-entities-for-laws&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;5.6 The network of named entities for laws&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;non_law &amp;lt;-
  c(&amp;#39;the ZIP Code&amp;#39;, &amp;quot;&amp;quot;)

law_graph_table &amp;lt;- candidates %&amp;gt;%
  separate_rows(LAW, sep = &amp;#39;;&amp;#39;) %&amp;gt;%
  filter(!is.na(LAW)) %&amp;gt;%
  mutate(LAW = str_remove_all(LAW, &amp;#39;the &amp;#39;)) %&amp;gt;%
  filter(speaker %in% interesting_individuals,!LAW %in% non_law) %&amp;gt;%
  mutate(from = speaker, to = LAW) %&amp;gt;%
  group_by(from, to) %&amp;gt;%
  summarize(n_mentions = n()) %&amp;gt;%
  ungroup() %&amp;gt;%
  mutate(
    to = case_when(
      str_detect(to , &amp;#39;Constitution&amp;#39;) ~ &amp;#39;Constitution&amp;#39;,
      str_detect(to , &amp;#39;Roe&amp;#39;) ~ &amp;#39;Roe V. Wade&amp;#39;,
      str_detect(to , &amp;#39;War Powers Act&amp;#39;) ~ &amp;#39;War Powers Act&amp;#39;,
      str_detect(to , &amp;#39;New START&amp;#39;) ~ &amp;#39;New START Treaty&amp;#39;,
      TRUE ~ to
    )
  ) %&amp;gt;%
  as_tbl_graph() %&amp;gt;%
  mutate(interesting_individuals = if_else(name %in% interesting_individuals, name, &amp;#39;Others&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggraph(law_graph_table, layout = &amp;#39;nicely&amp;#39;) +
  geom_edge_link(aes(edge_width = n_mentions, alpha = n_mentions), colour = &amp;#39;#540b0e&amp;#39;) +
  geom_node_point(aes(color = interesting_individuals), size = 5) +
  geom_node_label(aes(label = name, color = interesting_individuals),
                  repel = TRUE,
                  size = 7) +
  scale_color_manual(values = custom_palette) +
  labs(title = &amp;#39;Laws Mentioned by Top Democratic Candidates During the First Ten Primary Debates&amp;#39;,
       subtitle = &amp;#39;&amp;#39;,
       caption = &amp;#39;&amp;#39;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-08-analayzing-the-2020-democratic-presidential-debates-part-2/index_files/figure-html/unnamed-chunk-40-1.png&#34; width=&#34;2880&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-network-of-named-entities-for-nationalities-religious-or-political-groups&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;5.7 The network of named entities for nationalities, religious or political groups&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;non_norp &amp;lt;- c(&amp;#39;Coronavirus&amp;#39;, &amp;#39;&amp;#39;)
norp_graph_table &amp;lt;- candidates %&amp;gt;%
  separate_rows(NORP, sep = &amp;#39;;&amp;#39;) %&amp;gt;%
  filter(!is.na(NORP)) %&amp;gt;%
  mutate(NORP = singularize(NORP)) %&amp;gt;%
  filter(speaker %in% interesting_individuals,!NORP %in% non_norp,
         debate %in% c(6, 7, 8, 9, 10)) %&amp;gt;%
  mutate(from = speaker, to = NORP) %&amp;gt;%
  group_by(from, to) %&amp;gt;%
  summarize(n_mentions = n()) %&amp;gt;%
  ungroup() %&amp;gt;%
  mutate(
    to = case_when(
      str_detect(to, &amp;#39;African&amp;#39;) &amp;amp;
        str_detect(to, &amp;#39;American&amp;#39;) ~ &amp;#39;African-American&amp;#39;,
      str_detect(to, &amp;#39;republican&amp;#39;) ~ &amp;#39;Republican&amp;#39;,
      str_detect(to, &amp;#39;Democrat&amp;#39;) ~ &amp;#39;Democrat&amp;#39;,
      str_detect(to, &amp;#39;Jew&amp;#39;) ~ &amp;#39;Jew&amp;#39;,
      str_detect(to, &amp;#39;Palestinian&amp;#39;) ~ &amp;#39;Palestinian&amp;#39;,
      TRUE ~ to
    )
  ) %&amp;gt;%
  as_tbl_graph() %&amp;gt;%
  mutate(interesting_individuals = if_else(name %in% interesting_individuals, name, &amp;#39;Others&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggraph(norp_graph_table, layout = &amp;#39;nicely&amp;#39;) +
  geom_edge_link(aes(edge_width = n_mentions, alpha = n_mentions), colour = &amp;#39;#540b0e&amp;#39;) +
  geom_node_point(aes(color = interesting_individuals), size = 5) +
  geom_node_label(aes(label = name, color = interesting_individuals),
                  repel = TRUE,
                  size = 10) +
  scale_color_manual(values = custom_palette) +
  labs(title = &amp;#39;Nationalities, religious or Political Groups Mentioned by Top Democratic Candidates During the Last Five Primary Debates&amp;#39;,
       subtitle = &amp;#39;&amp;#39;,
       caption = &amp;#39;&amp;#39;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-08-analayzing-the-2020-democratic-presidential-debates-part-2/index_files/figure-html/unnamed-chunk-42-1.png&#34; width=&#34;3840&#34; /&gt;&lt;/p&gt;
&lt;p&gt;##Resources:
A very useful place to learn more how spacy works the spacy’s online course by one of its founders and developers.
[1] &lt;a href=&#34;https://course.spacy.io/en/&#34; class=&#34;uri&#34;&gt;https://course.spacy.io/en/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a href=&#34;https://www.youtube.com/watch?v=IqOJU1-_Fi0&amp;amp;t=676s&#34; class=&#34;uri&#34;&gt;https://www.youtube.com/watch?v=IqOJU1-_Fi0&amp;amp;t=676s&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is
&lt;a href=&#34;http://www.favstats.eu/post/demdebates/&#34; class=&#34;uri&#34;&gt;http://www.favstats.eu/post/demdebates/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tidymodel for Scikit-Learn Users and Vise Versa</title>
      <link>/post/2020-02-14-tidymodel-for-scikit-learn-users-and-vise-versa/</link>
      <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
      <guid>/post/2020-02-14-tidymodel-for-scikit-learn-users-and-vise-versa/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Advantages
There are many ways to do one thing
The output is a table which you can use as an input to everything that works with a table&lt;/p&gt;
&lt;p&gt;Disadvantages&lt;/p&gt;
&lt;p&gt;##Classification Models&lt;/p&gt;
&lt;div id=&#34;regression-models&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Regression Models&lt;/h2&gt;
&lt;div id=&#34;making-prediction&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Making Prediction&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;model-selection&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Model selection&lt;/h3&gt;
&lt;p&gt;reasonable defaults for tidymodel&lt;/p&gt;
&lt;p&gt;tidymodel by default tuning paramters are set for us. We can also specify them ourselves.&lt;/p&gt;
&lt;p&gt;you can even tune the preprocessing steps in Tidymodel.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;pipelines&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Pipelines&lt;/h2&gt;
&lt;p&gt;pipelines are handy:
they make your code much shorter
data leakage&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;unsupervised-learning&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Unsupervised Learning&lt;/h2&gt;
&lt;div id=&#34;pca&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;PCA&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;pre-processing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Pre-Processing&lt;/h2&gt;
&lt;p&gt;inverse transform&lt;/p&gt;
&lt;div id=&#34;section&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;p&gt;My preferable way&lt;/p&gt;
&lt;p&gt;Automatic machine learning&lt;/p&gt;
&lt;p&gt;parellal processing&lt;/p&gt;
&lt;p&gt;Things that are unique to Scikit-learn&lt;/p&gt;
&lt;p&gt;Things that are unique to Tidymodels&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://juliasilge.com/blog/best-hip-hop/&#34; class=&#34;uri&#34;&gt;https://juliasilge.com/blog/best-hip-hop/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>What Makes a Song Popular? An Explainable Machine Learning Approach</title>
      <link>/post/2020-02-11-what-makes-a-song-popular-an-explainable-machine-learning-approach/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      <guid>/post/2020-02-11-what-makes-a-song-popular-an-explainable-machine-learning-approach/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::opts_chunk$set(warning = FALSE, message = FALSE,eval = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tune)
library(rsample)
library(yardstick)
library(dials)
library(workflows)
library(parsnip)
library(infer)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#devtools::install_github(&amp;quot;tidymodels/tidymodels&amp;quot;)
#remotes::install_github(&amp;quot;wilkelab/ggtext&amp;quot;,build = &amp;#39;binary&amp;#39;)
library(tidyverse)
library(tidymodels)
library(lubridate)
library(corrr)
library(pins)
library(genius)
library(reticulate)

spotify_songs &amp;lt;- pin(read_csv(&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv&amp;#39;))
head(spotify_songs)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;spotify_songs &amp;lt;- spotify_songs %&amp;gt;%  
  dplyr::rowwise() %&amp;gt;% 
  mutate(shorter_names = unlist(str_split(track_name,&amp;#39;-&amp;#39;))[1]) &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;spotify_songs &amp;lt;- py$spotify_songs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Have you ever wondered why some songs from an artist become so popular and others are just total failure?
Look at the next plot. Even The Beetles had a few not so popular songs.&lt;/p&gt;
&lt;p&gt;So what can be the recipe for popularity? Or why does a song become(un)popular? Is it solely releated to the artists that play a song? Can it be the song’s audio features?&lt;/p&gt;
&lt;p&gt;##Exploratory Data Analysis&lt;/p&gt;
&lt;div id=&#34;machine-learning&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Machine Learning&lt;/h2&gt;
&lt;p&gt;Another more complex way to look at this problem is to use machine learning algorithms. We can train a machine learning model to accurately predict the popularity of a song. Now if we look inside the patterns that this model learning model has learned, we might be able to find out why a song has become popular or unpopular.
In the second part of this post, I will demonstrate how I designed a machine learning workflow to predict the popularity of songs based on several audio features. Here my goal from using an ML model is not just to predict popularity but rather to figure out which factors contribute to it.&lt;/p&gt;
&lt;p&gt;However, peeking inside an ML algorithm and discovering how it makes prediction is not alwayse straighforward. Only the inner-workings of a few ML algorithms such as decision trees and linear modelsare transparent. These algorithms are very simple and might be powerful enough to model the complexities and the common knowledge is that they are not accurate. Of course you can make a decision tree fairly accurate by increasing its depth but the resulting tree would become exteremly messy and hard to understand.In addition, deeper tree are more likely to overfit.&lt;/p&gt;
&lt;p&gt;There are also more powerful and more accurate algorithms such as random forests, xgboost or deep neural networks but understanding how they make predictions is very challenging (sometimes they are called black-box models). That is translated to a widespread belief amont ML community that there is a trade-off between the accuracy and the interpretability of an ML algorithm. However, a few other researchers reject this claim and believe it is just a popular myth and you can indeed find an interpretable and accurate ML algorithm.&lt;/p&gt;
&lt;p&gt;Anyways, over the past five years a lot of methods have been proposed to some “approximate” how an ML algorithm predicts an outcome. Two popular methods that are widely used to interpret machine learning algorithms are LIME and SHAP.&lt;/p&gt;
&lt;p&gt;We can look inside a machine learning algorithms from two aspects:&lt;/p&gt;
&lt;p&gt;Based on what feature values, an ML algorithm has made prediction about the popularity of “a particular” song. Local explanations
Global explanations such as feature importance scores to understand to the popularity of songs.&lt;/p&gt;
&lt;p&gt;In this part of my post, first I will train a random forest and an XGBoost model to predict song popularity and then I will discover how they make prediction using SHAP, LIME and feature importance scores. Hopefully, these patterns can help us better understand which factors might contribute to a song’s popularity.&lt;/p&gt;
&lt;p&gt;To use a explainable machine learning methods for this purpose, it is important to obtain a reasonable performance on the prediction task. Otherwise, the result would be unreliable and useless.&lt;/p&gt;
&lt;p&gt;I won’t use common pre-processing steps such as normalization because random forest and XGBoost are not sensitive to non-normalized data. Also, some pre-processing steps might make the interpretation of the results less intuitive.&lt;/p&gt;
&lt;p&gt;I have mainly used scikit-learn for training ML models but recently I have become passionately interested in the Tidymodels ecosystem. So, here I have decided to use Tidymodels and its features for model development.
Workflows are similar to &lt;code&gt;pipelines&lt;/code&gt; in scikit-learn.
My designed workflow consists of the following step:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;I create a preprocessing recipe using the &lt;code&gt;recipe&lt;/code&gt; package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I split the input dataset into a training and testing set&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I build a random forest and an XGBoost model using the &lt;code&gt;parsnip&lt;/code&gt; package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I use &lt;code&gt;tune&lt;/code&gt; package and tuning the hyper-paramters of the random forest and the XGBoost model.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I use&lt;code&gt;rsample&lt;/code&gt; package to perform cross-validation and train both models.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I evaluate the performance of the trained models based on metrics from the &lt;code&gt;yardstick&lt;/code&gt; package and select the best model.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://tidymodels.github.io/yardstick/reference/index.html&#34; class=&#34;uri&#34;&gt;https://tidymodels.github.io/yardstick/reference/index.html&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;7&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Finally, I explain the predictions of the machine learning model in hope of finding interesting patterns that might tell us something about why a song becomes popular. Not that this step is not implemented as a part of the Tidymodel workflow.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;machine-learning-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Machine Learning&lt;/h2&gt;
&lt;div id=&#34;pre-processing&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;pre-processing&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;bulding-the-ml-models&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Bulding the ML models&lt;/h3&gt;
&lt;p&gt;first we need to specify the type of the model that we want to train and if necessary its hyper-paramters. Then we have to determine the mode of the ML task that we would like to solve. Our problem is a regression problem, so we set the mode as &lt;code&gt;regression&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;set the engine or the implementation of the model (Ranger)&lt;/p&gt;
&lt;p&gt;4.set the mode of the ML task (Regression)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;exploratory-data-analysis&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Exploratory data analysis&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;spotify_songs %&amp;gt;% 
 select(track_popularity, c(12:23)) %&amp;gt;% 
 correlate() %&amp;gt;% 
  network_plot(min_cor = 0.1,color = c(&amp;#39;#1a535c&amp;#39;,&amp;#39;#4ecdc4&amp;#39;,&amp;#39;#f7fff7&amp;#39;,&amp;#39;#ff6b6b&amp;#39;,&amp;#39;#ffe66d&amp;#39;)) &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;spotify_songs %&amp;gt;% 
 ggplot(aes(track_popularity)) +
 geom_histogram(fill = &amp;#39;indianred&amp;#39;) &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;shap&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Shap&lt;/h2&gt;
&lt;div id=&#34;machine-learning-2&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Machine Learning&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#rf &amp;lt;- rand_forest(trees = 100, mode = &amp;#39;regression&amp;#39;) %&amp;gt;% 
 #set_engine(&amp;quot;randomForest&amp;quot;) %&amp;gt;% 
 #fit(Species ~. ,data = iris_training)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;references-and-further-readings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;References and further readings&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.kaylinpavlik.com/classifying-songs-genres/&#34; class=&#34;uri&#34;&gt;https://www.kaylinpavlik.com/classifying-songs-genres/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://konradsemsch.netlify.com/2019/10/testing-the-tune-package-from-tidymodels-analysing-the-relationship-between-the-upsampling-ratio-and-model-performance/&#34; class=&#34;uri&#34;&gt;https://konradsemsch.netlify.com/2019/10/testing-the-tune-package-from-tidymodels-analysing-the-relationship-between-the-upsampling-ratio-and-model-performance/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Optimal Rule Lists</title>
      <link>/post/2020-01-18-optimal-rule-lists/</link>
      <pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/2020-01-18-optimal-rule-lists/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Axiom
There is an inverse relationship between
model accuracy and model interpretability.&lt;/p&gt;
&lt;p&gt;This post is heavily inspired by the Decision Rules chapter from the Interpretable Machine Learning book by Christoph Molnar.&lt;/p&gt;
&lt;p&gt;Some machine learning researchers argue that we should pay more attention to interpretable machine learning instead of trying to design methods to explain black box models.
While reading almost any paper the field of explainable machine learning, you will notice that in that every paper almost always starts by arguing that there is a trade-off between accuracy and interpretability. It means that a more interpretable is less accurate and vice versa and for this reason we need to use more complex and black box models and then design methods to peek into them. However, Cynthia Rudin argues that actually there is no trade-off between these two concepts. On the contrary, interpretability can even help us increase the accuracy of a model becuase with an interpretable algorithm we better understand how the predictive performance of a model can be improved.&lt;/p&gt;
&lt;p&gt;Cynthia Rudin encourages machine learning practitioners and researchers to rather than trying to make black-box algorithms more build and use accurate interpretable machine learning models .
There are already a number of interpretable machine learning algorithms in the literature.
Decision trees and linear models are the two most popular classes of interpretable algorithms. Rule learning algorithms also belong to the class of interpretable algorithms. The aim of these algorithms is to learn decision rules from input data.&lt;/p&gt;
&lt;p&gt;Decision rules are expressed as IF-THEN statement.&lt;/p&gt;
&lt;p&gt;If the condition of the IF part holds true, we will make the prediction based on output of the THEN part.&lt;/p&gt;
&lt;p&gt;Decision rules are considered to be probably the most human-understandable prediction model.&lt;/p&gt;
&lt;p&gt;In many ways, decision rules resemble decision trees. In fact, we can write down a decision tree as a set of decision rules.&lt;/p&gt;
&lt;p&gt;Decision trees are highly scalable and powerful algorithms. But a decision tree is a greedy algorithm. For instance, the split at each node in a decision tree is determined by a greedy process. It means that the decision tree does not find an optimal solution and therefore, the optimal rule lists.&lt;/p&gt;
&lt;div id=&#34;how-to-bin&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;How to bin&lt;/h1&gt;
&lt;p&gt;optbin
santokura&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(OneR)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;OneR&amp;#39; was built under R version 3.6.3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;iris_binned &amp;lt;- optbin(iris)
iris_binned&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     Sepal.Length Sepal.Width Petal.Length    Petal.Width    Species
## 1     (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 2     (4.3,5.41] (2.87,3.19] (0.994,2.46] (0.0976,0.791]     setosa
## 3     (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 4     (4.3,5.41] (2.87,3.19] (0.994,2.46] (0.0976,0.791]     setosa
## 5     (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 6     (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 7     (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 8     (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 9     (4.3,5.41] (2.87,3.19] (0.994,2.46] (0.0976,0.791]     setosa
## 10    (4.3,5.41] (2.87,3.19] (0.994,2.46] (0.0976,0.791]     setosa
## 11    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 12    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 13    (4.3,5.41] (2.87,3.19] (0.994,2.46] (0.0976,0.791]     setosa
## 14    (4.3,5.41] (2.87,3.19] (0.994,2.46] (0.0976,0.791]     setosa
## 15   (5.41,6.25]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 16   (5.41,6.25]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 17    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 18    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 19   (5.41,6.25]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 20    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 21    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 22    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 23    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 24    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 25    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 26    (4.3,5.41] (2.87,3.19] (0.994,2.46] (0.0976,0.791]     setosa
## 27    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 28    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 29    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 30    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 31    (4.3,5.41] (2.87,3.19] (0.994,2.46] (0.0976,0.791]     setosa
## 32    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 33    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 34   (5.41,6.25]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 35    (4.3,5.41] (2.87,3.19] (0.994,2.46] (0.0976,0.791]     setosa
## 36    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 37   (5.41,6.25]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 38    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 39    (4.3,5.41] (2.87,3.19] (0.994,2.46] (0.0976,0.791]     setosa
## 40    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 41    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 42    (4.3,5.41]    (2,2.87] (0.994,2.46] (0.0976,0.791]     setosa
## 43    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 44    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 45    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 46    (4.3,5.41] (2.87,3.19] (0.994,2.46] (0.0976,0.791]     setosa
## 47    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 48    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 49    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 50    (4.3,5.41]  (3.19,4.4] (0.994,2.46] (0.0976,0.791]     setosa
## 51    (6.25,7.9]  (3.19,4.4]  (2.46,4.86]   (0.791,1.63] versicolor
## 52    (6.25,7.9]  (3.19,4.4]  (2.46,4.86]   (0.791,1.63] versicolor
## 53    (6.25,7.9] (2.87,3.19]  (4.86,6.91]   (0.791,1.63] versicolor
## 54   (5.41,6.25]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 55    (6.25,7.9]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 56   (5.41,6.25]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 57    (6.25,7.9]  (3.19,4.4]  (2.46,4.86]   (0.791,1.63] versicolor
## 58    (4.3,5.41]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 59    (6.25,7.9] (2.87,3.19]  (2.46,4.86]   (0.791,1.63] versicolor
## 60    (4.3,5.41]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 61    (4.3,5.41]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 62   (5.41,6.25] (2.87,3.19]  (2.46,4.86]   (0.791,1.63] versicolor
## 63   (5.41,6.25]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 64   (5.41,6.25] (2.87,3.19]  (2.46,4.86]   (0.791,1.63] versicolor
## 65   (5.41,6.25] (2.87,3.19]  (2.46,4.86]   (0.791,1.63] versicolor
## 66    (6.25,7.9] (2.87,3.19]  (2.46,4.86]   (0.791,1.63] versicolor
## 67   (5.41,6.25] (2.87,3.19]  (2.46,4.86]   (0.791,1.63] versicolor
## 68   (5.41,6.25]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 69   (5.41,6.25]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 70   (5.41,6.25]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 71   (5.41,6.25]  (3.19,4.4]  (2.46,4.86]     (1.63,2.5] versicolor
## 72   (5.41,6.25]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 73    (6.25,7.9]    (2,2.87]  (4.86,6.91]   (0.791,1.63] versicolor
## 74   (5.41,6.25]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 75    (6.25,7.9] (2.87,3.19]  (2.46,4.86]   (0.791,1.63] versicolor
## 76    (6.25,7.9] (2.87,3.19]  (2.46,4.86]   (0.791,1.63] versicolor
## 77    (6.25,7.9]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 78    (6.25,7.9] (2.87,3.19]  (4.86,6.91]     (1.63,2.5] versicolor
## 79   (5.41,6.25] (2.87,3.19]  (2.46,4.86]   (0.791,1.63] versicolor
## 80   (5.41,6.25]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 81   (5.41,6.25]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 82   (5.41,6.25]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 83   (5.41,6.25]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 84   (5.41,6.25]    (2,2.87]  (4.86,6.91]   (0.791,1.63] versicolor
## 85    (4.3,5.41] (2.87,3.19]  (2.46,4.86]   (0.791,1.63] versicolor
## 86   (5.41,6.25]  (3.19,4.4]  (2.46,4.86]   (0.791,1.63] versicolor
## 87    (6.25,7.9] (2.87,3.19]  (2.46,4.86]   (0.791,1.63] versicolor
## 88    (6.25,7.9]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 89   (5.41,6.25] (2.87,3.19]  (2.46,4.86]   (0.791,1.63] versicolor
## 90   (5.41,6.25]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 91   (5.41,6.25]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 92   (5.41,6.25] (2.87,3.19]  (2.46,4.86]   (0.791,1.63] versicolor
## 93   (5.41,6.25]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 94    (4.3,5.41]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 95   (5.41,6.25]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 96   (5.41,6.25] (2.87,3.19]  (2.46,4.86]   (0.791,1.63] versicolor
## 97   (5.41,6.25] (2.87,3.19]  (2.46,4.86]   (0.791,1.63] versicolor
## 98   (5.41,6.25] (2.87,3.19]  (2.46,4.86]   (0.791,1.63] versicolor
## 99    (4.3,5.41]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 100  (5.41,6.25]    (2,2.87]  (2.46,4.86]   (0.791,1.63] versicolor
## 101   (6.25,7.9]  (3.19,4.4]  (4.86,6.91]     (1.63,2.5]  virginica
## 102  (5.41,6.25]    (2,2.87]  (4.86,6.91]     (1.63,2.5]  virginica
## 103   (6.25,7.9] (2.87,3.19]  (4.86,6.91]     (1.63,2.5]  virginica
## 104   (6.25,7.9] (2.87,3.19]  (4.86,6.91]     (1.63,2.5]  virginica
## 105   (6.25,7.9] (2.87,3.19]  (4.86,6.91]     (1.63,2.5]  virginica
## 106   (6.25,7.9] (2.87,3.19]  (4.86,6.91]     (1.63,2.5]  virginica
## 107   (4.3,5.41]    (2,2.87]  (2.46,4.86]     (1.63,2.5]  virginica
## 108   (6.25,7.9] (2.87,3.19]  (4.86,6.91]     (1.63,2.5]  virginica
## 109   (6.25,7.9]    (2,2.87]  (4.86,6.91]     (1.63,2.5]  virginica
## 110   (6.25,7.9]  (3.19,4.4]  (4.86,6.91]     (1.63,2.5]  virginica
## 111   (6.25,7.9]  (3.19,4.4]  (4.86,6.91]     (1.63,2.5]  virginica
## 112   (6.25,7.9]    (2,2.87]  (4.86,6.91]     (1.63,2.5]  virginica
## 113   (6.25,7.9] (2.87,3.19]  (4.86,6.91]     (1.63,2.5]  virginica
## 114  (5.41,6.25]    (2,2.87]  (4.86,6.91]     (1.63,2.5]  virginica
## 115  (5.41,6.25]    (2,2.87]  (4.86,6.91]     (1.63,2.5]  virginica
## 116   (6.25,7.9]  (3.19,4.4]  (4.86,6.91]     (1.63,2.5]  virginica
## 117   (6.25,7.9] (2.87,3.19]  (4.86,6.91]     (1.63,2.5]  virginica
## 118   (6.25,7.9]  (3.19,4.4]  (4.86,6.91]     (1.63,2.5]  virginica
## 119   (6.25,7.9]    (2,2.87]  (4.86,6.91]     (1.63,2.5]  virginica
## 120  (5.41,6.25]    (2,2.87]  (4.86,6.91]   (0.791,1.63]  virginica
## 121   (6.25,7.9]  (3.19,4.4]  (4.86,6.91]     (1.63,2.5]  virginica
## 122  (5.41,6.25]    (2,2.87]  (4.86,6.91]     (1.63,2.5]  virginica
## 123   (6.25,7.9]    (2,2.87]  (4.86,6.91]     (1.63,2.5]  virginica
## 124   (6.25,7.9]    (2,2.87]  (4.86,6.91]     (1.63,2.5]  virginica
## 125   (6.25,7.9]  (3.19,4.4]  (4.86,6.91]     (1.63,2.5]  virginica
## 126   (6.25,7.9]  (3.19,4.4]  (4.86,6.91]     (1.63,2.5]  virginica
## 127  (5.41,6.25]    (2,2.87]  (2.46,4.86]     (1.63,2.5]  virginica
## 128  (5.41,6.25] (2.87,3.19]  (4.86,6.91]     (1.63,2.5]  virginica
## 129   (6.25,7.9]    (2,2.87]  (4.86,6.91]     (1.63,2.5]  virginica
## 130   (6.25,7.9] (2.87,3.19]  (4.86,6.91]   (0.791,1.63]  virginica
## 131   (6.25,7.9]    (2,2.87]  (4.86,6.91]     (1.63,2.5]  virginica
## 132   (6.25,7.9]  (3.19,4.4]  (4.86,6.91]     (1.63,2.5]  virginica
## 133   (6.25,7.9]    (2,2.87]  (4.86,6.91]     (1.63,2.5]  virginica
## 134   (6.25,7.9]    (2,2.87]  (4.86,6.91]   (0.791,1.63]  virginica
## 135  (5.41,6.25]    (2,2.87]  (4.86,6.91]   (0.791,1.63]  virginica
## 136   (6.25,7.9] (2.87,3.19]  (4.86,6.91]     (1.63,2.5]  virginica
## 137   (6.25,7.9]  (3.19,4.4]  (4.86,6.91]     (1.63,2.5]  virginica
## 138   (6.25,7.9] (2.87,3.19]  (4.86,6.91]     (1.63,2.5]  virginica
## 139  (5.41,6.25] (2.87,3.19]  (2.46,4.86]     (1.63,2.5]  virginica
## 140   (6.25,7.9] (2.87,3.19]  (4.86,6.91]     (1.63,2.5]  virginica
## 141   (6.25,7.9] (2.87,3.19]  (4.86,6.91]     (1.63,2.5]  virginica
## 142   (6.25,7.9] (2.87,3.19]  (4.86,6.91]     (1.63,2.5]  virginica
## 143  (5.41,6.25]    (2,2.87]  (4.86,6.91]     (1.63,2.5]  virginica
## 144   (6.25,7.9]  (3.19,4.4]  (4.86,6.91]     (1.63,2.5]  virginica
## 145   (6.25,7.9]  (3.19,4.4]  (4.86,6.91]     (1.63,2.5]  virginica
## 146   (6.25,7.9] (2.87,3.19]  (4.86,6.91]     (1.63,2.5]  virginica
## 147   (6.25,7.9]    (2,2.87]  (4.86,6.91]     (1.63,2.5]  virginica
## 148   (6.25,7.9] (2.87,3.19]  (4.86,6.91]     (1.63,2.5]  virginica
## 149  (5.41,6.25]  (3.19,4.4]  (4.86,6.91]     (1.63,2.5]  virginica
## 150  (5.41,6.25] (2.87,3.19]  (4.86,6.91]     (1.63,2.5]  virginica&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the XAI point of view, we are interested in measuring two metrics for rule lists:&lt;/p&gt;
&lt;p&gt;Accuracy&lt;/p&gt;
&lt;p&gt;Parsimony: Shorter rules are more preferable&lt;/p&gt;
&lt;div id=&#34;corels&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;CORELS&lt;/h2&gt;
&lt;p&gt;Finding an optimal DT (or a set of rule lists) is an NP-hard problem. The CORELS algorithms developed by aims to find the optimal set of rules. To achieve this goal, CORLES uses pre-mined frequent patterns and optimization techniques.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disadvantaged of rule lists&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Rule learning algorithms by design can be only trained on datasets with a discrete target variable. It means that they are only capable of dealing with classification problem and not regression. We can tackle this issue by discretizing the continuous target variable in regression problems. However, doing that results in information loss. Moreover, the input features to a rule learning algorithm must be categorical. Again we can solve this problem by binning continouose features but the same information loss will persist.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Further Readings and Resources&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;section&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;p&gt;Refrences&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://shiring.github.io/machine_learning/2017/04/23/one_r&#34; class=&#34;uri&#34;&gt;https://shiring.github.io/machine_learning/2017/04/23/one_r&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
